{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"LARbasedOnCSAT/","title":"Last Agent Routing Using Simulated Auto CSAT","text":""},{"location":"LARbasedOnCSAT/#story","title":"Story","text":"<p>A common request for returning customers calling into a contact center is to work with the last person with which they had a good experience.  This may be because they are already familiar with what the customer needs or it may just be that the customer is familiar with the agent and enjoyed their last interaction. With the new Auto CSAT feature in the Webex Contact Center we can automatically account for this request and route to the last agent which had a high Auto CSAT with the customer.  </p> <p>Note</p> <p>Because this is a lab environment and you will be playing both the role of the customer and agent, we are going to use a simulated CSAT as it would be difficult to properly score a call in these conditions.  </p>"},{"location":"LARbasedOnCSAT/#high-level-explanation","title":"High Level Explanation","text":"<ol> <li>New call comes into the flow</li> <li>Call the Search API to find the last agent with which they had a good CSAT</li> <li>If the agent is available, we will route the call to that agent</li> <li>If the agent is not available or if no recent good CSAT scores exits for the caller, we will route the call to the queue for the next available agent. </li> </ol>"},{"location":"LARbasedOnCSAT/#preconfigured-elements","title":"Preconfigured elements","text":"<ol> <li>Wait treatment Subflow which will provide Music in Queue and Queue Messages. </li> <li>Connector for calling Webex Contact Center APIs</li> <li>Agent Editable and Reportable Global Variable for our simulated CSAT</li> </ol>"},{"location":"LARbasedOnCSAT/#build","title":"Build","text":""},{"location":"LARbasedOnCSAT/#create-an-new-flow","title":"Create an new flow","text":"<p>Create a flow named CLyourLabID_LARwCSAT</p>"},{"location":"LARbasedOnCSAT/#create-these-flow-variables","title":"Create these flow variables","text":"<p>Name: agentID</p> <p>Type: String</p> <p>Default Value: empty</p> <p>Name: queriedCSAT</p> <p>Type: Decimal</p> <p>Default Value: 0.0</p>"},{"location":"LARbasedOnCSAT/#add-the-global-variable-simulatedcsat-to-the-flow","title":"Add the Global Variable simulatedCSAT to the flow","text":"<p>There are no values to set because it has already been configured globally</p>"},{"location":"LARbasedOnCSAT/#add-a-play-message-node-for-our-welcome-message","title":"Add a Play Message node for our welcome message","text":"<p>Connect the New Phone Contact to this Play Message node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Welcome to the Last Agent Routing with auto CSAT lab. </p>"},{"location":"LARbasedOnCSAT/#add-an-http-request-node-for-our-query","title":"Add an HTTP Request node for our query","text":"<p>Connect the output node edge from the Play Message node to this node</p> <p>Select Use Authenticated Endpoint</p> <p>Connector: WxCC_API</p> <p>Path: /search</p> <p>Method: POST</p> <p>Content Type: GraphQL</p> <p>Copy this GraphQL query into the request body:</p> <p><pre><code>query simulatedCSAT(\n  $from: Long!\n  $to: Long!\n  $timeComparator: QueryTimeType\n  $filter: TaskFilters\n  $name: String!\n) {\n  task(from: $from, to: $to, timeComparator: $timeComparator, filter: $filter) {\n    tasks {\n      owner {\n        name #Agent Name\n        id #Agent ID\n      }\n      simulatedCSAT: doubleGlobalVariables(name: $name) {\n        name\n        value #Value of the simulatedCSAT\n      }\n    }\n  }\n}\n</code></pre> Variables: <pre><code>{\n  \"from\": \"{{now() | epoch(inMillis=true) - 604800000}}\", # time now - 1 week represented in EPOCH time(ms)\n  \"to\": \"{{now() | epoch(inMillis=true)}}\", # time now represented in EPOCH time(ms)\n  \"timeComparator\": \"endedTime\",\n  \"filter\": {\n    \"and\": [\n      {\n        \"status\": {\n          \"equals\": \"ended\"\n        }\n      },\n      {\n        \"origin\": {\n          \"equals\": \"{{NewPhoneContact.ANI}}\"\n        }\n      },\n      {\n        \"doubleGlobalVariables\": { #Filtering on the Global Variable simulatedCSAT to be greater or equal to 3 \n          \"name\": {\n            \"equals\": \"simulatedCSAT\" \n          },\n          \"value\": {\n            \"gte\": 3\n          }\n        }\n      }\n    ]\n  },\n  \"name\": \"simulatedCSAT\" #The Alias name used for the global variable in the returned fields\n}\n</code></pre> </p> <p>Parse Settings:</p> <p>Content Type: JSON</p> <ul> <li>Output Variable: <code>agentID</code></li> <li> <p>Path Expression: <code>$.data.task.tasks[0].owner.id</code></p> </li> <li> <p>Output Variable: <code>queriedCSAT</code></p> </li> <li>Path Expression: <code>$.data.task.tasks[0].simulatedCSAT.value</code> </li> </ul>"},{"location":"LARbasedOnCSAT/#add-a-condition-node","title":"Add a Condition node","text":"<p>Connect the output node edge from teh HTTP Request node to this node</p> <p>Expression: <code>{{agentID is empty}}</code></p> <p>We will connect the True node in a future step.</p> <p>Connect the False node edge to the Queue To Agent node created in the next step. </p>"},{"location":"LARbasedOnCSAT/#add-a-queue-to-agent-node","title":"Add a Queue To Agent node","text":"<p>Agent Variable: agentID</p> <p>Agent Lookup Type: ID</p> <p>Set Contact Priority: True</p> <p>Select Static Priority</p> <p>Static Priority Value: P1</p> <p>Reporting Queue: yourQueueID</p> <p>Park Contact if Agent Unavailable: False</p> <p>Recovery Queue: yourQueueID</p> <p>Connect the Output and Error node edges to the Queue Contact node created in the next step</p>"},{"location":"LARbasedOnCSAT/#add-a-queue-contact-node","title":"Add a Queue Contact node","text":"<p>Connect the True node edge from the Condition node to this node</p> <p>Select Static Queue</p> <p>Queue: yourQueueID</p> <p>Connect the Output node edge from this node to the Subflow node</p>"},{"location":"LARbasedOnCSAT/#add-a-subflow-node","title":"Add a Subflow node","text":"<p>In the Activity Library pane on the left side of the screen, click Subflows</p> <p>Find the Subflow names WaitTreatment and drag it onto the flow canvas like you would any other node.</p> <p>Connect the output node edge from the Queue Contact node added in the previous step to this node.</p> <p>Subflow Label: Latest</p> <p>Enable automatic updates: True</p> <p>Subflow Input Variables: None</p> <p>Subflow Output Variables: None</p> <p>Connect the output node edge from this node to the Disconnect Contact node added in the next step.</p>"},{"location":"LARbasedOnCSAT/#add-a-disconnect-contact-node","title":"Add a Disconnect Contact node","text":""},{"location":"LARbasedOnCSAT/#check-your-flow","title":"Check your flow","text":""},{"location":"LARbasedOnCSAT/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Live </p> <p>Click Publish Flow</p>"},{"location":"LARbasedOnCSAT/#map-your-flow-to-your-inbound-channel","title":"Map your flow to your inbound channel","text":"<p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): </p> <p>Select the Routing Flow: CL_LARwCSAT</p> <p>Select the Version Label: Live</p> <p>Click Save in the lower right corner of the screen</p>"},{"location":"LARbasedOnCSAT/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in using the Desktop option.</li> <li>On your Agent Desktop, set your status to available<ol> <li>Using Webex, place a call to your Inbound Channel number </li> <li>You should be offered a call, click on the accept button. (You may want to mute the mic on both Webex and the Agent Desktop)</li> <li>In the Agent Desktop you will see a new field in Call Information section where you can edit the Simulated CSAT.  Enter a value of 2.9 and click save.</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>Using Webex, place another call to your Inbound Channel number <ol> <li>You should be offered the call, click on the accept button.</li> <li>Enter a value of 3.7 in for Simulated CSAT and click save.</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>In your Flow:<ol> <li>Open the debugger</li> <li>Select the first interaction (at the bottom of the list)</li> <li>Trace the steps taken in the flow</li> <li>Open the last interaction </li> <li>Trace the steps taken in the flow</li> </ol> </li> <li>Answer these questions:<ol> <li>Did the second call get routed to your agent via the Queue To Agent node?<ol> <li>Why or why not</li> </ol> </li> </ol> </li> <li>On your Agent Desktop, set your status to not be available</li> <li>Using Webex, place another call to your Inbound Channel number </li> <li>After you hear the queue treatment start, change your status to available on the agent desktop.<ol> <li>You should be offered the call, click on the accept button.</li> <li>Enter a value of 2.8 in for Simulated CSAT and click save.</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>In your Flow:<ol> <li>Open the debugger</li> <li>Select the last interaction</li> <li>Trace the steps taken in the flow</li> </ol> </li> <li>Answer these questions:<ol> <li>Was the call routed to the Queue to Agent node?</li> <li>What happened next?<ol> <li>Why?</li> <li>What will happen if you call in again starting in the Available status?</li> </ol> </li> </ol> </li> <li>Make sure that you are in Available status on the agent desktop.</li> <li>Using Webex, place another call to your Inbound Channel number <ol> <li>You should be offered the call, click on the accept button.</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>In your Flow:<ol> <li>Open the debugger</li> <li>Select the last interaction</li> <li>Trace the steps taken in the flow</li> </ol> </li> <li>Answer the following questions:<ol> <li>Was the call offered to you from the Queue to Agent node?</li> <li>What was the value of the variable queriedCSAT (look in the HTTP node step)<ol> <li>Why?</li> </ol> </li> <li>How do you think that you could change the logic/criteria to meet other business needs? </li> </ol> </li> </ol>"},{"location":"LARbasedOnCSAT/#once-you-have-completed-the-testing-go-pick-another-adventure-from-the-adventure-section","title":"Once you have completed the testing, go pick another adventure from the Adventure Section","text":""},{"location":"adventureList/","title":"Adventure Awaits You!","text":""},{"location":"adventureList/#how-it-works","title":"How it works","text":"<p>In this section of the lab you are going to choose your own adventure from the list of stories on this page.  After you complete a story, you will return to this page to pick another. Some stories may be more advanced than others.  If you want recommendations, feel free to ask.  Now go explore and play!</p>"},{"location":"adventureList/#stories","title":"Stories","text":""},{"location":"adventureList/#dial-a-dad-joke","title":"Dial-A-Dad-Joke","text":"<p>Not every learning exercise needs to be overly serious.  This exercise is a fun way to explore the basics of and http request, JSON, text-to-speech, and basic flow logic, all while getting a little giggle.</p>"},{"location":"adventureList/#offering-a-callback-option-to-calls-actively-waiting-in-the-queue","title":"Offering a Callback option to calls actively waiting in the queue","text":"<p>If your wait times are longer than your caller wants to listen to your hold music for, you can offer to hold their place in the queue and call them back when it is their turn.  In this lab you will be adding the callback functionality to the CL_core flow.</p>"},{"location":"adventureList/#multiple-lines-of-business-using-the-same-flow","title":"Multiple Lines of Business Using the Same Flow","text":"<p>You do not always need to create a new flow for each line of business in the contact center, instead you can often reuse your flow logic and account for the differences including different queues and wait treatments.  In this lab you will be adding a new line of business to the CL_core flow.</p>"},{"location":"adventureList/#routing-returning-callers","title":"Routing Returning Callers","text":"<p>When a customer calls back into the contact center within ten minutes of their last call ending, we can assume there was a dropped call, missed callback, or they need additional assistance from their last interaction. We are going to prioritize their call in the queue so that they can finish their business.</p>"},{"location":"adventureList/#last-agent-routing-based-on-simulated-auto-csat","title":"Last Agent Routing Based on (Simulated) Auto CSAT","text":"<p>A common request for returning customers calling into a contact center is to work with the last person with which they had a good experience. This may be because they are already familiar with what the customer needs or it may just be that the customer is familiar with the agent and enjoyed their last interaction. With the new Auto CSAT feature in the Webex Contact Center we can automatically account for this request and route to the last agent which had a high Auto CSAT with the customer. </p>"},{"location":"adventureList/#emergency-close","title":"Emergency Close","text":""},{"location":"adventureList/#recording-a-message-to-be-played-in-your-flow-by-making-an-inbound-call","title":"Recording a message to be played in your flow by making an inbound call","text":""},{"location":"adventureList/#prevent-duplicate-callback-requests-using-a-subflow","title":"Prevent Duplicate Callback Requests Using a Subflow","text":""},{"location":"adventureTemplate/","title":"Title","text":""},{"location":"adventureTemplate/#story","title":"Story","text":"<p>Write a paragraph explaining what is going to happen and why you would want to do it.</p>"},{"location":"adventureTemplate/#high-level-explanation","title":"High Level Explanation","text":"<ol> <li>This section is optional but can explain the order of operations</li> <li></li> </ol>"},{"location":"adventureTemplate/#preconfigured-elements","title":"Preconfigured elements","text":"<ol> <li>If you are using a prebuilt subflow or function </li> <li>You should call attention to a shared configuration item which is important to the success of the flow, like a connector  </li> </ol>"},{"location":"adventureTemplate/#build","title":"Build","text":""},{"location":"adventureTemplate/#when-you-are-adding-something-to-the-canvas","title":"when you are adding something to the canvas","text":"<p>list the fields and values</p> <p>list instructions like node connections </p>"},{"location":"adventureTemplate/#when-you-are-adding-something-to-the-canvas_1","title":"when you are adding something to the canvas","text":"<p>list the fields and values</p> <p>list instructions like node connections </p>"},{"location":"adventureTemplate/#check-your-flow","title":"Check your flow","text":""},{"location":"adventureTemplate/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Live </p> <p>Click Publish Flow</p>"},{"location":"adventureTemplate/#map-your-flow-to-your-inbound-channel","title":"Map your flow to your inbound channel","text":"<p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): </p> <p>Select the Routing Flow: CL_LARwCSAT</p> <p>Select the Version Label: Live</p> <p>Click Save in the lower right corner of the screen</p>"},{"location":"adventureTemplate/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in using the Desktop option.</li> <li>list the streps<ol> <li>double indent sub steps or sections</li> </ol> </li> <li></li> </ol>"},{"location":"adventureTemplate/#once-you-have-completed-the-testing-go-pick-another-adventure-from-the-adventure-section","title":"Once you have completed the testing, go pick another adventure from the Adventure Section","text":""},{"location":"callback/","title":"Offering a Callback option to calls actively waiting in the queue","text":""},{"location":"callback/#story","title":"Story","text":"<p>If your wait times are longer than your caller wants to listen to your hold music for, you can offer to hold their place in the queue and call them back when it is their turn.  In this lab you will be adding the callback functionality to the CL_core flow.</p>"},{"location":"callback/#high-level-explanation","title":"High Level Explanation","text":"<ol> <li>This section is optional but can explain the order of operations</li> <li></li> </ol>"},{"location":"callback/#preconfigured-elements","title":"Preconfigured elements","text":"<ol> <li>If you are using a prebuilt subflow or function </li> <li>You should call attention to a shared configuration item which is important to the success of the flow, like a connector  </li> </ol>"},{"location":"callback/#build","title":"Build","text":""},{"location":"callback/#open-flow-cl_core","title":"Open flow CL_core","text":"<p>Toggle the Edit switch on </p> If you have previously completed the Multiple Lines of Business Using the Same Flow lab If you have NOT previously completed the Multiple Lines of Business Using the Same Flow lab"},{"location":"callback/#replace-the-cbchoice-node-with-a-case-node","title":"Replace the CBchoice node with a Case node","text":"<p>Click on the CBchoice and delete it.</p> <p>Add a new Case node</p> <p>Activity Label: CBchoice</p> <p>Select Build Expression</p> <p>Value: true</p> <p>In the Link Description section:</p> <p>Replace Case 0 with: {{cbChoice == false and BusinessHours.WorkingHoursShift_Name == \"Lunch\" and welcomeMenu.OptionEntered == \"1\"}}</p> <p>Replace Case 1 with: {{cbChoice}}</p> <p>Connect the output node from the Subflow node to to input node edge of this node</p> <p>Connect the {{cbChoice == false and BusinessHours.WorkingHoursShift_Name == \"Lunch\"}} node edge to the Disconnect Contact node</p> <p>Connect the {{cbChoice}} node edge to the Callback node</p> <p>Connect the Default node edge to the Play Music node </p>"},{"location":"callback/#add-a-new-condition-node","title":"Add a new Condition node","text":"<p>Activity Label: EvenOddCondition</p> <p>Expression: {{counter is even}} </p> <p>Connect the True Node edge of this Condition node to the Subflow node</p> <p>Connect the False node edge of this Condition node to the Play Music Node</p> <p>Delete the connection from LOBmessages1 to the Play Music node</p> <p>Connect the outbound node edge from LOBmessages1 to the inbound node edge of this Condition node </p> Check your flow <p></p>"},{"location":"callback/#replace-the-cbchoice-node-with-a-case-node_1","title":"Replace the CBchoice node with a Case node","text":"<p>Click on the CBchoice and delete it.</p> <p>Add a new Case node</p> <p>Activity Label: CBchoice</p> <p>Select Build Expression</p> <p>Value: true</p> <p>In the Link Description section:</p> <p>Replace Case 0 with: {{cbChoice == false and BusinessHours.WorkingHoursShift_Name == \"Lunch\"}}</p> <p>Replace Case 1 with: {{cbChoice}}</p> <p>Connect the output node from the Subflow node to to input node edge of this node</p> <p>Connect the {{cbChoice == false and BusinessHours.WorkingHoursShift_Name == \"Lunch\"}} node edge to the Disconnect Contact node</p> <p>Connect the {{cbChoice}} node edge to the Callback node</p> <p>Connect the Default node edge to the Play Music node </p>"},{"location":"callback/#update-these-node-connections","title":"Update these node connections","text":"<p>Delete the connection from the Play Message node which is connected to the True node edge of the Condition node</p> <p>Connect the Play Message node which is connected to the True node edge of the Condition node to the Subflow node</p> Check your flow <p></p>"},{"location":"callback/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Test </p> <p>Click Publish Flow</p>"},{"location":"callback/#map-your-flow-to-your-inbound-channel","title":"Map your flow to your inbound channel","text":"<p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): </p> <p>Select the Routing Flow: CL_core</p> <p>Select the Version Label: Test</p> <p>Click Save in the lower right corner of the screen</p>"},{"location":"callback/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in using the Desktop option.</li> <li>Using Webex, place a call to your Inbound Channel number </li> <li></li> </ol>"},{"location":"callback/#once-you-have-completed-the-testing-go-pick-another-adventure-from-the-adventure-section","title":"Once you have completed the testing, go pick another adventure from the Adventure Section","text":""},{"location":"cheatsheet/","title":"Cheat Sheet","text":""},{"location":"cheatsheet/#create-a-new-flow","title":"Create a New Flow","text":""},{"location":"cheatsheet/#create-flow-variables","title":"Create Flow Variables","text":""},{"location":"cheatsheet/#add-global-variables-to-a-flow","title":"Add Global Variables to a Flow","text":""},{"location":"cheatsheet/#add-a-node-to-a-flow","title":"Add a Node to a Flow","text":""},{"location":"cheatsheet/#add-a-subflow-to-a-flow","title":"Add a Subflow to a Flow","text":""},{"location":"cheatsheet/#publish-a-flow","title":"Publish a Flow","text":""},{"location":"cheatsheet/#map-a-flow-to-an-inbound-channel-assign-an-inbound-number","title":"Map a Flow to an Inbound Channel (Assign an Inbound Number)","text":""},{"location":"coreLab1/","title":"Core Lab 1 - Let's Start From the Beginning","text":""},{"location":"coreLab1/#learning-objectives","title":"Learning Objectives","text":"<p>In this section of the lab we will building and testing together as we explore the flow builder as well as other areas of the Webex Contact Center. We will start by creating a basic flow from scratch then add functionality as we learn about new features and concepts.  If you are already a seasoned veteran and complete the sections before the rest of the group, please feel free to help others as we often learn more by teaching.</p>"},{"location":"coreLab1/#build","title":"Build","text":""},{"location":"coreLab1/#create-a-new-flow","title":"Create a new flow","text":"<p>Create a new flow named CL_core</p>"},{"location":"coreLab1/#add-a-play-message-node","title":"Add a Play Message node","text":"<p>Connect the New Phone Contact output node edge to this Play Message node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Welcome to Lab 1. </p>"},{"location":"coreLab1/#add-a-queue-contact-node","title":"Add a Queue Contact node","text":"<p>Connect the output node edge from the Play Message node added in the previous step to this node</p> <p>Select Static Queue</p> <p>Queue: yourQueueID </p>"},{"location":"coreLab1/#add-a-play-music-node","title":"Add a Play Music node","text":"<p>Connect the output node edge from the Queue Contact node added in the previous step to this node</p> <p>Select Static Audio File</p> <p>Music File: defaultmusic_on_hold_cisco_opus_no_1.wav</p> <p>Connect the output node edge from this node to the input node edge of this node (making  a loop) </p>"},{"location":"coreLab1/#check-your-flow","title":"Check your flow","text":""},{"location":"coreLab1/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Live </p> <p>Click Publish Flow</p>"},{"location":"coreLab1/#map-your-flow-to-your-inbound-channel","title":"Map your flow to your inbound channel","text":"<p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): </p> <p>Select the Routing Flow: CL_core</p> <p>Select the Version Label: Live</p> <p>Click Save in the lower right corner of the screen</p>"},{"location":"coreLab1/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in selecting the Desktop option for your Voice connection (If it is not still open).</li> <li>On your Agent Desktop, make sure your status is not set to Available<ol> <li>Using Webex, place a call to your Inbound Channel number </li> <li>After you hear the queue treatment start, change your status to Available and answer the call. </li> <li>End the call and wrap it up</li> </ol> </li> <li>In your flow:<ol> <li>Open the Debugger</li> <li>Select the last interaction (at the top of the list)</li> <li>Trace the steps taken in the flow<ol> <li>Note that you can see the path that the call took, input variables, output variables, and events</li> </ol> </li> </ol> </li> </ol>"},{"location":"coreLab2/","title":"Core Lab 2 - Enhancing the Wait Treatment","text":""},{"location":"coreLab2/#learning-objectives","title":"Learning Objectives","text":"<p>In this section of the lab we will continue building and testing together.  We will be enhancing the the wait treatment section of our floe to play alternating comfort messages every 30 seconds the caller is on hold and continue the hold music where it left off (instead of starting it over every 30 seconds).</p>"},{"location":"coreLab2/#new-elements","title":"New Elements","text":"<ul> <li>Variables</li> <li>Pebble Templates</li> <li>Flow Logic</li> </ul>"},{"location":"coreLab2/#build","title":"Build","text":""},{"location":"coreLab2/#open-flow-cl_core","title":"Open flow CL_core","text":"<p>Toggle the Edit switch on </p>"},{"location":"coreLab2/#create-a-flow-variable","title":"Create a  Flow Variable","text":"<p>Name: counter</p> <p>Type: Integer</p> <p>Default Value: 0</p>"},{"location":"coreLab2/#add-a-set-variable-node","title":"Add a Set Variable node","text":"<p>Variable: counter</p> <p>Select Set Value</p> <p>Value <code>{{counter + 1}}</code></p> <p>Delete the loop connection on the Play Music node</p> <p>Connect the Play Music output node edge to this Set Variable node</p>"},{"location":"coreLab2/#add-a-condition-node","title":"Add a Condition node","text":"<p>Connect the Set Variable output node edge to this Condition node</p> <p>Expression: <code>{{counter is even}}</code> </p>"},{"location":"coreLab2/#add-a-play-message-node","title":"Add a Play Message node","text":"<p>Connect the True node edge of the previous Condition node to this Play Message node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Comfort Message 1.</p> <p>Connect the Play Message node edge to the Play Music Node </p>"},{"location":"coreLab2/#copy-the-previous-a-play-message-node","title":"Copy the Previous a Play Message node","text":"<p>Connect the False node edge of the previous Condition node to this Play Message node</p> <p>Edit the Text-to-Speech Message: Comfort Message 2.</p> <p>Connect the Play Message node edge to the Play Music Node</p>"},{"location":"coreLab2/#edit-the-play-music-node","title":"Edit the Play Music node","text":"<p>Start Offset: <code>{{counter * 30}}</code></p> <p>Music Duration: 30 </p>"},{"location":"coreLab2/#check-your-flow","title":"Check your flow","text":""},{"location":"coreLab2/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Live </p> <p>Click Publish Flow</p>"},{"location":"coreLab2/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in selecting the Desktop option for your Voice connection (If it is not still open).</li> <li>On your Agent Desktop, make sure your status is not set to Available<ol> <li>Using Webex, place a call to your Inbound Channel number </li> <li>Listen to the wait treatment</li> </ol> </li> <li>Answer these questions:<ol> <li>Did the Comfort messages alternate? </li> <li>What happened with the hold music?</li> </ol> </li> </ol>"},{"location":"coreLab3/","title":"Core Lab 3 - Adding Business Hours","text":""},{"location":"coreLab3/#learning-objectives","title":"Learning Objectives","text":"<p>In this section of the lab we will continue building and testing together.  We will be creating a new Business Hours configuration item, adding it into our flow, and making updates to Business Hours to understand how they work.</p>"},{"location":"coreLab3/#new-elements","title":"New Elements","text":"<ul> <li>Business Hours</li> </ul>"},{"location":"coreLab3/#create-new-configuration-items","title":"Create New Configuration Items","text":""},{"location":"coreLab3/#create-a-new-business-hours","title":"Create a new Business Hours","text":"<p>In Control Hub, navigate to Business Hours and click Create Working Hours</p> <p>Name: CL_Business Hours</p> <p>Description: CL_Business Hours</p> <p>Timezone: America/Los_Angeles</p> <p>Click Add Shift</p> <p>Name: Open</p> <p>Select Monday through Friday</p> <p>Time duration: 9:00 AM to 6:00 PM</p> <p>Click Save</p> <p>Click Create</p> <p>Keep this tab open</p>"},{"location":"coreLab3/#build","title":"Build","text":""},{"location":"coreLab3/#open-flow-cl_core","title":"Open flow CL_core","text":"<p>Toggle the Edit switch on </p>"},{"location":"coreLab3/#add-a-business-hours-node","title":"Add a Business Hours node","text":"<p>Activity Label: BusinessHours</p> <p>Select Static Business Hours</p> <p>Business Hour: CL_Business Hours</p> <p>Delete the connection between New Phone Contact node and Play Message node</p> <p>Connect the Working Hours node edge to the Play Message node </p>"},{"location":"coreLab3/#add-a-play-message-node","title":"Add a Play Message node","text":"<p>Connect the Default, Override, and Holidays node edges of the Business Hours node to this Play Message node</p> <p>Activity Label: ClosedMessage</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Thank you for calling us.  Unfortunately our offices are currently closed.  Please call back during our normal business hours. </p>"},{"location":"coreLab3/#add-a-disconnect-contact-node","title":"Add a Disconnect Contact node","text":"<p>Connect the Output node edge from the ClosedMessage node to this Disconnect Contact node </p>"},{"location":"coreLab3/#check-your-flow","title":"Check your flow","text":""},{"location":"coreLab3/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Live </p> <p>Click Publish Flow</p>"},{"location":"coreLab3/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in selecting the Desktop option for your Voice connection (If it is not still open).</li> <li>On your Agent Desktop, make sure your status is not set to Available<ol> <li>Using Webex, place a call to your Inbound Channel number </li> <li>When your hear the hold music disconnect the call<ol> <li>Open the Debugger and note that the path from the Business Hours node hit the welcome message node</li> <li>Note that you can see the name of the Business Hours </li> </ol> </li> </ol> </li> </ol>"},{"location":"coreLab3/#edit-configuration-items","title":"Edit Configuration Items","text":""},{"location":"coreLab3/#edit-the-business-hours-in-control-hub","title":"Edit the Business Hours in Control Hub","text":"<p>Navigate to Business Hours in Control Hub and open CL_Business Hours (if you previously closed it)</p> <p>Click on the Shift Name Open</p> <p>Change the Time duration: 9:00 AM to 12:00 PM </p> <p>Click Save</p> <p>Click Save on Business Hours </p>"},{"location":"coreLab3/#testing_1","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in selecting the Desktop option for your Voice connection (If it is not still open).</li> <li>On your Agent Desktop, make sure your status is not set to Available<ol> <li>Using Webex, place a call to your Inbound Channel number </li> <li>When your hear the hold music disconnect the call<ol> <li>Open the Debugger and note that the path from the Business Hours node hit the ClosedMessage node</li> </ol> </li> </ol> </li> </ol>"},{"location":"coreLab4/","title":"Core Lab 4 - Business Hours Logic","text":""},{"location":"coreLab4/#learning-objectives","title":"Learning Objectives","text":"<p>In this section of the lab we will continue building and testing together.  We will add a new option where we want to close the queue for lunch but let the caller opt-in for a callback when our agents return.</p>"},{"location":"coreLab4/#new-elements","title":"New Elements","text":"<ul> <li>Subflows</li> <li>Callback</li> </ul>"},{"location":"coreLab4/#edit-configuration-items","title":"Edit Configuration Items","text":""},{"location":"coreLab4/#edit-the-business-hours-in-control-hub","title":"Edit the Business Hours in Control Hub","text":"<p>Navigate to Business Hours in Control Hub and open CL_Business Hours (if you previously closed it)</p> <p>Click on the Shift Name Open</p> <p>Change the Name to Open AM </p> <p>Click Save</p> <p>Click Add Shift</p> <p>Name: Open PM</p> <p>Select Monday through Friday</p> <p>Time duration: 1:01 PM to 6:00 PM</p> <p>Click Save</p> <p>Click Add Shift</p> <p>Name: Lunch</p> <p>Select Monday through Friday</p> <p>Time duration: 12:00 PM to 1:00 PM (We may adjust these times during the lab exercise)</p> <p>Click Save</p> <p>Click Save on Business Hours </p>"},{"location":"coreLab4/#build","title":"Build","text":""},{"location":"coreLab4/#open-flow-cl_core","title":"Open flow CL_core","text":"<p>Toggle the Edit switch on </p>"},{"location":"coreLab4/#create-these-flow-variables","title":"Create these Flow Variables","text":"<p>Name: ANI</p> <p>Type: String</p> <p>Default Value: Leave Empty</p> <p>Name: cbChoice</p> <p>Type: Boolean</p> <p>Default Value: False</p>"},{"location":"coreLab4/#add-a-condition-node","title":"Add a Condition node","text":"<p>Activity Label: LunchCheck</p> <p>Expression: <code>{{BusinessHours.WorkingHoursShift_Name == \"Lunch\"}}</code></p> <p>Delete the connection between the play welcome message node and the Queue Contact node</p> <p>Connect the play welcome message node edge to this Condition node</p> <p>Connect the False node edge to the play welcome message node </p>"},{"location":"coreLab4/#add-a-subflow-node","title":"Add a Subflow node","text":"<p>Name: LTRCCT2296Callback</p> <p>Connect the True node edge from LunchCheck to this Subflow node</p> <p>Subflow Label: Live</p> <p>Map Subflow Input Variables</p> <p>Click Add New</p> <p>Current Flow Variable: NewPhoneContact.ANI</p> <p>Subflow Input Variable: ANI</p> <p>Click Add New</p> <p>Current Flow Variable: BusinessHours.WorkingHoursShift_Name</p> <p>Subflow Input Variable: BusinessHours</p> <p>Map Subflow Output Variables</p> <p>Click Add New</p> <p>Subflow Output Variable: CBbool</p> <p>Current Flow Variable: cbChoice</p> <p>Click Add New</p> <p>Subflow Output Variable: ANI</p> <p>Current Flow Variable: ANI </p>"},{"location":"coreLab4/#add-a-condition-node_1","title":"Add a Condition node","text":"<p>Activity Label: CBchoice</p> <p>Expression: <code>{{cbChoice}}</code></p> <p>Connect the output node edge from the Subflow node to this Condition node</p> <p>Connect the False node edge to the Disconnect Contact node </p>"},{"location":"coreLab4/#add-a-callback-node","title":"Add a Callback node","text":"<p>Connect the True node edge from the CBchoice node to this Callback node</p> <p>Callback Dial Number: ANI</p> <p>Callback Queue: Static</p> <p>Callback Queue: </p> <p>Callback ANI: Static</p> <p>Callback ANI: </p> <p>Connect output node to the Disconnect Contact node </p>"},{"location":"coreLab4/#check-your-flow","title":"Check your flow","text":""},{"location":"coreLab4/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Live </p> <p>Click Publish Flow</p>"},{"location":"coreLab4/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in selecting the Desktop option for your Voice connection (If it is not still open).</li> <li>On your Agent Desktop, make sure your status is not set to Available<ol> <li>Using Webex, place a call to your Inbound Channel number </li> <li>Elect to receive a callback</li> <li>After the call ends, set your status to Available</li> <li>Answer the call in the Agent Desktop</li> <li>Answer the call in the Webex</li> <li>End the call</li> <li>Wrap up the call</li> <li>Set your status to not Available</li> </ol> </li> </ol>"},{"location":"coreLab5/","title":"Core Lab 5 - Business Hours Overrides","text":""},{"location":"coreLab5/#learning-objectives","title":"Learning Objectives","text":"<p>In this section of the lab we will continue building and testing together.  We will create a new Business Hours Override which we will use to create a special treatment on the second Tuesday of every month of the summer.</p>"},{"location":"coreLab5/#new-elements","title":"New Elements","text":""},{"location":"coreLab5/#create-and-update-configuration-items","title":"Create and Update Configuration Items","text":""},{"location":"coreLab5/#create-a-new-override-for-our-business-hours","title":"Create a new Override for our Business Hours","text":"<p>In Control Hub, navigate to Business Hours, click Overrides in the top ribbon, and click Create Overrides</p> <p>Name: CL_Overrides</p> <p>Description: CL__Overrides</p> <p>Timezone: America/Los_Angeles</p> <p>Click Add new override</p> <p>Name: Second Tuesday June</p> <p>Start time: June, 10, 2025 03:00 PM (Time will be adjusted during the lab for testing)</p> <p>End time: June, 10, 2025 05:00 PM (Time will be adjusted during the lab for testing)</p> <p>Toggle Status On</p> <p>Click the check mark under Action</p> <p>Click Create</p>"},{"location":"coreLab5/#update-your-business-hours-to-use-the-new-override","title":"Update your Business Hours to use the new Override","text":"<p>Click the Overrides chevron in the ribbon section of the panel</p> <p>Click Working Hours in the top ribbon</p> <p>Open CL_Business Hours</p> <p>Scroll to the bottom of the page to additional settings</p> <p>Override: CL_Overrides</p> <p>Click Save </p>"},{"location":"coreLab5/#build","title":"Build","text":""},{"location":"coreLab5/#open-flow-cl_core","title":"Open flow CL_core","text":"<p>Toggle the Edit switch on </p>"},{"location":"coreLab5/#add-a-play-message-node","title":"Add a Play Message node","text":"<p>Activity Label: SecondTuesday</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Happy second Tuesday of the month!  We are closing our office early every second Tuesday of the month over the summer so that our team can spend time with their families.  Please call back tomorrow. </p> <p>Delete the Override node edge connector between BusinessHours saf ClosedMessage</p> <p>Connect the Override node edge connector to this node</p> <p>Connect the outbound node edge from this node to the Disconnect Contact node </p>"},{"location":"coreLab5/#check-your-flow","title":"Check your flow","text":""},{"location":"coreLab5/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Live </p> <p>Click Publish Flow</p>"},{"location":"coreLab5/#map-your-flow-to-your-inbound-channel","title":"Map your flow to your inbound channel","text":"<p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): </p> <p>Select the Routing Flow: CL_LARwCSAT</p> <p>Select the Version Label: Live</p> <p>Click Save in the lower right corner of the screen</p>"},{"location":"coreLab5/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in using the Desktop option.</li> <li>Using Webex, place a call to your Inbound Channel number <ol> <li>What path did the call take in the flow?</li> </ol> </li> <li>In Control Hub, navigate to Business Hours, click Overrides in the top ribbon, and click Create Overrides         1.  Open CL_Overrides         2.  Click the edit icon          3.  Toggle the status to off         4.  Click the check mark under actions         5.  Click Save</li> <li>Using Webex, place a call to your Inbound Channel number <ol> <li>What path did the call take in the flow?</li> </ol> </li> <li>In Control Hub, navigate to Business Hours, click Overrides in the top ribbon, and click Create Overrides         1.  Open CL_Overrides         2.  Click the edit icon          3.  Toggle the status to on         4.  Update the end time to be in the past         5.  Click the check mark under actions         6.  Click Save</li> <li>Using Webex, place a call to your Inbound Channel number <ol> <li>What path did the call take in the flow?</li> </ol> </li> </ol>"},{"location":"dadJoke/","title":"Dial-A-Dad-Joke","text":""},{"location":"dadJoke/#story","title":"Story","text":"<p>Not every learning exercise needs to be overly serious.  This exercise is a fun way to explore the basics of and http request, JSON, text-to-speech, and basic flow logic, all while getting a little giggle.  </p> <p>In this lab we will be using https://icanhazdadjoke.com to retrieve a Dad Joke via API</p>"},{"location":"dadJoke/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Live </p> <p>Click Publish Flow</p>"},{"location":"dadJoke/#map-your-flow-to-your-inbound-channel","title":"Map your flow to your inbound channel","text":"<p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): </p> <p>Select the Routing Flow: CL_LARwCSAT</p> <p>Select the Version Label: Live</p> <p>Click Save in the lower right corner of the screen</p>"},{"location":"dadJoke/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in using the Desktop option.</li> <li>list the streps<ol> <li>double indent sub steps or sections</li> </ol> </li> <li></li> </ol>"},{"location":"dadJoke/#once-you-have-completed-the-testing-go-pick-another-adventure-from-the-adventure-section","title":"Once you have completed the testing, go pick another adventure from the Adventure Section","text":""},{"location":"dupCheck/","title":"Title","text":""},{"location":"dupCheck/#story","title":"Story","text":"<p>Write a paragraph explaining what is going to happen and why you would want to do it.</p>"},{"location":"dupCheck/#high-level-explanation","title":"High Level Explanation","text":"<ol> <li>This section is optional but can explain the order of operations</li> <li></li> </ol>"},{"location":"dupCheck/#preconfigured-elements","title":"Preconfigured elements","text":"<ol> <li>If you are using a prebuilt subflow or function </li> <li>You should call attention to a shared configuration item which is important to the success of the flow, like a connector  </li> </ol>"},{"location":"dupCheck/#build","title":"Build","text":""},{"location":"dupCheck/#when-you-are-adding-something-to-the-canvas","title":"when you are adding something to the canvas","text":"<p>list the fields and values</p> <p>list instructions like node connections </p>"},{"location":"dupCheck/#when-you-are-adding-something-to-the-canvas_1","title":"when you are adding something to the canvas","text":"<p>list the fields and values</p> <p>list instructions like node connections </p>"},{"location":"dupCheck/#check-your-flow","title":"Check your flow","text":""},{"location":"dupCheck/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Live </p> <p>Click Publish Flow</p>"},{"location":"dupCheck/#map-your-flow-to-your-inbound-channel","title":"Map your flow to your inbound channel","text":"<p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): </p> <p>Select the Routing Flow: CL_LARwCSAT</p> <p>Select the Version Label: Live</p> <p>Click Save in the lower right corner of the screen</p>"},{"location":"dupCheck/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in using the Desktop option.</li> <li>list the streps<ol> <li>double indent sub steps or sections</li> </ol> </li> <li></li> </ol>"},{"location":"dupCheck/#once-you-have-completed-the-testing-go-pick-another-adventure-from-the-adventure-section","title":"Once you have completed the testing, go pick another adventure from the Adventure Section","text":""},{"location":"json/","title":"Understanding JSON","text":""},{"location":"json/#navigate-to-json-path-finder","title":"Navigate to JSON Path Finder","text":""},{"location":"json/#exercise-1","title":"Exercise 1","text":"<ol> <li>Copy this text into the left pane of the JSON PathFinder <p>{\"name\":\"John\", \"age\":30, \"car\":null} </p> </li> <li>Click Beautify</li> <li>Click age <p>What is the JSON path for age?  </p> </li> <li>Delete the contents of the left pane and copy this text into the left pane of the JSON PathFinder <p>{\"name\":\"John\",\"age\":30,\"cars\":[\"Ford\",\"BMW\",\"Fiat\"]}</p> </li> <li>Click Beautify <p>Click on cars and observe that there is an array.</p> <p>What is the JSON path for BMW?</p> </li> </ol>"},{"location":"json/#exercise-2","title":"Exercise 2","text":"<ol> <li> <p>Delete the contents of the left pane and copy this text into the left pane of the JSON PathFinder</p> <p>{\"name\":\"John Smith\",\"sku\":\"20223\",\"price\":23.95,\"shipTo\":{\"name\":\"Jane Smith\",\"address\":\"123 Maple Street\",\"city\":\"Pretendville\",\"state\":\"NY\",\"zip\":\"12345\"},\"billTo\":{\"name\":\"John Smith\",\"address\":\"123 Maple Street\",\"city\":\"Pretendville\",\"state\":\"NY\",\"zip\":\"12345\"}} </p> </li> <li> <p>Click Beautify</p> <p>Note</p> <p>\"shipTo\" and \"billTo\" have additional JSON objects in them.</p> <p>What is the JSON path for the ship to state? </p> </li> <li> <p>Delete the contents of the left pane and copy this text into the left pane of the JSON PathFinder</p> <p>[{\"name\":\"John Smith\",\"sku\":\"20223\",\"price\":23.95,\"shipTo\":{\"name\":\"Jane Smith\",\"address\":\"123 Maple Street\",\"city\":\"Pretendville\",\"state\":\"NY\",\"zip\":\"12345\"},\"billTo\":{\"name\":\"John Smith\",\"address\":\"123 Maple Street\",\"city\":\"Pretendville\",\"state\":\"NY\",\"zip\":\"12345\"}},{\"name\":\"Alice Brown\",\"sku\":\"54321\",\"price\":199.95,\"shipTo\":{\"name\":\"Bob Brown\",\"address\":\"456 Oak Lane\",\"city\":\"Pretendville\",\"state\":\"HI\",\"zip\":\"98999\"},\"billTo\":{\"name\":\"Alice Brown\",\"address\":\"456 Oak Lane\",\"city\":\"Pretendville\",\"state\":\"HI\",\"zip\":\"98999\"}}] </p> </li> <li> <p>Click Beautify</p> <p>Note</p> <p>We now have an array of objects (0 and 1)</p> <p>What is the JSON path for Alice Brown's ship to state?</p> </li> </ol>"},{"location":"json/#navigate-to-json-path","title":"Navigate to JSON Path","text":""},{"location":"json/#exercise-3","title":"Exercise 3","text":"<ol> <li>Copy the raw text from this Desktop Layout into the Document (left pane) of the JSON Path</li> <li>In the top bar, type $<ol> <li>What are the results?</li> </ol> </li> <li>In the top bar, type $.agent<ol> <li>What are the results?</li> <li>Toggle Output Paths to on.</li> <li>You should see another way to access the path.</li> <li>Toggle Output Paths to off.</li> </ol> </li> <li>In the top bar, type $[\"agent\"]<ol> <li>What is the difference?</li> </ol> </li> <li>In the top bar, type $.agent.area.advancedHeader<ol> <li>what if you wanted to return a list of the \"comp\" values?</li> </ol> </li> <li>In the top bar, type $.agent.area.advancedHeader..comp<ol> <li>This returns an array of anything that matches \"comp\" inside the $.agent.area.advancedHeader path</li> <li>In the top bar, type $.agent.area..comp<ol> <li>How many items are returned in the array?</li> </ol> </li> <li>Toggle Output Paths to on.<ol> <li>Note how \"greedy\" the query is.</li> </ol> </li> <li>When would you want to use a double dot in a JSON path?</li> <li>Why would you not want to use a double dot in a JSON path?</li> </ol> </li> </ol>"},{"location":"multiLOB/","title":"Multiple Lines of Business Using the Same Flow","text":""},{"location":"multiLOB/#story","title":"Story","text":"<p>You do not always need to create a new flow for each line of business in the contact center, instead you can often reuse your flow logic and account for the differences including different queues and wait treatments.  In this lab you will be adding a new line of business to the CL_core flow.</p>"},{"location":"multiLOB/#high-level-explanation","title":"High Level Explanation","text":"<ol> <li>This section is optional but can explain the order of operations</li> <li></li> </ol>"},{"location":"multiLOB/#preconfigured-elements","title":"Preconfigured elements","text":"<ol> <li>If you are using a prebuilt subflow or function </li> <li>You should call attention to a shared configuration item which is important to the success of the flow, like a connector  </li> </ol>"},{"location":"multiLOB/#build","title":"Build","text":""},{"location":"multiLOB/#open-flow-cl_core","title":"Open flow CL_core","text":"<p>Toggle the Edit switch on </p>"},{"location":"multiLOB/#replace-the-welcome-play-message-node-with-a-menu-node","title":"Replace the welcome Play Message node with a Menu node","text":"<p>Click on the welcome Play Message and delete it.</p> <p>Add a new Menu node</p> <p>Activity Label: welcomeMenu</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Thank you for calling Acme Corp. where we have been helping coyotes reach space since 1949.</p> <p>Click the Add Text-to-Speech Message button</p> <p>Text-to-Speech Message: For Sales, press 1.  For Service, press 2.</p> <p>Select Make Prompt Interruptible</p> <p>Digit Number: 1 Link Description: Sales</p> <p>Digit Number: 2 Link Description: Service</p> <p>Connect the No-Input Timeout node edge to the input node edge of this node</p> <p>Connect the Unmatched Entry node edge to the input node edge of this node</p> <p>Connect the Sales node edge to the Queue Contact node </p>"},{"location":"multiLOB/#move-the-lunchcheck-node-after-the-queue-contact-node","title":"Move the LunchCheck node after the Queue Contact node","text":"<p>Delete the connection between the Queue Contact node and the Play Music node</p> <p>Delete the connection between the LunchCheck False node edge and the Queue Contact node</p> <p>Connect the Queue Contact output node edge to the LunchCheck input node edge (you may want to move the nodes around to make things cleaner)</p> <p>Connect the LunchCheck False node edge to the Play Music node</p>"},{"location":"multiLOB/#add-a-queue-contact-node","title":"Add a Queue Contact node","text":"<p>Activity Label: serviceQueue</p> <p>Select Static Queue</p> <p>Queue: yourQueueID</p> <p>Connect the Service node edge from WelcomeMenu to the input node edge of this node</p> <p>Connect the output node edge of this node to the play music node</p> If you have already completed Offering a Callback option to calls actively waiting in the queue"},{"location":"multiLOB/#update-the-subflow-node-with-a-new-variable-mapping","title":"Update the Subflow Node with a new variable mapping","text":"<p>Open the Subflow node</p> <p>Scroll down to the Subflow Input Variables</p> <p>Click Add New</p> <p>Current Flow Variable: welcomeMenu.OptionEntered</p> <p>Subflow Input Variable: LOB </p>"},{"location":"multiLOB/#edit-the-first-case-in-the-cbchoice-node","title":"Edit the first case in the CBchoice node","text":"<p>Open the CBchoice node</p> <p>Change the text in the first Link Description from {{cbChoice == false and BusinessHours.WorkingHoursShift_Name == \"Lunch\"}} to {{cbChoice == false and BusinessHours.WorkingHoursShift_Name == \"Lunch\" and welcomeMenu.OptionEntered == \"1\"}}</p>"},{"location":"multiLOB/#check-your-flow","title":"Check your flow","text":""},{"location":"multiLOB/#create-a-json-flow-variable","title":"Create a JSON flow variable","text":"<p>Name: LOBmessages</p> <p>Type: JSON</p> <p>Default Value: {}</p>"},{"location":"multiLOB/#add-a-new-function-node","title":"Add a new Function node","text":"<p>Function Name: LOBwaitMessages</p> <p>Function Version Label: Live</p> <p>Function Input Variables:</p> <p>Current Flow Variable: welcomeMenu.OptionEntered  Function input Variable: LOB</p> <p>Output Settings:</p> <p>Output Variable: LOBmessages</p> <p>Path Expression: $.messageList</p> <p>Delete the connection between the serviceQueue node and the Play Music node</p> <p>Connect the serviceQueue node to this Function node</p> <p>Delete the connection between the False node edge of LunchCheck and the Play Music node</p> <p>Connect the False node edge of LunchCheck to this Function node</p> <p>Connect the output node edge of this Function node to the Play Music node </p> If you have already completed Offering a Callback option to calls actively waiting in the queue If you have NOT completed Offering a Callback option to calls actively waiting in the queue"},{"location":"multiLOB/#add-a-play-message-node","title":"Add a Play message node","text":"<p>Activity Label: LOBmessages1</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: {{LOBmessages[(counter % (LOBmessages| length))] }}</p> <p>Delete the connection between the Set Variable node for the counter and the Condition node</p> <p>Connect the output node edge of Set Variable node to this Play Message node</p> <p>Connect the output node edge of this Play Message node to the Condition node</p>"},{"location":"multiLOB/#delete-the-old-play-message-nodes","title":"Delete the old Play Message nodes","text":"<p>Delete both play message nodes which were previously used for the alternating messages</p> <p>Connect the True node edge of the Condition node to the Subflow node</p> <p>Connect the False node edge of the Condition node to the Play Music node</p>"},{"location":"multiLOB/#check-your-flow_1","title":"Check your flow","text":""},{"location":"multiLOB/#add-a-play-message-node_1","title":"Add a Play message node","text":"<p>Activity Label: LOBmessages1</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: {{LOBmessages[(counter % (LOBmessages| length))] }}</p> <p>Delete the Condition node</p> <p>Delete both play message nodes which were previously used for the alternating messages</p> <p>Connect the output node edge of Set Variable node to this Play Message node</p> <p>Connect the output node edge of this Play Message node to the Play Music node</p>"},{"location":"multiLOB/#check-your-flow_2","title":"Check your flow","text":""},{"location":"multiLOB/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Test </p> <p>Click Publish Flow</p>"},{"location":"multiLOB/#map-your-flow-to-your-inbound-channel","title":"Map your flow to your inbound channel","text":"<p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): </p> <p>Select the Routing Flow: CL_core</p> <p>Select the Version Label: Test</p> <p>Click Save in the lower right corner of the screen</p>"},{"location":"multiLOB/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in using the Desktop option.</li> <li>Using Webex, place a call to your Inbound Channel number </li> <li></li> </ol>"},{"location":"multiLOB/#once-you-have-completed-the-testing-go-pick-another-adventure-from-the-adventure-section","title":"Once you have completed the testing, go pick another adventure from the Adventure Section","text":""},{"location":"overview/","title":"Overview","text":""},{"location":"overview/#learning-objectives","title":"Learning Objectives","text":"<p>This lab is designed to empower you with the skills to craft exceptional customer journeys using the Webex Contact Center Flow Designer. Over the course of this lab, you\u2019ll work hands-on with features and integrations that bring intelligence and efficiency to every interaction.</p>"},{"location":"overview/#disclaimer","title":"Disclaimer","text":"<p>Although the lab design and configuration examples could be used as a reference, for design related questions please contact your representative at Cisco, or a Cisco partner.</p>"},{"location":"overview/#lab-access","title":"Lab Access","text":"<p>In this lab we will be using Webex for making calls into the Contact Center and for viewing demos which will be shared by the instructor.  We will be using the same account for Admin and Agent activities in the Contact Center.  Your guide will reflect your specific environment variables, including login information, Channels, Queues, Teams, and assigned numbers in the steps of the actual lab as you progress.</p> <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Webex Phone Number: Provided by proctor</p> <p>Assigned Inbound Channel Name: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name 1: Provided by proctor</p> <p>Assigned Queue Name 2: Provided by proctor</p> <p>Assigned Team name 1: Provided by proctor</p> <p>Assigned Team name 2: Provided by proctor</p>"},{"location":"overview/#getting-started","title":"Getting Started","text":"<p>Log into Webex on your PC:</p> <ul> <li>Username: Provided by proctor</li> <li>Password: Provided by proctor </li> </ul> <p>Log into Webex Control Hub in Chrome</p> <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p>"},{"location":"overview/#testing-your-lab-setup","title":"Testing your lab setup","text":"<ol> <li>Launch the Agent Desktop and log in selecting the Desktop option for your Voice connection.</li> <li>From the Webex App, dial Provided by proctor<ol> <li>You will hear a greeting message which will include the pod number which you have been assigned.</li> <li>The call will be place in your queue.</li> <li>You will hear the hold music until the call is answered</li> </ol> </li> <li>In the agent desktop, set your status to Available and answer the call.<ol> <li>Confirm that you can hear audio being passed in both directions.</li> <li>Disconnect the call</li> <li>Select a Wrap-up Code</li> <li>Set your status to Meeting</li> </ol> </li> </ol>"},{"location":"quicklinks/","title":"Admin Flow Experience","text":"Administrator Login wxcclabs+admin_IDYour_Attendee_ID@gmail.com Agent Login wxcclabs+agent_IDYour_Attendee_ID@gmail.com Supervisor Login wxcclabs+supvr_IDYour_Attendee_ID@gmail.com EntryPoint/Channel Name Your_Attendee_ID_Channel Team Your_Attendee_ID_Team Queue Your_Attendee_ID_Queue Bussiness Hours Your_Attendee_ID_Bussiness_Hours Control Hub https://admin.webex.com/ Agent Desktop https://desktop.wxcc-us1.cisco.com/"},{"location":"returningCaller/","title":"Routing Returning Callers","text":""},{"location":"returningCaller/#story","title":"Story","text":"<p>When a customer calls back into the contact center within ten minutes of their last call ending, we can assume there was a dropped call, missed callback, or they need additional assistance from their last interaction.  We are going to prioritize their call in the queue so that they can finish their business.</p>"},{"location":"returningCaller/#high-level-explanation","title":"High Level Explanation","text":"<ol> <li>New call comes into the flow</li> <li>Call the Search API to check if the ANI (caller's number) had a call which ended in the last 10 minutes</li> <li>If the caller had a connected call which ended within the last 10 minutes, we will play a message and will queue the call with a higher priority so they will get assigned to the next available agent.</li> <li>If the caller did not end a call with the contact center in the previous 10 minutes, we will queue the call normally</li> </ol>"},{"location":"returningCaller/#preconfigured-elements","title":"Preconfigured Elements","text":"<ol> <li>Wait treatment Subflow which will provide Music in Queue and Queue Messages. </li> <li>Connector for calling Webex Contact Center APIs</li> </ol>"},{"location":"returningCaller/#build","title":"Build","text":""},{"location":"returningCaller/#create-an-new-flow","title":"Create an new flow","text":"<p>Create a flow named CLyourLabID_ReturningCaller</p>"},{"location":"returningCaller/#create-this-flow-variable","title":"Create this flow variable","text":"<p>Name: previousID</p> <p>Type: String</p> <p>Default Value: empty</p>"},{"location":"returningCaller/#add-a-play-message-node-for-our-welcome-message","title":"Add a Play Message node for our welcome message","text":"<p>Connect the New Phone Contact output node edge to this Play Message node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Welcome to the routing returning callers lab. </p>"},{"location":"returningCaller/#add-an-http-request-node-for-our-query","title":"Add an HTTP Request node for our query","text":"<p>Connect the output node edge from the play message node to this node</p> <p>Select Use Authenticated Endpoint</p> <p>Connector: WxCC_API</p> <p>Path: /search</p> <p>Method: POST</p> <p>Content Type: GraphQL</p> <p>Copy this GraphQL query section:</p> <p><pre><code>query lastTen(\n  $from: Long!\n  $to: Long!\n  $timeComparator: QueryTimeType\n  $filter: TaskFilters\n) {\n  task(from: $from, to: $to, timeComparator: $timeComparator, filter: $filter) {\n    tasks {\n      id\n      status\n      channelType\n      createdTime\n      endedTime\n      origin\n      destination\n      direction\n      terminationType\n      isActive\n      isCallback\n      lastWrapupCodeName\n    }\n  }\n}\n</code></pre> Copy this into the Variables section: <pre><code>{\n  \"from\": \"{{now() | epoch(inMillis=true) - 600000}}\", # time now - 10 minutes represented in EPOCH time(ms)\n  \"to\": \"{{now() | epoch(inMillis=true)}}\", # time now represented in EPOCH time(ms)\n  \"timeComparator\": \"endedTime\",\n  \"filter\": {\n    \"and\": [\n      {\n        \"status\": {\n          \"equals\": \"ended\"\n        }\n      },\n      {\n        \"origin\": {\n          \"equals\": \"{{NewPhoneContact.ANI}}\" # ANI or caller phone number\n        }\n      },\n      {\n        \"connectedCount\": {\n          \"gte\": 1\n        }\n      }\n    ]\n  }\n}\n</code></pre></p> <p>Parse Settings:</p> <p>Content Type: JSON</p> <ul> <li>Output Variable: <code>previousID</code></li> <li>Path Expression: <code>$.data.task.tasks[0].id</code></li> </ul>"},{"location":"returningCaller/#add-a-condition-node","title":"Add a Condition node","text":"<p>Connect the output from the HTTP Request node to this node</p> <p>Expression: <code>{{previousID is empty}}</code></p> <p>We will connect the True node in a future step.</p> <p>Connect the False node edge to the Play Message node created in the next step. </p>"},{"location":"returningCaller/#add-a-play-message-node","title":"Add a Play Message node","text":"<p>Connect the False node edge from the previous step to this node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: It looks like you were just working with an agent and had to call back in.  We are prioritizing this call for the next available agent. </p>"},{"location":"returningCaller/#add-a-queue-contact-node","title":"Add a Queue Contact node","text":"<p>Connect the output node edge from the Play Message node added in the last step to this node</p> <p>Select Static Queue</p> <p>Queue: yourQueueID</p> <p>Select Static Priority</p> <p>Static Priority Value: P1 </p>"},{"location":"returningCaller/#add-a-subflow-node","title":"Add a Subflow node","text":"<p>In the Activity Library pane on the left side of the screen, click Subflows</p> <p>Find the Subflow names WaitTreatment and drag it onto the flow canvas like you would any other node.</p> <p>Connect the output node edge from the Queue Contact node added in the previous step to this node.</p> <p>Subflow Label: Latest</p> <p>Enable automatic updates: True</p> <p>Subflow Input Variables: None</p> <p>Subflow Output Variables: None</p> <p>Connect the output node edge from this node to the Disconnect Contact node added in the next step.</p>"},{"location":"returningCaller/#add-a-disconnect-contact-node","title":"Add a Disconnect Contact node","text":""},{"location":"returningCaller/#add-a-queue-contact-node_1","title":"Add a Queue Contact node","text":"<p>Connect the True node edge from the Condition node to this node</p> <p>Select Static Queue</p> <p>Queue: yourQueueID</p> <p>Connect the Output node edge from this node to the Subflow node</p>"},{"location":"returningCaller/#check-your-flow","title":"Check your flow","text":""},{"location":"returningCaller/#publish-your-flow","title":"Publish your flow","text":"<p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Live </p> <p>Click Publish Flow</p>"},{"location":"returningCaller/#map-your-flow-to-your-inbound-channel","title":"Map your flow to your inbound channel","text":"<p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): </p> <p>Select the Routing Flow: CL_ReturningCaller</p> <p>Select the Version Label: Live</p> <p>Click Save in the lower right corner of the screen</p>"},{"location":"returningCaller/#testing","title":"Testing","text":"<ol> <li>Launch the Agent Desktop and log in selecting the Desktop option for your Voice connection.</li> <li>On your Agent Desktop, make sure your status is not set to available<ol> <li>Using Webex, place a call to your Inbound Channel number </li> <li>After you hear the queue treatment start, you can abandon the call </li> </ol> </li> <li>Using Webex, place another call to your Inbound Channel number </li> <li>On your Agent Desktop, set your status to available<ol> <li>You should be offered a call, click on the accept button. (You may want to mute the mic on both Webex and the Agent Desktop)</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>In your Flow:<ol> <li>Open the Debugger</li> <li>Select the last interaction (at the top of the list)</li> <li>Trace the steps taken in the flow</li> </ol> </li> <li>Answer these questions:<ol> <li>Was the call queued with priority?<ol> <li>Why or why not?</li> </ol> </li> </ol> </li> <li>Close the Debugger</li> <li>Using Webex, place another call to your Inbound Channel number </li> <li>On your Agent Desktop, set your status to available<ol> <li>You should be offered a call, click on the accept button. (You may want to mute the mic on both Webex and the Agent Desktop)</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>In your Flow:<ol> <li>Open the debugger</li> <li>Select the last interaction (at the top of the list)</li> <li>Trace the steps taken in the flow</li> </ol> </li> <li>Answer these questions:<ol> <li>Was the call queued with priority?<ol> <li>Why or why not?</li> </ol> </li> <li>If you called another Inbound Channel number with the same flow logic, would your call be prioritized?<ol> <li>How could you change this behavior? </li> </ol> </li> </ol> </li> </ol>"},{"location":"returningCaller/#once-you-have-completed-the-testing-go-pick-another-adventure-from-the-adventure-section","title":"Once you have completed the testing, go pick another adventure from the Adventure Section","text":""},{"location":"slido-QA-iFrame/","title":"Ask a Question<i class=\"fa-solid fa-hand\" style=\"color:#63E6BE;\"></i>","text":"Question Best Practices <p>Please provide either your Name or Pod Number</p> <p>This helps the proctors determine if they should engage you directly based on your question</p> <p></p>"},{"location":"test1234/","title":"Test1234","text":""},{"location":"test1234/#lab-access","title":"Lab Access","text":"<p>In this lab we will be using Webex for making calls into the Contact Center and for viewing demos which will be shared by the instructor.  We will be using the same account for Admin and Agent activities in the Contact Center.  Your guide will reflect your specific environment variables, including login information, Channels, Queues, Teams, and assigned numbers in the steps of the actual lab as you progress.</p> <p>Login: Provided by proctor</p> <p>Password: Provided by proctor</p> <p>Webex Phone Number: Provided by proctor</p> <p>Assigned Inbound Channel Name: Provided by proctor</p> <p>Assigned Inbound Channel Number: Provided by proctor</p> <p>Assigned Queue Name 1: Provided by proctor</p> <p>Assigned Queue Name 2: Provided by proctor</p> <p>Assigned Team Name 1: Provided by proctor</p> <p>Assigned Team Name 2: Provided by proctor</p>"},{"location":"welcome/","title":"Welcome","text":""},{"location":"welcome/#welcome","title":"Welcome !","text":""},{"location":"advanced/Lab1/","title":"Overview","text":""},{"location":"advanced/Lab1/#learning-objectives","title":"Learning Objectives","text":"<p>Welcome to the AI-powered Customer &amp; Agent Experiences lab. This lab is considered an advanced lab. Take your time completing each of the steps. You have 24 hours to complete the lab with your pod user. The lab content will be available to you even after your pod is no longer available. </p> <p>In this lab, you will gain hands-on experience with Webex Contact Center's advanced AI solutions. This lab is designed to help you understand the Cisco Text-to-Speech engine and explore the capabilities of the Webex AI Agent, which utilizes built-in and proprietary models as well as natural language processing (NLP). You'll learn how to seamlessly escalate conversations from an AI agent to a human agent, ensuring efficient and intelligent customer interactions. </p> <p>In addition, we will cover several exciting AI-driven features such as Agent Wellness, which supports the well-being of agents during interactions, and Call Drop Summary, a feature that captures and summarizes previous dropped calls. These innovations demonstrate the power of AI in enhancing both customer and agent experiences. </p> <p>To further enhance your learning, we have included bonus lab content. This will allow you to familiarize yourself with our Supervisor Desktop, future enhancements to streamline Agent and Supervisor sign-in, and future AI Agent capabilities. </p> <p>Let\u2019s dive in and explore how Webex AI is shaping the future of customer service and agent support. </p>"},{"location":"advanced/Lab1/#disclaimer","title":"Disclaimer","text":"<p>Although the lab design and configuration examples could be used as a reference, for design related questions please contact your representative at Cisco, or a Cisco partner.</p>"},{"location":"main/AIAgentTrack_Mission1/","title":"Mission 7: AI Autonomous Agent in Action (BONUS)","text":""},{"location":"main/AIAgentTrack_Mission1/#disclaimer","title":"Disclaimer","text":"<p>Please note that the AI Agent is scheduled for General Availability (GA) in Q1 of the 2025 calendar year (CY25). This exercise is designed to provide you with an early glimpse and understanding of the feature's capabilities. We appreciate your participation and value your feedback as we refine this offering ahead of its official release.</p> <p>Good to Know [Optional]"},{"location":"main/AIAgentTrack_Mission1/#ai-autonomous-agent-overview","title":"AI Autonomous Agent Overview","text":"<p>The Autonomous AI Agent for performing actions can handle various tasks, including:</p> <ul> <li>Natural Language Processing (NLP)\u2014Understand and respond to human language in a natural and conversational manner.</li> <li>Decision making\u2014Make informed choices based on available information and predefined rules.</li> <li>Automation\u2014Automate repetitive or time-consuming tasks. </li> </ul>"},{"location":"main/AIAgentTrack_Mission1/#story","title":"Story","text":"<p>As a visitor to Amsterdam, you want to quickly find restaurants offering various international cuisines in the city and easily figure out how to get to them from your current location at the RAI.</p>"},{"location":"main/AIAgentTrack_Mission1/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow. </li> <li>The caller asks about restaurants in Amsterdam.</li> <li>The AI agent responds with information generated from the knowledge base configuration.</li> </ol>"},{"location":"main/AIAgentTrack_Mission1/#mission-overview","title":"Mission overview","text":"<p>Your mission is to:</p> <ol> <li>Create a knowledge base (KB) and AI agent to provide answers about Amsterdam, including places to visit, restaurants, nightclubs, and directions from the current RAI Amsterdam Convention Center.</li> <li>Configure the AI agent with handoff functionality to transfer the conversation to a live agent when necessary.</li> </ol>"},{"location":"main/AIAgentTrack_Mission1/#build","title":"Build","text":""},{"location":"main/AIAgentTrack_Mission1/#creating-a-knowldge-base","title":"Creating a Knowldge Base","text":"<ol> <li> <p>[IMPORTANT] Download source file from shared folder.</p> <p>Amsterdam_Tourist_Guide.txt - file contains information for tourists like places to visit, restaurants, pubs etc. and how to reach those places from RAI Amsterdam Convention Center </p> </li> <li> <p>Login into Webex Control Hub by using your Admin profile wxcclabs+admin_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you.</p> </li> <li> <p>Go to Contact Center from the left side navigation panel, and under Quick Links, click on Webex AI Agent</p> <p> </p> </li> <li> <p>In AI Agent Builder navigate to Knowledge from left hand side menu panel. </p> </li> <li> <p>Click Create Knowledge Base, provide Knowledge base name as Your_Attendee_ID_AI_KB, then click Create.</p> <p></p> </li> <li> <p>Click Add File or drag and drop file Amsterdam_Tourist_Guide.txt you downloaded from external drive on Step 1. Then click Process Files.</p> <p></p> </li> <li> <p>Navigate to Dashboard from the right-hand side menu panel and click Create Agent</p> </li> <li>Select Start from Scratch and click Next</li> <li> <p>On Create an AI agent page select the following select the type of agent: Autonomous</p> </li> <li> <p>New section Add the essential details will appear. Provide the following information, then click Create:</p> <p>Agent Name: Your_Attendee_ID_AutoAI_Lab</p> <p>System ID is created automatically</p> <p>AI engine: Nova</p> <p>Knowledge base: Your_Attendee_ID_AI_KB <p>Agent's goal: You are a helpful, polite agent who will help the user with their Amsterdam related queries such as restaurant, pubs, places to visit and what transport can be used to get there.</p> <p></p> <li> <p>Switch to Actions tab ans make sure Agent handover togle is turned on. This will allow you to handoff calls to human agent on request while talking to your Virtual Agent.</p> </li> <li> <p>Switch to Knowledge tab and from Knowledge base drop-down list select Your_Attendee_ID_AI_KB</p> </li> <li> <p>Click Save Changes, then click Publish. Provide any version name in popped up window (ex. \"1.0\").</p> <p></p> </li> <li> <p>Click on Preview to test your AI Agent and ask the following: \"I'm looking for an Italian restaurant close to RAI.\"</p> </li> <p></p>"},{"location":"main/AIAgentTrack_Mission1/#integrating-the-bot-with-flow-for-voice-calls","title":"Integrating the Bot with Flow for Voice Calls","text":"<ol> <li> <p>In Control Hub navigate to Flows, click on Manage Flows dropdown list and select Create Flows</p> </li> <li> <p>Select Start Fresh and name the new flow AutonomousAI_Flow_Your_Attendee_ID</p> <p> </p> </li> <li> <p>Make sure the Edit mode at the top is set to ON. Then, drag and drop the Virtual Agent V2 and DisconnectContact activities from the left panel onto the canvas.</p> <p>Note</p> <p>Please make sure to use VirtualAgentV2 activity and NOT VirtualAgent also present on the Activity Library for Backward Compatability.</p> <p>Connect the New Phone Contact output node edge to this VirtualAgentV2 node</p> <p>Connect the Handled outputs to DisconnectContact </p> <p>Connect the Errored outputs to DisconnectContact </p> <p>Set Static Contact Center AI Config</p> <p>Contact Center AI Config: Webex AI Agent (Autonomous)</p> <p>Virtual Agent: Your_Attendee_ID_AutoAI_Lab</p> <p> </p> </li> <li> <p>Drag and drop following nodes:</p> <ul> <li>Queue Contact activity onto the Flow from the left side panel</li> </ul> <p>Connect the Escalated path from the Virtual Agent V2 activity to the Queue Contact activity.</p> <p>Connect the Queue Contact activity to the Play Music activity</p> <p>Connect the Failure path from the Queue Contact activity to the Disconnect Contact activity.</p> <p>Select Static Queue</p> <p>Queue name: Your_Attendee_ID_Queue </p> <ul> <li>Play Music</li> </ul> <p>Create a loop by connecting the Play Music activity back to itself - to create a music loop, following the diagram provided.</p> <p>Connect the Failure path from the Play Music activity to the Disconnect Contact activity.</p> <p>Music File: defaultmusic_on_hold.wav </p> </li> <li> <p>Validate and Publish Flow. In popped up window click on dropdown menu to select Latest label, then click Publish </p> <p> </p> </li> <li> <p>Assign the Flow to your Channel (Entry Point) - Do this by first going to Channel &gt; Search for your channel Your_Attendee_ID_Channel.</p> </li> <li>Click on Your_Attendee_ID_Channel</li> <li> <p>In Entry Point Settings section change the following:</p> <p>Routing Flow: AutonomousAI_Flow_Your_Attendee_ID</p> <p>Version Label: Latest</p> <p> </p> </li> <li> <p>Dial Support Number assigned to your Your_Attendee_ID_Channel to test the Autonomous Virtual Agent over a voice call.</p> </li> </ol>"},{"location":"main/AIAgentTrack_Mission1/#testing","title":"Testing","text":"<ol> <li>Your Agent desktop session should be still active but if not, use Webex CC Desktop application   and login with agent credentials you have been provided wxcclabs+agent_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you. </li> <li>Select Team Your_Attendee_ID_Team. Click Submit. Allow browser to access Microphone by clicking Allow on every visit.</li> <li> <p>Make your agent Available and you're ready to make a call.</p> <p></p> </li> <li> <p>Dial the support number assigned to your Your_Attendee_ID_Channel channel, and during the conversation with the virtual agent, ask about restaurants in Amsterdam or places to visit to explore historical sites.</p> </li> <li> <p>Any time during conversation request to connect you with a live agent. The call will be transferred to your agent.</p> </li> </ol> <p>Congratulations, you have officially completed the Autonomous Virtual Agent mission! \ud83c\udf89\ud83c\udf89 </p>"},{"location":"main/AIAgentTrack_Mission2/","title":"AIAgentTrack Mission2","text":""},{"location":"main/AIAgentTrack_Mission2/#story","title":"Story","text":"<p>The mission is designed to provide a hands-on understanding of creating Cisco Virtual Agents, covering key tasks such as creating a virtual agent using a template, integrating the bot with flow for voice calls, updating bot responses, adding new intents and entities, enhancing training data using generative AI, and leveraging bot transcripts and analytics for insights.</p>"},{"location":"main/AIAgentTrack_Mission2/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow. </li> <li>The AI Agent interacts with the caller by asking configured questions. </li> <li>The AI Agent ends the conversation after collecting all the necessary details. </li> </ol>"},{"location":"main/AIAgentTrack_Mission2/#mission-details","title":"Mission Details","text":"<p>This mission is designed to provide an in-depth understanding of the Webex AI Agents available in Webex Contact Center. By completing this section of the lab, you will:</p> <ul> <li>Gain practical skills and knowledge on how to effectively utilize Webex Contact Center's AI capabilities to create self-service automation.v</li> <li>Improve the containment rate of your contact center, increasing efficiency and reducing costs.</li> <li>Learn how to create an effective AI Voice solution using Cisco's Webex Connect Bot builder platform and Webex Contact Center Flow Designer.</li> <li>Understand the use of Generative AI to fast-track bot development and save time.</li> <li>Troubleshoot AI Agent functionality to enhance performance.</li> </ul>"},{"location":"main/AIAgentTrack_Mission2/#build","title":"Build","text":""},{"location":"main/AIAgentTrack_Mission2/#creating-a-ai-agent-using-a-template","title":"Creating a AI Agent using a Template","text":"<ol> <li> <p>Login into Webex Control Hub by using your Admin profile wxcclabs+admin_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you.</p> </li> <li> <p>Go to Contact Center from the left side navigation panel, and under Quick Links, click on Webex AI Agent</p> <p> </p> </li> <li> <p>Click on Create agent to create a new bot. Select the Appointment Booking Template and click on Next button.</p> </li> <li>Agent Name Your_Attendee_ID_TaskBot_CL2025 and click Create</li> <li>Make the bot live by clicking on the Make Live button on the top right.</li> <li> <p>Enter v1 in the popup modal which appears after clicking on Make Live.</p> <p> </p> </li> <li> <p>Click on the Preview button on the top right side to test the bot. Try the bot flow by typing \"I would like to cancel an appointment\"</p> <p>Sample Conversation</p> <p>AI Agent: Welcome to Cumulus Healthcare. How may I assist you today? You: \"I would like to cancel an appointment\" AI Agent: Please provide the patient's 6-digit insurance number. You:\"123456\" AI Agent: Please provide your 10-digit phone number. You:\"0123456789\" AI Agent: You have an appointment on 20/01/2025 at 15:00. Would you like to cancel it? You:\"yes\" AI Agent: Your appointment for 20/01/2025 at 15:00 is cancelled.</p> <p> </p> </li> </ol>"},{"location":"main/AIAgentTrack_Mission2/#integrating-the-bot-with-flow-for-voice-calls","title":"Integrating the Bot with Flow for Voice Calls","text":"<ol> <li> <p>In Control Hub navigate to Flows, click on Manage Flows dropdown list and select Create Flows</p> </li> <li> <p>Select Start Fresh and name the new flow TaskBot_Flow_Your_Attendee_ID.</p> <p> </p> </li> <li> <p>Make sure the Edit mode at the top is set to ON. Then, drag and drop the Virtual Agent V2 and DisconnectContact activity from the left panel onto the canvas.</p> <p>Note</p> <p>Please make sure to use VirtualAgentV2 activity and NOT VirtualAgent also present on the Activity Library for Backward Compatability.</p> <p>Connect the New Phone Contact output node edge to this VirtualAgentV2 node</p> <p>Connect the Handled outputs to DisconnectContact </p> <p>Connect the Escalated outputs to DisconnectContact </p> <p>Connect the Errored outputs to DisconnectContact </p> <p>Select Static Contact Center AI Config</p> <p>Contact Center AI Config: Webex AI Agent (Scripted)</p> <p>Virtual Agent: Your_Attendee_ID_TaskBot_CL2025</p> </li> <li> <p>On bottom right corner toggle Validation from Off to On</p> </li> <li> <p>Click Publish Flow. In Popped up window click on dropdown menu to select Latest label, then click Publish</p> <p> </p> </li> <li> <p>Assign the Flow to your Channel (Entry Point) - Do this by first going to Channel, search for your channel Your_Attendee_ID_Channel.</p> </li> <li>Click on Your_Attendee_ID_Channel</li> <li> <p>In Entry Point Settings section change the following:</p> <p>Routing Flow: TaskBot_Flow_Your_Attendee_ID</p> <p>Version Label: Latest</p> <p> </p> </li> <li> <p>Dial Support Number assigned to your Your_Attendee_ID_Channel to test the Virtual Agent over a voice call.</p> </li> </ol>"},{"location":"main/AIAgentTrack_Mission2/#updating-bot-responses","title":"Updating Bot Responses","text":"<p>In this step, we will learn how to update bot responses and test these changes, both in preview mode and by making a live call. Testing in preview mode allows you to ensure the changes worked as expected, while making a live call confirms the bot's performance in a real-world scenario.</p> <ol> <li> <p>Login into Webex Control Hub by using your Admin profile wxcclabs+admin_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you.</p> </li> <li> <p>Go to Contact Center from the left side navigation panel, and under Quick Links, click on Webex AI Agent</p> <p> </p> </li> <li> <p>Search and open your bot Your_Attendee_ID_TaskBot_CL2025 that you created earlier. Then go to the Responses tab on the left-hand panel.</p> <p>Select the Welcome message in Default message</p> <p>Update the text to \"Welcome to Cumulus Healthcare. How may I assist you today?\" for the Default (web) channel.</p> <p>Navigate to the Voice Channel and update the text to \"Welcome to Cumulus Healthcare. How may I assist you today?\"</p> <p>Click on the update button to confirm the changes. Make the bot live by clicking on the Make Live button</p> <p> </p> </li> <li> <p>Click on Preview to test if the Greeting has been successfully updated.</p> <p></p> </li> </ol>"},{"location":"main/AIAgentTrack_Mission2/#adding-new-intents-entities","title":"Adding New Intents &amp; Entities","text":"<p>In this step, we will learn how to add new intents and entities to enhance the bot's ability to understand and respond to a broader range of user inputs. These updates will be tested in both preview mode and during a live call to confirm that the bot correctly identifies the new intents and entities and provides appropriate responses.</p> <ol> <li> <p>To expedite the completion of this lab, it is recommended to remove all languages except the default language(English), and proceed with the lab. After disabling all the languages please make sure to hit on Save changes and you should see a green Agent updated message that confirms the action. </p> <p></p> </li> <li> <p>Navigate to the Training Tab from the left-hand panel and click on the Create Intent button located in the top right corner.</p> </li> <li> <p>Add a new intent by providing the intent name as ReferralRequest and include the following two utterances:</p> <ul> <li>I would like a referral for a cardiologist.</li> <li>I need a referral to visit a neurologist.</li> </ul> <p> </p> </li> <li> <p>Click on Link entity and add patient phone number as an entity.</p> <p>Check the Required checkbox </p> <p>Select the template key as askPhoneNumber, which will be used to prompt the patient for their phone number.</p> </li> <li> <p>Again, click on Link Entity and add patient dob (date of birth) </p> <p>Check Required checkbox</p> <p>Select the template key as askPatientDob. When this intent is matched, it will trigger the Virtual Agent to ask the user to provide their phone number and date of birth for verification purposes.</p> <p> </p> </li> <li> <p>On the same page at the bottom, click on Response drop-down list with Final Template Key and scroll down to Create new.</p> <p>Template key: ReferralResp</p> <p>Text Response (Optional): Your request has been logged and will be reviewed by our team. You will receive a callback once it's approved. Is there anything else I can assist you with?</p> <p>Click Create</p> </li> <li> <p>Click on Save.</p> <p> </p> </li> <li> <p>Return to the Training tab and click on the Train button to update the bot's understanding with the new intent and entities.</p> </li> <li>Add a comment such as Added referral request intent to track the changes.</li> <li>Click on Make Live to update the live version of the bot with these changes.</li> <li> <p>Provide a description for the update and choose Make Live or Make Live both if there are other unsaved changes pending.</p> <p> </p> </li> <li> <p>Use the Preview feature to test the bot flow with the input query: I need a referral for a cardiologist.</p> </li> <li> <p>You can also test this interaction in voice mode by dialing the Supported Number assigned to your pod.</p> <p> </p> </li> </ol>"},{"location":"main/AIAgentTrack_Mission2/#adding-training-data-using-generative-ai","title":"Adding Training Data using Generative AI","text":"<p>In this step, we will learn how to enhance the bot's capabilities by adding training data using generative AI and validate the changes by making a call.</p> <ol> <li> <p>Return to the Referral Request intent that you created in the previous exercise.</p> </li> <li> <p>Click on the \"Generate\" button to utilize Generative AI for creating additional training phrases.</p> </li> <li> <p>Enter a description such as \"generate intents for requesting a referral to different doctor specialties from primary care.\" Set the Number of Variants to 10, which will determine the number of new phrases to be generated.</p> <p> </p> </li> <li> <p>Once the new phrases are generated, click on the Save button located in the top right corner to add them to your intent.</p> </li> <li>Navigate back to the Training tab and click on the Train button to incorporate the new generative data into the bot's model.</li> <li>Add a comment such as \"added generative training data\" to keep track of this specific update.</li> <li>Click on the Make Live button situated in the top right corner to apply the changes to the live version of your bot.</li> <li> <p>Confirm the update by clicking on Make Live or Make Live both if there are other unsaved changes pending.</p> <p> </p> </li> <li> <p>Test the updated bot flow by using the Preview button and inputting queries related to the new training data.</p> <p></p> </li> </ol>"},{"location":"main/AIAgentTrack_Mission2/#bot-transcripts-analytics","title":"Bot Transcripts &amp; Analytics","text":"<p>In this step, we will explore how to access and analyze bot transcripts and analytics to gain insights into user interactions.</p> <ol> <li> <p>Click on Sessions in the left-hand panel of your bot builder interface to view all the call history. Click on any Session ID to delve into a more detailed analysis of that particular interaction.</p> </li> <li> <p>If you encounter encrypted content, click on Decrypt Content to proceed with the review.</p> </li> <li> <p>Review the transcript for the selected interaction to gain insights into how the conversation unfolded.</p> <p></p> </li> <li> <p>Click on individual messages from the user to examine the intents and entities identified by the Virtual Agent during the conversation.</p> </li> <li> <p>By carefully analyzing these transcripts and analytics, you can identify areas for improvement, understand user behavior, and refine the Virtual Agent's performance accordingly. </p> <p></p> </li> </ol> <p>Congratulations, you have officially completed the Cisco Virtual Assistant mission! \ud83c\udf89\ud83c\udf89 </p>"},{"location":"main/AIAgentTrack_Mission3/","title":"Mission 7: Seamless AI to Human Agent Handoffs","text":"<p>Note</p> <p>This task relies on completing Mission 7 of the Fundamental Labs. Ensure that mission is completed to have a fully functional AI Scripted Agent feature in the Contact Center.</p>"},{"location":"main/AIAgentTrack_Mission3/#story","title":"Story","text":"<p>This lab is designed to explore how to pass contextual intelligence from AI Agents to Webex Contact Center agents. It involves leveraging AI Summaries for Webex AI  agent conversational transcripts . By completing this lab, you will gain practical skills and knowledge on how to provide the right context to agents to better handle customer queries.</p>"},{"location":"main/AIAgentTrack_Mission3/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow.</li> <li>The AI Agent engages with the caller by asking pre-configured questions.</li> <li>The AI Agent gathers all necessary details and hands the call back to the flow.</li> <li>The flow utilizes the last identified intent to route the call appropriately.</li> </ol>"},{"location":"main/AIAgentTrack_Mission3/#mission-details","title":"Mission Details","text":"<p>Your mission is to:</p> <ol> <li>Configure a smoth handoff to live human agent from AI Agent.</li> <li>Modify Virtual Agent transcript</li> <li>Configure routing based on last used intent</li> <li>Use AI Assistant</li> </ol>"},{"location":"main/AIAgentTrack_Mission3/#build","title":"Build","text":""},{"location":"main/AIAgentTrack_Mission3/#transfer-to-human-agent","title":"Transfer to Human Agent","text":"<ol> <li> <p>Before you start this lab, please make sure the webex contact center Your_Attendee_ID_Channel is set your TaskBot_Flow_Your_Attendee_ID.</p> <p> </p> </li> <li> <p>In Control Hub select Contact Center from the left panel and then navigate to Flows from the left panel. Search and open your flow TaskBot_Flow_Your_Attendee_ID. </p> </li> <li> <p>Switch the Edit button to On to enable Edit mode in the flow builder then drag and drop following nodes:</p> <ul> <li>Queue Contact activity onto the Flow from the left side panel</li> </ul> <p>Connect the Escalated path from the Virtual Agent V2 activity to the Queue Contact activity.</p> <p>Connect the Queue Contact activity to the Play Music activity</p> <p>Connect the Failure path from the Queue Contact activity to the Disconnect Contact activity.</p> <p>Queue name: Your_Attendee_ID_Queue </p> <ul> <li>Play Music</li> </ul> <p>Create a loop by connecting the Play Music activity back to itself - to create a music loop, following the diagram provided.</p> <p>Connect the Failure path from the Play Music activity to the Disconnect Contact activity.</p> <p>Music File: defaultmusic_on_hold.wav </p> </li> <li> <p>Validate and Publish Flow. In popped up window click on dropdown menu to select Latest label, then click Publish </p> <p></p> </li> </ol>"},{"location":"main/AIAgentTrack_Mission3/#checkpoint-transfer-to-human-agent","title":"Checkpoint: Transfer to Human Agent","text":"<ol> <li>Your Agent desktop session should be still active but if not, use Webex CC Desktop application  and login with agent credentials you have been provided wxcclabs+agent_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you. </li> <li>Select Team Your_Attendee_ID_Team. Click Submit. Allow browser to access Microphone by clicking Allow on ever visit.</li> <li> <p>Make your agent Available and you're ready to make a call.</p> <p></p> </li> <li> <p>Dial the support number assigned to your Your_Attendee_ID_Channel channel and during the conversation with the virtual Agent, say, \"Please transfer me to an Agent.\" Answer the call on the agent desktop when you receive a ring notification and verify the trasciption is passed to Agent Desktop.</p> </li> <li> <p>Once the call is answered, disconnect the call by clicking on the End button.</p> <p></p> </li> </ol>"},{"location":"main/AIAgentTrack_Mission3/#disable-virtual-agent-transcript","title":"Disable Virtual Agent Transcript","text":"<ol> <li>Open your flow TaskBot_Flow_Your_Attendee_ID and switch Edit: Off mode to Edit: On if it's not.</li> <li>Select the Virtual Agent v2 activity and, in the right side panel, scroll down and notice the option for Enable Conversation Transcript.</li> <li>Disable the Virtual Agent v2 transcript by unchecking Enable Conversation Transcript option.</li> <li> <p>Validate and Publish Flow. In popped up window click on dropdown menu to select Latest label, then click Publish .</p> <p></p> </li> </ol>"},{"location":"main/AIAgentTrack_Mission3/#checkpoint-disable-virtual-agent-transcript","title":"Checkpoint: Disable Virtual Agent Transcript","text":"<ol> <li>Make sure your agent is Available and if not, login to you Desktop as explained in previous Quick Test (see above)</li> <li> <p>Dial into the same support and observe that the conversation transcript is Not available on the Agent Desktop when Enable Conversation Transcript is unchecked.</p> <p></p> </li> </ol>"},{"location":"main/AIAgentTrack_Mission3/#routing-based-on-last-intent","title":"Routing Based on Last Intent","text":"<ol> <li> <p>[IMPORTANT] Please make sure to Enable the Virtual Agent transcript by checking Enable Conversation Transcript option for the Virtual Agent V2 activity. Select the Virtual Agent V2 activity and, in the right side panel, scroll down and notice the option for Enable Conversation Transcript. </p> </li> <li> <p>Enable the Virtual Agent v2 transcript by checking Enable Conversation Transcript option.</p> <p></p> </li> <li> <p>Add 2 new flow variables: </p> <p>Name: <code>last_intent</code></p> <p>Type: <code>String</code></p> <p>Default Value: <code>empty</code></p> <p>Name: <code>vameta</code></p> <p>Type: <code>JSON</code></p> <p>Default Value: <code>{}</code> </p> <p></p> </li> <li> <p>Drag Set Variable node to canvas:</p> <p>Activity Name: <code>VA_Metadata</code></p> <p>Variable: <code>vameta</code></p> <p>Set To Variable: <code>VirtualAgentV2_</code>&lt;&gt;<code>.MetaData</code> <p>Connect <code>Escalated</code> edge of VirtualAgent to the VA_Metadata node </p> <p>Note</p> <p>&lt;*&gt; in VirtualAgentV2 name is autogenerated and is different in all cases. You shouldn't be confused as you have only one VirtualAgentV2 node in the current flow</p> <p></p> <li> <p>Drag and drop the Parse activity to the flow</p> <p>Connect the VA_Metadata activity to the Parse activity.</p> <p>Input variable: <code>VirtualAgentV2_</code>&lt;&gt;<code>.MetaData</code> <p>Content Type: <code>JSON</code></p> <p>Output Variable: <code>last_intent</code></p> <p>Path Expression: <code>$.previous-intent.name</code></p> <p></p> <li> <p>Drag and drop the Condition activity to the flow</p> <p>Connect the Parse activity to the Condition activity.</p> <p>Connect the False output from the Condition activity to the Queue Contact activity</p> <p>Condition : {{ last_intent == \"Book appointment\" }}</p> </li> <li> <p>Add Play Message: </p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: Routing to an agent skilled at booking an appointment.</p> <p>Delete the Selection for Audio File</p> <p>Connect True exit path of Condition node created in Step 5 to this Play Message node</p> <p>Connect Play Message node to Queue Contact </p> </li> <li> <p>Validate and Publish Flow. In popped up window click on dropdown menu to select Latest label, then click Publish </p> <p></p> </li>"},{"location":"main/AIAgentTrack_Mission3/#checkpoint-last-intent-based-routing","title":"Checkpoint: Last Intent Based Routing","text":"<ol> <li>Make sure your agent is Available and if not, login to you Desktop as explained in previous Quick Test (see above)</li> <li> <p>Make a call to your test number. During your interaction with the Virtual Agent start requesting for an appointement and then request a transfer to a live agent by saying, \"Please transfer me to an Agent.\" If the last intent was \"Book appointment\", you will hear the Text-to-Speech message: \"Routing to an agent skilled at booking an appointment.\". </p> <p>Sample Conversation</p> <p>\"I would like to Book  an appointment\"</p> <p>What date are you considering for your visit </p> <p>\"Feb 20th\"</p> <p>Could tell us preferred time for your visit </p> <p>\"3PM\"</p> <p>Which doctor you want appointment with</p> <p>\"Dr John\"</p> <p>What is name of the  patience </p> <p>\"Peter\" <p>Could you tell us patience Date of Birth</p> <p>\"Please transfer me to an agent \"</p> <li> <p>Answer the call on the agent desktop when it rings.</p> </li> <li>Go back to your flow and click on Analyze tab at the bottom of the canvas. Observe the last call behavior.</li> <li> <p>Open Debug tool and open your last call. Click on VA_Metadata which is our renames Set Variable. See that metadata from VirtualAgentV2_&lt;*&gt;.MetaData was written into vameta flow variable we created on Step 3.   </p> </li> <li> <p>Copy JSON from debuger and paste it into https://jsonpath.com/ Inputs.</p> </li> <li>Change Debug mode to Design in Flow Designer and copy the path from Parse node into JSONPath of the https://jsonpath.com/. You should get last intent name as \"Book Apppointement\"</li> <p></p>"},{"location":"main/AIAgentTrack_Mission3/#checkpoint-ai-assistant","title":"Checkpoint: AI assistant","text":"<ol> <li> <p>Click on the AI assistant icon located on the top left navigation panel.</p> <p></p> </li> <li> <p>Dial the support number assigned to your Your_Attendee_ID_Channel and initiate a conversation with below</p> </li> <li> <p>During the interaction with the virtual Agent, request a transfer by saying, \"Please transfer me to an Agent.\" Answer the call on the agent desktop upon receiving the ring notification.</p> </li> <li> <p>Observe that, after answering the call, a summary of the Virtual Agent interaction is now displayed on the agent desktop</p> </li> </ol> <p></p> <p>Congratulations, you have officially completed the Intelligent Virtual Agent Handoffs mission! \ud83c\udf89\ud83c\udf89 </p>"},{"location":"main/APITrack_Conclusion/","title":"Conclusion","text":"<p>We hope you found the API Track both insightful and rewarding as you expanded your expertise in leveraging APIs for dynamic and intelligent call routing in Webex Contact Center. This session provided hands-on experience with key techniques to enhance flexibility, efficiency, and personalization in customer interactions.</p> <p>Key missions included:</p> <ul> <li>Emergency Configuration Change \u2013 Using API requests to instantly modify system settings for real-time adaptability.</li> <li>Routing Facilitation with Variables \u2013 Enhancing precision in call routing by dynamically adjusting logic based on real-time data.</li> <li>Last Agent Routing \u2013 Ensuring returning customers are connected with the same agent for a seamless experience.</li> <li>Reconnecting with the Same Agent \u2013 Allowing customers to reach the same agent if a call ends and they call back within 10 minutes, maintaining conversation continuity.</li> </ul> <p>By mastering these API-driven techniques, you are now equipped to design smarter, more responsive workflows that enhance both operational efficiency and customer satisfaction.</p> <p>If you have any questions or need further guidance, feel free to reach out or join the Webex discussion forums. We look forward to seeing how you apply these advanced skills in your future projects!</p> <p>Thank you for completing the API Track, and we look forward to your continued innovation with Webex Contact Center.</p>"},{"location":"main/APITrack_DeveloperPortal/","title":"Using Webex Contact Center Developer Portal","text":""},{"location":"main/APITrack_DeveloperPortal/#story","title":"Story","text":"<p>Webex Contact Center APIs enable automation, customization, and integration with external applications. By leveraging these APIs, administrators can streamline processes, enhance agent efficiency, and improve customer interactions. In this introduction mission, we will explore how to interact with the Developer Portal and execute different types of API calls.</p>"},{"location":"main/APITrack_DeveloperPortal/#mission-details","title":"Mission Details","text":"<p>In this mission, attendees will learn how to interact with Webex Contact Center APIs by performing API calls via the  Developer Portal. Specifically, we will work with the Address Book feature.</p> <p>Good to Know [Optional] <p>Understanding API Calls with Real-Life Comparisons</p> <p>APIs (Application Programming Interfaces) allow different systems to communicate by sending and receiving structured requests. Here are the most common API call types, explained with real-world analogies:</p> <ol> <li> <p>GET \u2013 Retrieving Information Analogy: Checking your bank balance at an ATM. You request information, and the system provides it without making any changes. Example Use Case: Retrieving a customer\u2019s interaction history in Webex Contact Center before routing their call.</p> </li> <li> <p>POST \u2013 Creating New Data Analogy: Ordering a new item online. You submit details, and a new order (or record) is created in the system. Example Use Case: Creating a new customer support ticket when an issue is reported during a call.</p> </li> <li> <p>PUT \u2013 Updating Existing Data Analogy: Changing your home address in an online banking system. Instead of adding a new address, the existing one is replaced. Example Use Case: Updating a customer\u2019s preferred contact method in a CRM system.</p> </li> <li> <p>PATCH \u2013 Modifying Partial Data Analogy: Updating your phone number on a social media profile without changing other details like your name or email. Example Use Case: Changing only the priority level of an existing support ticket.</p> </li> <li> <p>DELETE \u2013 Removing Data Analogy: Canceling a hotel reservation. The record is removed, preventing further use. Example Use Case: Deleting a scheduled callback request if the customer no longer needs assistance.</p> </li> <li> <p>Webhooks \u2013 Automated Notifications Analogy: Receiving an SMS alert when your package is out for delivery. Instead of requesting updates repeatedly, you get notified when something happens. Example Use Case: Notifying an agent when a VIP customer joins the queue.</p> </li> <li> <p>SEARCH API (GraphQL Queries) \u2013 Retrieving Specific Data Efficiently Analogy: Using a restaurant menu app to filter only \"vegan dishes under $10\" instead of browsing the entire menu. Unlike traditional GET requests that return all data, GraphQL allows users to request exactly what they need. Example Use Case: Searching for all unresolved support tickets assigned to a specific agent without loading unnecessary ticket details.</p> </li> </ol> <p>APIs streamline operations by automating tasks, integrating systems, and enhancing customer experiences. Understanding these core calls helps optimize workflows in platforms like Webex Contact Center. </p>"},{"location":"main/APITrack_DeveloperPortal/#build","title":"Build","text":""},{"location":"main/APITrack_DeveloperPortal/#create-a-new-address-book-entity-by-using-post","title":"Create a New Address Book entity by using POST","text":"<ol> <li> <p>Open Developer Portal and click on Sign In.     Your login will be of the format wxcclabs+admin_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you.</p> </li> <li> <p>Click on Documentation which is on top right corner of the portal page.</p> <p></p> </li> <li> <p>On Menu pannel on the left, scroll down to API Reference section and click on Adress Book. Observe available API calls</p> <p>Note</p> <p>Address Book Overview Address Book is available in the Webex Contact Center Agent Desktop. Agents can make outbound calls using Address Books, selecting numbers from pre-configured lists instead of entering them manually in the 'Start a New Call' field. Administrators can configure and manage Address Books via the Webex Contact Center APIs.</p> </li> <li> <p>Scroll down and click on Create a new Address Book, then click on Try Out.</p> <p></p> </li> <li> <p>Clear Request Body content. Paste the following body and replace the  with your attendee ID. Click on Run. <p>Request Body: <pre><code>{\n    \"name\": \"AddressBook_&lt;Your_Attendee_ID&gt;\",\n    \"parentType\": \"ORGANIZATION\"\n}\n</code></pre></p> <p>Expected Response: 201 Response <pre><code>{\n  \"organizationId\": \"e56f00d4-98d8-4b62-a165-d05a41243d98\",\n  \"id\": \"4aa50a6b-a520-4221-bc9d-a050c111061f\",\n  \"version\": 0,\n  \"name\": \"AddressBook_140\",\n  \"parentType\": \"ORGANIZATION\",\n  \"createdTime\": 1738585491913,\n  \"lastUpdatedTime\": 1738585491913\n}\n</code></pre></p> <p></p> <li> <p>Switch to Webex Control Hub and navigate to Address Book under Desktop Experience Section. Locate your new created AddressBook_Your_Attendee_ID</p> </li> <li> <p>You should see your new created AddressBook_Your_Attendee_ID. There are still no Address Book entries so let's add them.</p> </li> <li> <p>On the same Address Book configuration page, copy the AddressBook_AddressBook_ ID into notepad.</p> <p></p> </li> <li> <p>Switch to Developer Portal and select Address Book again from left menu pane.</p> <p></p> </li> <li> <p>Click on Create a new Address Book Entry, then switch to Try Out tab within the same page. </p> </li> <li> <p>In the Parameters section paste ID you copied on Step 8 of the current mission.</p> </li> <li> <p>Clear Request Body content and paste the following body, then click on Run button.</p> <p>Request Body: <pre><code>{\n  \"name\": \"TAC Number\",\n  \"number\": \"+14085267209\"\n}\n</code></pre></p> <p>Expected Response: 201 Response <pre><code>{\n  \"organizationId\": \"e56f00d4-98d8-4b62-a165-d05a41243d98\",\n  \"id\": \"133ec7d9-7873-40b6-be40-43e071430268\",\n  \"version\": 0,\n  \"name\": \"TAC Number\",\n  \"number\": \"+14085267209\",\n  \"createdTime\": 1738773041509,\n  \"lastUpdatedTime\": 1738773041509\n}\n</code></pre></p> <p></p> </li> <li> <p>Switch to Webex Control Hub. Your Addres Book configuration page should still be open. Refresh the page.</p> </li> <li> <p>But if not open, locate and open your AddressBook_Your_Attendee_ID</p> </li> <li> <p>You should see your new created Entry List with Name Tac Number and Contact Number +14085267209.</p> <p></p> </li>"},{"location":"main/APITrack_DeveloperPortal/#retrieve-address-book-entry-by-id-get","title":"Retrieve Address Book Entry by ID (GET)","text":"<p>We will retrieve information about your newly created address book using a GET API call.</p> <ol> <li> <p>Switch to Developer Portal and select Address Book again from left menu pane.</p> </li> <li> <p>Locate and open Get specific Address Book by ID, then switch to Try Out tab.</p> <p></p> </li> <li> <p>Paste the same AddressBook_AddressBook_ ID into id cell of Parameters section. You can quickly copy it by switching back to Control Hub. Then click Run.</p> <p>Expected Response: 200 Response <pre><code>{\n  \"id\": \"115358d7-5c46-4988-9a50-e7f40c3b7daf\",\n  \"name\": \"AddressBook_140\",\n  \"description\": \"\",\n  \"parentType\": \"ORGANIZATION\",\n  \"createdTime\": 1738771074000,\n  \"lastUpdatedTime\": 1738773007000\n}\n</code></pre> </p> </li> </ol>"},{"location":"main/APITrack_DeveloperPortal/#update-address-book-description-by-using-put","title":"Update Address Book Description by using PUT","text":"<ol> <li> <p>Switch to Developer Portal and select Address Book again from left menu pane.</p> </li> <li> <p>Locate and open Update specific Address Book by ID, then switch to Try Out tab.</p> <p></p> </li> <li> <p>Paste the same AddressBook_AddressBook_ ID into id cell of Parameters section. You can quickly copy name and id by switching back to Control Hub. </p> </li> <li> <p>Clear Request Body content and paste the following body. Then click Run.</p> <p>Replace value YourAddressBook_Name to your AddressBook_Your_Attendee_ID</p> <p>Replace YouAddressBook_ID to actual AddressBook_AddressBook_ ID</p> <p>Request Body: <pre><code>{\n  \"name\": \"YourAddressBook_Name\",\n  \"id\": \"YouAddressBook_ID\",\n  \"parentType\": \"ORGANIZATION\",\n  \"description\": \"Testing PUT requests from Develeper Portal\"\n}\n</code></pre></p> <p>Expected Response: 200 Response <pre><code>{\n  \"organizationId\": \"e56f00d4-98d8-4b62-a165-d05a41243d98\",\n  \"id\": \"115358d7-5c46-4988-9a50-e7f40c3b7daf\",\n  \"version\": 5,\n  \"name\": \"AddressBook_140\",\n  \"description\": \"Testing PUT requests from Developer Portal\",\n  \"parentType\": \"ORGANIZATION\",\n  \"createdTime\": 1738771074000,\n  \"lastUpdatedTime\": 1738775594832\n}\n</code></pre></p> </li> <li> <p>Switch to Webex Control Hub. You Addres Book configuration page should still be open. Refresh the page to validate Description change.</p> </li> </ol> <p></p>"},{"location":"main/APITrack_DeveloperPortal/#use-search-api-to-retrieve-data-from-analyzer-db","title":"Use Search API to retrieve data from Analyzer DB.","text":"<p>Note</p> <p>When working with Webex Contact Center (WxCC) GraphQL queries, timestamps are represented in Epoch time (Unix timestamp) format. This format counts the number of seconds (or milliseconds) that have elapsed since January 1, 1970 (UTC).  If you need to convert a regular date/time into Epoch format or vice versa, you can use this online converter: https://www.epochconverter.com/ Ensure that your queries and filters use the correct time format to retrieve accurate results.</p> <ol> <li> <p>Switch to Developer Portal then locate and select Search from API REFERENCE menu</p> </li> <li> <p>Click on Search tasks and then switch to Try Out tab   </p> </li> <li> <p>Click on Maximize Screen, clear the text from GraphQL query window. Then paste the following query. </p> <p>Request Body: <pre><code>{\n  #Global CAD Variables: Usage of taskDetails Object to retrieve the Value of Global Variables\n  taskDetails(\n    # NOTE: from and to are mandatory arguments that take the Epoch timestamp in milliseconds\n    from: 1738833921000 #This can be set to Date.now() - (days * 24 * 60 * 60 * 1000) for lookback in days\n    to: 1738834701000 #This can be set to Date.now() in millis\n    filter: {\n      #Filter the type of Task\n      and: [\n        { channelType: { equals: telephony } } #Telephony calls only\n        { origin: { equals: \"+14694097607\" } } #Customer ANI\n        { status: { equals: \"ended\" } } #Final Disposition\n        { direction: { equals: \"inbound\" } } #Inbound call only\n        { isActive: { equals: false } } #Resolved call only\n        { owner: { notequals: { id: null } } } #Only calls that had an Owner\n      ]\n    }\n  ) {\n    tasks {\n      id #TaskId-SessionId-CallId      \n      status #Status\n      totalDuration #CallTime\n      origin #ANI\n      destination #DNIS\n      lastAgent {\n        #Agent\n        id\n        name\n      }\n      stringGlobalVariables(name: \"Global_Language\") {\n        #GlobalCADVariable\n        name\n        value\n      }\n    }\n  }\n} \n</code></pre></p> <p>Note</p> <p>Current query is configured to search calls with following details from Analyzer database:</p> <ol> <li> <p>Time range: From Thursday, February 6, 2025 9:25:21 AM to Thursday, February 6, 2025 10:38:21 AM GMT+01:00.</p> </li> <li> <p>Telephony inbound calls only.</p> </li> <li> <p>Calls only from +14694097607.</p> </li> <li> <p>Ended calls only.</p> </li> <li> <p>Calls that were assigned to an owner (agent).</p> </li> </ol> <p>Expected Response: 200 Response <pre><code>{\n  \"data\": {\n    \"taskDetails\": {\n      \"tasks\": [\n        {\n          \"id\": \"d1364618-49a4-41f5-8b5f-a8da4d12e56c\",\n          \"status\": \"ended\",\n          \"totalDuration\": 35562,\n          \"origin\": \"+14694097607\",\n          \"destination\": \"+14694096861\",\n          \"lastAgent\": {\n            \"id\": \"b9b45479-756f-4c55-8663-8ae7800a9a18\",\n            \"name\": \"Agent140 Lab\"\n          },\n          \"stringGlobalVariables\": {\n            \"name\": \"Global_Language\",\n            \"value\": \"en-AU\"\n          }\n        }\n      ]\n    }\n  }\n}\n</code></pre></p> <p>Note</p> <p>Output of the query is configured to represent the following information</p> <ol> <li> <p>ID of the call</p> </li> <li> <p>Status of the call</p> </li> <li> <p>Total duration of the call</p> </li> <li> <p>Origin of the call. Who called.</p> </li> <li> <p>Destination of the call. Entry Point number.</p> </li> <li> <p>Agent, whoc accepted the call: ID and Name</p> </li> <li> <p>Language selected by the caller. Represented as Global_Language variable</p> </li> </ol> <p></p> </li> <li> <p>Open JSON Path tool https://jsonpath.com/ to test your GraphQL response. Clear the content from Document section and from JSONPath Query adress line.</p> </li> <li> <p>Switch to Developer Portal and copy the response </p> </li> <li> <p>Switch back to JSON Path tool and paste the response into the Document section.   </p> </li> <li> <p>Test the following paths by pasting them into JSONPath Query adress line one by one:</p> <p><code>$.data.taskDetails.tasks[0].id</code> - Interaction ID of the call.</p> <p><code>$.data.taskDetails.tasks[0].status</code> - Status of the call.</p> <p><code>$.data.taskDetails.tasks[0].totalDuration</code> - Total Duration of the call.</p> <p><code>$.data.taskDetails.tasks[0].destination</code> - Call destination. This is the number essigned to Entry Point.</p> <p><code>$.data.taskDetails.tasks[0].lastAgent.id</code> - Agent ID who accepted the call.</p> <p><code>$.data.taskDetails.tasks[0].lastAgent.name</code> - Agent name who accepted the call.</p> <p><code>$.data.taskDetails.tasks[0].stringGlobalVariables.Global_Language</code> - Language Global Variable that was used in the flow.</p> <p><code>$.data.taskDetails.tasks[0].stringGlobalVariables.value</code> - Language selected by a caller. </p> </li> </ol> <p></p> <p>Congratulations, you have succesfully completed Introduction to Developer Portal mission! \ud83c\udf89\ud83c\udf89 </p>"},{"location":"main/APITrack_Mission1/","title":"Mission 1: HTTP API POST to Control Hub (Emergency config change)","text":""},{"location":"main/APITrack_Mission1/#story","title":"Story","text":"<p>Consider a scenario where a supervisor needs ability to change routing decision during an emergency without accessing admin portal. It can be done by changing the Default Value of GlobalVariable via API PUT call from False to True and use Condition in main IVR script to do routing decision.  In this mission we are going to create a control script for Supervisors that changes default value of Global Variable from True to False </p> <p> </p>"},{"location":"main/APITrack_Mission1/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>Supervisor calls to management flow and provide it's PIN code</li> <li>If the PIN correct, a PUT API request will be triggered to change a Global Variable default setting from False to True.</li> <li>A caller makes a call to contact center where Main_Flow_Your_Attendee_ID checks the global variable and transfer the call further based on settings.</li> </ol>"},{"location":"main/APITrack_Mission1/#mission-details","title":"Mission Details","text":"<p>Your mission is to:</p> <ol> <li>Create a management flow which will trigger a global variable default value change.</li> <li>Modify your Main_Flow_Your_Attendee_ID to check the global variable default value. </li> </ol>"},{"location":"main/APITrack_Mission1/#build","title":"Build","text":"<ol> <li> <p>In Control Hub Flows page open Global Variables tab and create new Global Variable:</p> <p>Name: EmergencyGV_Your_Attendee_ID</p> <p>Type: Boolean</p> <p>Default Value: False</p> <p>Copy your new created Global Variable ID and save to a notepad. We are going to use them in API request in further steps. </p> <p></p> </li> <li> <p>Create a new flow by navigating to Flows, click on Manage Flows dropdown list and select Create Flows</p> </li> <li> <p>Select Start Fresh and give it a name EmergencyGV_Your_Attendee_ID. Then click Create Flow.</p> </li> <li> <p>Add a Collect Digits node:</p> <p>Rename node to CollectPIN</p> <p>Connect the New Phone Contact output node edge to this Collect Digits node</p> <p>Loop No-Input Timeout and Unmatched Entry to itself</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Please enter 4 digits pin code to activate emergency flow.</p> <p>Set checkbox in Make Prompt Interruptible</p> <p>Advanced Settings:</p> <p>No-Input Timeout: 3 </p> <p>Inter-Digit Timeout: 3</p> <p>Minimum Digits: 1</p> <p>Maximum Digits: 10 </p> <p></p> </li> <li> <p>Add Condition node</p> <p>Activity Label: PIN_Check</p> <p>Connect the output node edge from the Collect Digits node to this node</p> <p>In the Expression section write an expresion {{CollectPIN.DigitsEntered == '1111'}}</p> <p>[Optional] You can verify the expresion result by clicking on Test Expression icon in the Expresion section</p> <p></p> </li> <li> <p>Add HTTP Request node. We are going to use Update Global Variable API PUT request in the node configuration. </p> <p>Activity Label: HTTP_PUT</p> <p>Connect the TRUE output edge from the PIN_Check node to this node</p> <p>Connector: WxCC_API</p> <p>Request Path: /organization/e56f00d4-98d8-4b62-a165-d05a41243d98/cad-variable/{ID} - change {ID} with Global Variable ID you created in Step 1 of this mission.</p> <p>Method: PUT</p> <p>Content Type: Application/JSON</p> <p>Request Body: <pre><code>{\n    \"active\": true,\n    \"agentEditable\": false,\n    \"agentViewable\": false,\n    \"variableType\": \"Boolean\",\n    \"defaultValue\": \"true\",\n    \"desktopLabel\": \"\",\n    \"id\": \"yourGlobalVariableID created in step 1\",\n    \"name\": \"yourGlobalVariable name created in step 1\",\n    \"organizationId\": \"e56f00d4-98d8-4b62-a165-d05a41243d98\",\n    \"reportable\": false,\n    \"version\": 1\n}\n</code></pre></p> <p>Note</p> <p>In Request body we are going to change Default Value of Global Variable EmergencyGV_Your_Attendee_ID  from false to true</p> <p></p> </li> <li> <p>Add one more Condition Node. In this node we are going to check the status of our API PUT request. If it is 200 OK the output will be True and if other than 200 then False.</p> <p>Activity Label: HTTPStatusCode</p> <p>Connect the output node edge from the HTTP_PUT node to this node</p> <p>In the Expression section write an expresion {{HTTP_PUT.httpStatusCode == 200}}</p> <p></p> </li> <li> <p>Add a Play Message node </p> <p>Connect the HTTPStatusCode TRUE output node edge to this Play Message node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: You have successfully modified your emergency configuration.</p> <p></p> </li> <li> <p>Add another Play Message node</p> <p>Connect the HTTPStatusCode FALSE output node edge to this Play Message node</p> <p>Connect the PIN_Check FALSE output node edge you created in Step 5 to this Play Message node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Something went wrong. Please check your configuration and try again.</p> <p></p> </li> <li> <p>Add Disconnect Contact</p> <p>Connect both Play Message nodes created in Steps 8 and 9 to this node</p> </li> <li> <p>Publish your flow</p> <p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Latest</p> <p>Click Publish Flow</p> </li> <li> <p>Map your flow to your inbound channel</p> <p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search):  Your_Attendee_ID_Channel</p> <p>Select the Routing Flow: EmergencyGV_Your_Attendee_ID</p> <p>Select the Version Label: Latest</p> <p>Click Save in the lower right corner of the screen</p> </li> </ol>"},{"location":"main/APITrack_Mission1/#testing","title":"Testing","text":"<ol> <li> <p>Open your Global Variable EmergencyGV_Your_Attendee_ID and make sure Default Value is set to False</p> </li> <li> <p>Make a call to your Support Number, when asked provide a pin code 1111# and listen the next message:</p> <p>a. If \"You have successfully modified your emergency configuration.\" you're good to proceed with step 3.</p> <p>b. If \"Something went wrong. Please check your configuration and try again.\" then before proceeding you need to fix your flow. Call the instructor for assistance. </p> </li> <li> <p>Open your Global Variable EmergencyGV_Your_Attendee_ID again, refresh the page if it was opened and make sure Default Value is now set to True.</p> </li> <li> <p>Now, let\u2019s get to the fun part. Open the Main_Flow_Your_Attendee_ID we created in Mission 1 of Core track, make sure Edit toggle is ON </p> </li> <li> <p>Add Global Variable EmergencyGV_Your_Attendee_IDand make sure Default Value is set to False in General Settings of the flow as shown on the following picture.</p> <p> </p> </li> <li> <p>Add Condition node: </p> <p>Connect the output node edge of the NewPhoneContact node to this node</p> <p>Connect the output False node edge from the Condition Node to Set Variable</p> <p>In the Expression section write an expresion {{EmergencyGV_Your_Attendee_ID == true}} </p> <p>OptionalYou can Verify the expresion result by Clicking on Test Expression icon in the Expresion section.</p> <p></p> <p>Note</p> <p>Depending on which Track you have followed after the Core Track, you may have NewPhoneContact connected either to FeedbackSet node or to SetVariable node. Remove this connection and add a Condition node in between. </p> </li> <li> <p>Add a Play Message node and DisconnectContact node.</p> <p>Connect the TRUE output node edge of the Condition Node node to this node</p> <p>Connect the output node edge of Play Message node to Disconnect Contact node.</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Sorry, Emergency flow has been enabled. All operators have been evacuated. Please call later.</p> <p></p> </li> <li> <p>Publish your flow</p> <p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Latest</p> <p>Click Publish Flow</p> </li> <li> <p>Because we are using only one number to make calls we need to map your Your_Attendee_ID_Channel back to the Main_Flow_Your_Attendee_ID</p> <p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): Your_Attendee_ID_Channel</p> <p>Select the Routing Flow: Main_Flow_Your_Attendee_ID</p> <p>Select the Version Label: Latest</p> <p>Click Save in the lower right corner of the screen</p> </li> <li> <p>Make a call and you should hear the message we configured on Step 7.</p> </li> <li> <p>Revert the Global Variable value from True to False in Control Hub and click Save.</p> <p>Name: EmergencyGV_Your_Attendee_ID </p> <p>Type: Boolean</p> <p>Default Value: False</p> <p></p> </li> <li> <p>Make a test call again and you should hear the Welcome Prompt.</p> </li> </ol> <p>Congratulations, you have completed Emergency Config mission! \ud83c\udf89\ud83c\udf89 </p>"},{"location":"main/APITrack_Mission2/","title":"Mission 2: Routing facilitation","text":""},{"location":"main/APITrack_Mission2/#story","title":"Story","text":"<p>The primary objective of this new feature is to enhance nodes activities to include a dynamic variable-based selection option to make your flow smaller and simpler to adjust. You will learn how to use Dynamic Variables in multiple nodes including GoTo, Business Hours, Queue and other nodes. </p>"},{"location":"main/APITrack_Mission2/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>When call arrives fetch the data from MockAPI based on your Dialed Number</li> <li>Write the data into respective preconfigured flow variables. These variables are being used in all consequent nodes.</li> <li>Business Hours entity configured to cover EMEA timezone. Call should go through WorkingHours exit edge in normal behavior.</li> <li>Play Message nodes have been configured to play messages received from API call</li> </ol>"},{"location":"main/APITrack_Mission2/#mission-details","title":"Mission Details","text":"<p>Your mission is to: 1. Create a new flow by using pre-defined flow template 2. Request the data from external database and parse it into flow variables which are coming with a flow template. 3. You do not need to create Business Hours, Channels and additional Flows as they have been pre-configured for you.</p> <p>Good to Know [Optional] <p>We are going to imitate a real API server by providing realistic responses to requests. For that we chose Server MockAPI.</p> <p>For more information of how you can use MockAPI please watch these Vidcasts:  [ADVANCED] Use MockAPI to enhance your Demos - PART 1 and [ADVANCED] Use MockAPI to enhance your Demos - PART 2</p>"},{"location":"main/APITrack_Mission2/#steps","title":"Steps","text":"<ol> <li> <p>Switch to Control Hub, then navigate to Flows, click on Manage Flows dropdown list and select Create Flows</p> </li> <li> <p>New Tab will be opened. Navigate to Flow Templates</p> </li> <li> <p>Choose Dynamic Variable Support and click Next. You can open View Details and to see observe flow structure and read flow description.</p> </li> <li> <p>Name you flow as DynamicVariables_Your_Attendee_ID. Then click on Create Flow.</p> <p></p> </li> <li> <p>Observe preconfigured nodes and flow variables. If you have questions please reach out to lab proctor.</p> <ul> <li>FetchFlowSettings node is used to access external database over API and parse the result by writing response result into respective Flow Variables which have been preconfigured for you already.</li> <li>SetVariable_mwn node writes complete API response into debug variable so you could see the complete API call result in Debug tool. It's been taken from FetchFlowSettings.httpResponseBody output variable of FetchFlowSettings node</li> <li>All Play Message and Play Music nodes have been preconfigured to play TTS messages taken from respective API response</li> <li>BusinessHours_os2 node set to bussinesshours variable which is your business hour entity Your_Attendee_ID_Bussiness_Hours</li> <li>QueueContact_a62 node set to queue variable which is your queue entity Your_Attendee_ID_Queue</li> <li>Some GoTo nodes are configured to use variables and some have statice values. We will adjust them while going through further steps. </li> </ul> <p></p> </li> <li> <p>Select FetchFlowSettings HTTP Node and paste your GET request in Request URL field by replacing a templated one.     https://674481b1b4e2e04abea27c6e.mockapi.io/flowdesigner/Lab/DynVars?dn={{NewPhoneContact.DNIS | slice(2) }}</p> <p>Test your API Source[Optional] <ol> <li> <p>Test your API resource. https://674481b1b4e2e04abea27c6e.mockapi.io/flowdesigner/Lab/DynVars?dn={DNIS}</p> </li> <li> <p>Replace DNIS with the provided DNIS number stripping +1</p> </li> </ol> <p>[Example:] If your number +14694096861, then your GET Query should be https://674481b1b4e2e04abea27c6e.mockapi.io/flowdesigner/Lab/DynVars?dn=4694096861</p> <ol> <li>Open Chrome browser and past your URL. You should get the follwoing result</li> </ol> <p></p> <ol> <li> <p>Test JSON Path in the following tool https://jsonpath.com/</p> </li> <li> <p>Paste your GET URL into the Browser address line and copy the output in square brackets (including brackets)</p> </li> <li> <p>Open https://jsonpath.com/ and paste the copied response into Inputs window</p> </li> <li> <p>In JSONPath box copy and paste one of the path expression from FetchFlowSettings to verify your results.</p> </li> </ol> <p> </p> <li> <p>In the same node, under Parsing Settings add [0] after $ sign. This needs to be done due to output structure of API response. </p> <p></p> </li> <li> <p>Open a Queue Node and set Fallback Queue to CCBU_Fallback_Queue. That is needed to make sure the call will find an end queue in case API GET call fails.</p> </li> <li> <p>Open GoTo_x19 node and set:</p> <p>Destination Type: Flow</p> <p>Static Flow</p> <p>Flow: CLTS_ErrorHandling_Flow</p> <p>Choose Version Label: Latest</p> </li> <li> <p>Open GoTo_8ca and set:</p> <p>Destination Type: Entry Point</p> <p>Static Entry Point</p> <p>Entry Point: CLTS_ErrorHandling_Channel</p> </li> <li> <p>Repeat node settings in Step 9 for GoTo_uyn</p> </li> <li> <p>Repeat node settings in Step 10 for GoTo_dbr</p> <p></p> </li> <li> <p>Validate and Publish flow</p> </li> <li> <p>In Popped up window click on dropdown menu to select Latest label, then click Publish</p> </li> <li> <p>Switch to Control Hub and navigate to Channels under Customer Experience Section</p> <p>Locate your Inbound Channel (you can use the search):  Your_Attendee_ID_Channel</p> <p>Select the Routing Flow: DynamicVariables_Your_Attendee_ID</p> <p>Select the Version Label: Latest</p> <p>Click Save in the lower right corner of the screen</p> <p></p> </li>"},{"location":"main/APITrack_Mission2/#testing","title":"Testing","text":"<ol> <li> <p>Your Agent desktop session should be still active but if not, use Webex CC Desktop application  and login with agent credentials you have been provided wxcclabs+agent_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you. </p> </li> <li> <p>Select Team Your_Attendee_ID_Team. Click Submit. Allow browser to access Microphone by clicking Allow on ever visit.</p> </li> <li> <p>Make your agent Available and you're ready to make a call.</p> <p></p> </li> <li> <p>Change the status of your agent to Available and make a call to test you flow. If everyhing configured as per instructions you should hear a welcome1 message that is a value of $[0].welcomePrompt1 and then $[0].welcomePrompt2. Finally the call should land on the $[0].queue</p> </li> </ol>"},{"location":"main/APITrack_Mission2/#optional-test-other-variables","title":"[Optional] Test other variables","text":"<ol> <li> <p>You can do the same trick we did in Mission 2 of Core Track and use Override option to change the logic. Overrides as well as Business hours have been preconfigured for you. Now we need to apply it on your Your_Attendee_ID_Bussiness_Hours entity. Open Your_Attendee_ID_Bussiness_Hours in Control Hub, scroll down to Additional Settings and select Overrides_Hours from Override dropdown list. Then click Save.</p> <p>Note</p> <p>Override Hours entity overwrites Working Hours and set to duration of current Cisco Live lab </p> <p></p> </li> <li> <p>Make a new call to be redirected to flow $[0].goToFlow where the following message can be heard: \"Thanks you for call. You are now on Error Handling flow and will be redirected to Global Support line in a moment. Good bye.\"</p> </li> <li> <p>Now we need to revert the configuration we made in Step 1. Open Your_Attendee_ID_Bussiness_Hours in Control Hub in Control Hub, scroll down to Additional Settings and select None from Override dropdown list. Then click Save.</p> <p></p> </li> </ol> <p>Congratulations, you have succesfully completed Routing Facilitation mission! \ud83c\udf89\ud83c\udf89 </p>"},{"location":"main/APITrack_Mission3/","title":"Mission 5: Last Agent Routing","text":""},{"location":"main/APITrack_Mission3/#story","title":"Story","text":"<p>A common request for returning customers calling into a contact center is to work with the last person with which they had a good experience.  This may be because they are already familiar with what the customer needs or it may just be that the customer is familiar with the agent and enjoyed their last interaction. With the new Auto CSAT feature in the Webex Contact Center we can automatically account for this request and route to the last agent which had a high Auto CSAT with the customer.  </p> <p>Note</p> <p>Because this is a lab environment and you will be playing both the role of the customer and agent, we are going to use a simulated CSAT as it would be difficult to properly score a call in these conditions.  </p>"},{"location":"main/APITrack_Mission3/#high-level-explanation","title":"High Level Explanation","text":"<ol> <li>New call comes into the flow</li> <li>Call the Search API to find the last agent with which they had a good CSAT</li> <li>If the agent is available, we will route the call to that agent</li> <li>If the agent is not available or if no recent good CSAT scores exits for the caller, we will route the call to the queue for the next available agent. </li> </ol> <p>Note</p> <p>We are going to touch Subflow which is the feature that enables easier management of complex flows by breaking down commonly used and repeated portions into reusable subflows. This improves readability of flows, increases reusability of repeated functionality in the subflow, as well as improves development time since there is no redundant design of the same flows.   Subflows also introduce the ability to share commonly used subroutines between developers, between customers and will help unlock a library of subflows available in the marketplace.</p>"},{"location":"main/APITrack_Mission3/#preconfigured-elements","title":"Preconfigured elements","text":"<ol> <li>Wait treatment Subflow which will provide Music in Queue and Queue Messages. </li> <li>Connector for calling Webex Contact Center APIs</li> <li>Agent Editable and Reportable Global Variable for our simulated CSAT</li> </ol>"},{"location":"main/APITrack_Mission3/#build","title":"Build","text":"<ol> <li> <p>Create a flow named LastAgentRouting_Your_Attendee_ID and add these flow variables:</p> <ul> <li>Callback Status variable:</li> </ul> <p>Name: agentID</p> <p>Type: String</p> <p>Default Value: empty</p> <ul> <li>Callback Connect Time variable:</li> </ul> <p>Name: queriedCSAT</p> <p>Type: Decimal</p> <p>Default Value: 0.0</p> </li> <li> <p>Add the Global Variable simulatedCSAT to the flow</p> <p>There are no values to set because it has already been configured globally</p> <p></p> </li> <li> <p>Add a Play Message node </p> <p>Connect the New Phone Contact node edge to this Play Message node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Welcome to Mission 5 of Advanced Routing mission.</p> <p></p> </li> <li> <p>Add an HTTP Request node for our query</p> <p>Connect the output node edge from the Play Message node to this node</p> <p>Select Use Authenticated Endpoint</p> <p>Connector: WxCC_API</p> <p>Path: /search</p> <p>Method: POST</p> <p>Content Type: Application/JSON</p> <p>Copy this GraphQL query into the request body: <pre><code>{\"query\":\"query simulatedCSAT($from:Long! $to:Long! $timeComparator:QueryTimeType $filter:TaskFilters $name:String!){task(from:$from,to:$to,timeComparator:$timeComparator,filter:$filter){tasks{owner{name id}simulatedCSAT:doubleGlobalVariables(name:$name){name value}}}}\",\"variables\":{\"from\":\"{{now() | epoch(inMillis=true) - 604800000}}\",\"to\":\"{{now() | epoch(inMillis=true)}}\",\"timeComparator\":\"endedTime\",\"filter\":{\"and\":[{\"status\":{\"equals\":\"ended\"}},{\"origin\":{\"equals\":\"{{NewPhoneContact.ANI}}\"}},{\"doubleGlobalVariables\":{\"name\":{\"equals\":\"simulatedCSAT\"},\"value\":{\"gte\":3}}}]},\"name\":\"simulatedCSAT\"}}\n</code></pre> Expanded Query For Understanding (optional) <pre><code>query simulatedCSAT(\n  $from: Long!\n  $to: Long!\n  $timeComparator: QueryTimeType\n  $filter: TaskFilters\n  $name: String!\n) {\n  task(from: $from, to: $to, timeComparator: $timeComparator, filter: $filter) {\n    tasks {\n      owner {\n        name #Agent Name\n        id #Agent ID\n      }\n      simulatedCSAT: doubleGlobalVariables(name: $name) {\n        name\n        value #Value of the simulatedCSAT\n      }\n    }\n  }\n}\n</code></pre> <pre><code>Variables:\n\n{\n  \"from\": \"{{now() | epoch(inMillis=true) - 604800000}}\", # time now - 1 week represented in EPOCH time(ms)\n  \"to\": \"{{now() | epoch(inMillis=true)}}\", # time now represented in EPOCH time(ms)\n  \"timeComparator\": \"endedTime\",\n  \"filter\": {\n    \"and\": [\n      {\n        \"status\": {\n          \"equals\": \"ended\"\n        }\n      },\n      {\n        \"origin\": {\n          \"equals\": \"{{NewPhoneContact.ANI}}\"\n        }\n      },\n      {\n        \"doubleGlobalVariables\": { #Filtering on the Global Variable simulatedCSAT to be greater or equal to 3 \n          \"name\": {\n            \"equals\": \"simulatedCSAT\" \n          },\n          \"value\": {\n            \"gte\": 3\n          }\n        }\n      }\n    ]\n  },\n  \"name\": \"simulatedCSAT\" #The Alias name used for the global variable in the returned fields\n}\n</code></pre> </p> <p>Parse Settings:</p> <ul> <li> <p>Content Type: JSON</p> </li> <li> <p>Output Variable: <code>agentID</code></p> </li> <li> <p>Path Expression: <code>$.data.task.tasks[0].owner.id</code></p> </li> <li> <p>Output Variable: <code>queriedCSAT</code></p> </li> <li> <p>Path Expression: <code>$.data.task.tasks[0].simulatedCSAT.value</code> </p> </li> </ul> <p></p> </li> <li> <p>Add a Condition node</p> <p>Connect the output node edge from teh HTTP Request node to this node</p> <p>We will connect the True node in a future step.</p> <p>Expression: <code>{{agentID is empty}}</code></p> <p></p> </li> <li> <p>Add a Queue To Agent node</p> <p>Connect the False node edge of the Condition node created in previous step to this Queue To Agent.</p> <p>Agent Variable: agentID</p> <p>Agent Lookup Type: ID</p> <p>Set Contact Priority: True</p> <p>Select Static Priority</p> <p>Static Priority Value: P1</p> <p>Reporting Queue: Your_Attendee_ID_Queue</p> <p>Park Contact if Agent Unavailable: False</p> <p>Recovery Queue: Your_Attendee_ID_Queue </p> <p></p> </li> <li> <p>Add a Queue Contact node</p> <p>Connect Queue To Agent Output and Error node edges created in previous step to this Queue Contact</p> <p>Connect the True node edge from the Condition node created in Step 4 to this node</p> <p>Select Static Queue</p> <p>Queue: Your_Attendee_ID_Queue</p> <p></p> </li> <li> <p>Add a Subflow node and DisconnectContact node</p> <p>In the Activity Library pane on the left side of the screen, click Subflows</p> <p>Find the Subflow names WaitTreatment and drag it onto the flow canvas like you would any other node.</p> <p>Connect the output node edge from this node to the DisconnectContact node.</p> <p>Connect the Queue Contact node edge that we created in previous step to this Subflow node</p> <p>Subflow Label: Latest</p> <p>Enable automatic updates: True</p> <p>Subflow Input Variables: None</p> <p>Subflow Output Variables: None</p> <p> </p> <p>Check your flow</p> </li> <li> <p>Publish your flow</p> <p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Latest </p> <p>Click Publish Flow</p> </li> <li> <p>Map your flow to your inbound channel</p> <p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): Your_Attendee_ID_Channel</p> <p>Select the Routing Flow: LastAgentRouting_Your_Attendee_ID</p> <p>Select the Version Label: Latest</p> <p>Click Save in the lower right corner of the screen</p> </li> </ol>"},{"location":"main/APITrack_Mission3/#_1","title":"Mission 5: Last Agent Routing","text":""},{"location":"main/APITrack_Mission3/#testing","title":"Testing","text":"<ol> <li>Your Agent desktop session should be still active but if not, use Webex CC Desktop application  and login with agent credentials you have been provided wxcclabs+agent_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you.</li> <li>On your Agent Desktop, set your status to available<ol> <li>Using Webex, place a call to your Inbound Channel number Your_Attendee_ID_Channel</li> <li>You should be offered a call, click on the accept button. (You may want to mute the mic on both Webex and the Agent Desktop)</li> <li>In the Agent Desktop you will see a new field in Call Information section where you can edit the Simulated CSAT.  Enter a value of 2.9 and click save.</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>Using Webex, place another call to your Inbound Channel number Your_Attendee_ID_Channel<ol> <li>You should be offered the call, click on the accept button.</li> <li>Enter a value of 3.7 in for Simulated CSAT and click save.</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>In your Flow:<ol> <li>Open the debugger</li> <li>Select the first interaction (at the bottom of the list)</li> <li>Trace the steps taken in the flow</li> <li>Open the last interaction </li> <li>Trace the steps taken in the flow</li> </ol> </li> <li>Answer these questions:<ol> <li>Did the second call get routed to your agent via the Queue To Agent node?<ol> <li>Why or why not</li> </ol> </li> </ol> </li> <li>On your Agent Desktop, set your status to not be available</li> <li>Using Webex, place another call to your Inbound Channel number Your_Attendee_ID_Channel</li> <li>After you hear the queue treatment start, change your status to available on the agent desktop.<ol> <li>You should be offered the call, click on the accept button.</li> <li>Enter a value of 2.8 in for Simulated CSAT and click save.</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>In your Flow:<ol> <li>Open the debugger</li> <li>Select the last interaction</li> <li>Trace the steps taken in the flow</li> </ol> </li> <li>Answer these questions:<ol> <li>Was the call routed to the Queue to Agent node?</li> <li>What happened next?<ol> <li>Why?</li> <li>What will happen if you call in again starting in the Available status?</li> </ol> </li> </ol> </li> <li>Make sure that you are in Available status on the agent desktop.</li> <li>Using Webex, place another call to your Inbound Channel number Your_Attendee_ID_Channel<ol> <li>You should be offered the call, click on the accept button.</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>In your Flow:<ol> <li>Open the debugger</li> <li>Select the last interaction</li> <li>Trace the steps taken in the flow</li> </ol> </li> <li>Answer the following questions:<ol> <li>Was the call offered to you from the Queue to Agent node?</li> <li>What was the value of the variable queriedCSAT (look in the HTTP node step)<ol> <li>Why?</li> </ol> </li> <li>How do you think that you could change the logic/criteria to meet other business needs? </li> </ol> </li> </ol> <p>Congratulations, you have officially completed Last Agent Routing mission! \ud83c\udf89\ud83c\udf89 </p>"},{"location":"main/APITrack_Mission3_AutoCSAT/","title":"Mission 3: Last Agent Routing","text":""},{"location":"main/APITrack_Mission3_AutoCSAT/#story","title":"Story","text":"<p>A common request for returning customers calling into a contact center is to work with the last person with which they had a good experience.  This may be because they are already familiar with what the customer needs or it may just be that the customer is familiar with the agent and enjoyed their last interaction. With the new Auto CSAT feature in the Webex Contact Center we can automatically account for this request and route to the last agent which had a high Auto CSAT with the customer.  </p> <p>[IMPORTANT] Since this is a lab environment where you will act as both the customer and the agent, accurately scoring a call will be challenging. Additionally, AutoCSAT has not been taught due to the insufficient number of calls required for AI to learn and generate proper scoring. In this lab, we will use a Global Variable to store the score, which is also used for AutoCSAT teaching. With a sufficient number of provided scores, AutoCSAT will eventually be able to score calls automatically.</p> <p>Note</p> <p>Configuration page of AutoCSAT </p>"},{"location":"main/APITrack_Mission3_AutoCSAT/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>New call comes into the flow</li> <li>Call the Search API to find the last agent with which they had a good AutoCSAT</li> <li>If the AutoCSAT is greater or equal 4 and agent is available, we will route the call to that agent</li> <li>If the agent is not available or if no recent good AutoCSAT scores exist for the caller, we will route the call to the queue for the next available agent. </li> </ol>"},{"location":"main/APITrack_Mission3_AutoCSAT/#mission-details","title":"Mission Details","text":"<p>Your mission is to:</p> <ol> <li>Create a new flow from the scratch. </li> <li>Build a Search API query to request information from Analyzer database and parse it into flow variables.</li> <li>Prioritize the call if conditions match and route the call to agent.</li> </ol>"},{"location":"main/APITrack_Mission3_AutoCSAT/#preconfigured-elements","title":"Preconfigured elements","text":"<ol> <li>Wait treatment Subflow which will provide Music in Queue and Queue Messages. </li> <li>AutoCSAT flow CCBU_PostCallSurvey_AutoCSAT has been created to help contact centers efficiently gather customer feedback through a simple automated post-call survey using DTMF tones.</li> </ol>"},{"location":"main/APITrack_Mission3_AutoCSAT/#build","title":"Build","text":"<ol> <li> <p>Create a flow named LastAgentRouting_Your_Attendee_ID and add these flow variables:</p> <ul> <li>Agent ID variable:</li> </ul> <p>Name: agentID</p> <p>Type: String</p> <p>Default Value: empty</p> <ul> <li>Variable to write HTTP Response into it:</li> </ul> <p>Name: JSONResponse</p> <p>Type: String</p> <p>Default Value: empty</p> <ul> <li>String type AutoCSAT variable:</li> </ul> <p>Name: AutoCSATVar</p> <p>Type: Decimal</p> <p>Default Value: 0.0</p> <p>Switch on Make Agent Viewable</p> <p>Desktop Label: Auto CSAT</p> <p></p> </li> <li> <p>Add a Play Message node </p> <p>Connect the New Phone Contact node edge to this Play Message node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Welcome to the last agent routing mission.</p> <p></p> </li> <li> <p>Add an HTTPRequest node for our query</p> <p>Activity Label: GraphQL_Query</p> <p>Connect the output node edge from the Play Message node to this node</p> <p>Select Use Authenticated Endpoint</p> <p>Connector: WxCC_API</p> <p>Path: /search</p> <p>Method: POST</p> <p>Content Type: Application/JSON</p> <p>Copy this GraphQL query into the request body: <pre><code> {\"query\":\"query($from: Long!, $to: Long!)\\n{\\n  taskDetails(\\n      from: $from\\n      to: $to\\n    filter: {\\n      and: [\\n       { lastEntryPoint: { id: { equals: \\\"{{NewPhoneContact.EntryPointId}}\\\" } } }\\n       { status: { equals: \\\"ended\\\" } }\\n       { doubleGlobalVariables: {name:{equals:\\\"AutoCSAT_GV\\\"}, value: {gte:4} } }\\n\\n        ]\\n    }\\n  ) {\\n    tasks {\\n      csatScore  \\n      autoCsat\\n      owner {\\n        id\\n        name\\n      }\\n      doubleGlobalVariables(name: \\\"AutoCSAT_GV\\\"){\\n        name\\n        value\\n      }\\n\\n    }\\n  }\\n}\",\"variables\":{\"from\":\"{{now() | epoch(inMillis=true) - 1800000}}\",\"to\":\"{{now() | epoch(inMillis=true)}}\"}}\n</code></pre> Expanded Query For Understanding (optional) <pre><code>query($from: Long!, $to: Long!)\n  {\n    taskDetails(\n        from: $from\n        to: $to\n      filter: {\n        and: [\n         { lastEntryPoint: { id: { equals: \"{{NewPhoneContact.EntryPointId}}\" } } }\n         { status: { equals: \"ended\" } }\n         { doubleGlobalVariables: {name:{equals:\"AutoCSAT_GV\"}, value: {gte:4} } }\n\n          ]\n      }\n    ) {\n      tasks {  \n        autoCsat\n        owner {\n          id\n          name\n        }\n        doubleGlobalVariables(name: \"AutoCSAT_GV\"){\n          name\n          value\n        }\n\n      }\n    }\n  }\n</code></pre> <pre><code>Expected Response:\n\n{\n    \"data\": {\n        \"taskDetails\": {\n            \"tasks\": [\n                {\n                    \"csatScore\": 0,\n                    \"autoCsat\": null,\n                    \"owner\": {\n                        \"id\": \"b9b45479-756f-4c55-8663-8ae7800a9a18\",\n                        \"name\": \"Agent140 Lab\"\n                    },\n                    \"doubleGlobalVariables\": {\n                        \"name\": \"AutoCSAT_GV\",\n                        \"value\": 4.0\n                    }\n                }\n            ]\n        }\n    }\n}\n</code></pre> </p> <p>Parse Settings:</p> <ul> <li> <p>Content Type: JSON</p> </li> <li> <p>Output Variable: <code>agentID</code></p> </li> <li> <p>Path Expression: <code>$.data.taskDetails.tasks[0].owner.id</code></p> </li> <li> <p>Output Variable: <code>AutoCSATVar</code></p> </li> <li>Path Expression: <code>$.data.taskDetails.tasks[0].doubleGlobalVariables.value</code> </li> </ul> <p></p> </li> <li> <p>Add Set Variable node</p> <p>Activity Label: GraphQL_Response</p> <p>Connect GraphQL_Query to this node</p> <p>We will connct Set Variable node in next step</p> <p>Variable: JSONResponse</p> <p>Set To Variable: GraphQL_Query.httpResponseBody </p> <p></p> </li> <li> <p>Add a Case node</p> <p>Activity Label: Case_If_AgentIDEmpty</p> <p>Connect the output node edge from teh GraphQL_Response node to this node</p> <p>Select Build Expression</p> <p>Expression: <code>{{agentID is empty}}</code></p> <p>Change Case 0 to true</p> <p>Change Case 1 to false</p> <p>We will connect the true and false in future steps.  </p> <p></p> </li> <li> <p>Add a Condition node</p> <p>Activity Label: CheckCSATValue</p> <p>Connect false exit of Case node to this node</p> <p>We will connect the True and False output edges in future steps.</p> <p>Expression: <code>{{AutoCSATVar&gt;=4.0}}</code></p> <p></p> </li> <li> <p>Add a Queue To Agent node</p> <p>Connect the True node edge of the CheckCSATValue node created in previous step to this Queue To Agent.</p> <p>Agent Variable: agentID</p> <p>Agent Lookup Type: ID</p> <p>Set Contact Priority: True</p> <p>Select Static Priority</p> <p>Static Priority Value: P1</p> <p>Reporting Queue: Your_Attendee_ID_Queue</p> <p>Park Contact if Agent Unavailable: False</p> <p>Recovery Queue: Your_Attendee_ID_Queue </p> <p></p> </li> <li> <p>Add a Queue Contact node</p> <p>Connect the False node edge from the CheckCSATValue node created in Step 6 to this node</p> <p>Connect true node edge of Case_If_AgentIDEmpty node created in Step 5 to this node</p> <p>Connect Default node edge of Case_If_AgentIDEmpty node created in Step 5 to this node</p> <p>Connect Queue To Agent Output and Error node edges created in previous step to this Queue Contact</p> <p>Select Static Queue</p> <p>Queue: Your_Attendee_ID_Queue</p> <p></p> </li> <li> <p>Add a Subflow node and DisconnectContact node</p> <p>In the Activity Library pane on the left side of the screen, click Subflows</p> <p>Find the Subflow names WaitTreatment and drag it onto the flow canvas like you would any other node.</p> <p>Connect the output node edge from this node to the DisconnectContact node.</p> <p>Connect the Queue Contact node edge that we created in previous step to this Subflow node</p> <p>Subflow Label: Latest</p> <p>Enable automatic updates: True</p> <p>Subflow Input Variables: None</p> <p>Subflow Output Variables: None</p> <p></p> </li> <li> <p>Navigate to Event Flows and add GoTo node to the canvas.</p> <p>Connect AgentDisconnect event node edge this node</p> <p>Destination Type: Flow</p> <p>Flow: CCBU_PostCallSurvey_AutoCSAT</p> <p>Choose Version Label: Latest</p> <p>Check your Main Flow</p> </li> <li> <p>Publish your flow</p> <p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Latest </p> <p>Click Publish Flow</p> <p></p> </li> <li> <p>Map your flow to your inbound channel</p> <p>Navigate to Control Hub &gt; Contact Center &gt; Channels</p> <p>Locate your Inbound Channel (you can use the search): Your_Attendee_ID_Channel</p> <p>Select the Routing Flow: LastAgentRouting_Your_Attendee_ID</p> <p>Select the Version Label: Latest</p> <p>Click Save in the lower right corner of the screen</p> </li> </ol>"},{"location":"main/APITrack_Mission3_AutoCSAT/#_1","title":"Mission 3: Last Agent Routing","text":""},{"location":"main/APITrack_Mission3_AutoCSAT/#testing","title":"Testing","text":"<ol> <li>Your Agent desktop session should be still active but if not, use Webex CC Desktop application  and login with agent credentials you have been provided wxcclabs+agent_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you.</li> <li>On your Agent Desktop, set your status to available<ol> <li>Using Webex, place a call to your Inbound Channel number Your_Attendee_ID_Channel</li> <li>You should be offered a call, click on the accept button. (You may want to mute the mic on both Webex and the Agent Desktop)</li> <li>End the call from Agent Desktop and you should here an invitation to rate your experience with us on a scale of 1 to 5.</li> <li>Select 4 or 5 on Webex App keypad.</li> </ol> </li> <li> <p>In your flow, open the debuger and select the latest call from the list (on top of the list).</p> <ol> <li>Trace the steps taken in the flow</li> <li>Select GraphQL_Query and scroll down the details panel on the right-hand side to Modified Variables. They should be empty since there are no CSAT scores at the moment you made the first call.</li> <li>Case_If_AgentIDEmpty should exit via true node edge as the GraphQL_Query had no response, hence the call arrived to your agent via Your_Attendee_ID_Queue and not via QueueToAgent node.    </li> </ol> </li> <li> <p>Make sure your agent status is set to Available</p> </li> <li> <p>Using Webex App, place another call to your Inbound Channel number Your_Attendee_ID_Channel</p> <ol> <li>You should be offered the call, click on the accept button.</li> <li>If everything set correctly you should see Auto CSAT set to 4.0</li> <li>End the call and select a wrapup code if asked.</li> </ol> </li> <li> <p>In your flow, open the debuger and select the latest call from the list (on top of the list).</p> <ol> <li>Trace the steps taken in the flow</li> <li>Select GraphQL_Query and scroll down the details panel on the right-hand side to Modified Variables. You should see that now agentID and AutoCSATVar have assigned values.</li> <li> <p>Select GraphQLResponse. In details panel on the right-hand side you should see Modified Variables has a JSON response.</p> <p>Note</p> <p>In JSON Response the autoCsat is set to null.  This is expected because the lab environment lacks sufficient data to train the AI model for accurate scoring. </p> </li> <li> <p>Case_If_AgentIDEmpty should exit via false node edge as the GraphQL_Query is not empty.</p> </li> <li>CheckCSATValue is now either equals 4 or 5 (depends on what you selected on previous call) which matches the condition hence the call arrived to your agent via QueueToAgent node.</li> </ol> </li> </ol>"},{"location":"main/APITrack_Mission3_AutoCSAT/#_2","title":"Mission 3: Last Agent Routing","text":"<p>Congratulations, you have officially completed Last Agent Routing mission! \ud83c\udf89\ud83c\udf89 </p>"},{"location":"main/APITrack_Mission4/","title":"Mission 4: Routing Returning Callers","text":"<p>Note</p> <p>We are intentionally adding a bit of complexity to this lab by removing GIFs and screenshots. This approach will help you gain a deeper understanding of how to build and configure Webex Contact Center logic. If you encounter any difficulties while configuring steps in this mission, feel free to ask one of the instructors for assistance.</p>"},{"location":"main/APITrack_Mission4/#story","title":"Story","text":"<p>When a customer calls back into the contact center within ten minutes of their last call ending, we can assume there was a dropped call, missed callback, or they need additional assistance from their last interaction.  We are going to prioritize their call in the queue so that they can finish their business.</p>"},{"location":"main/APITrack_Mission4/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>New call comes into the flow</li> <li>Call the Search API to check if the ANI (caller's number) had a call which ended in the last 10 minutes.</li> <li>If the caller had a connected call which ended within the last 10 minutes, we will play a message and will queue the call with a higher priority so they will get assigned to the next available agent.</li> <li>If the caller did not end a call with the contact center in the previous 10 minutes, we will queue the call normally.</li> </ol>"},{"location":"main/APITrack_Mission4/#mission-details","title":"Mission Details","text":"<p>Your mission is to: 1. Create a new flow from scratch.  2. Build a Search API query to request information from Analyzer database and parse it into flow variables. 3. Build a condition that matches use case scenario and route the call to agent.</p> <p>Note</p> <p>We are going to touch Subflow which is the feature that enables easier management of complex flows by breaking down commonly used and repeated portions into reusable subflows. This improves readability of flows, increases reusability of repeated functionality in the subflow, as well as improves development time since there is no redundant design of the same flows.</p> <p>Subflows also introduce the ability to share commonly used subroutines between developers, between customers and will help unlock a library of subflows available in the marketplace.</p>"},{"location":"main/APITrack_Mission4/#preconfigured-elements","title":"Preconfigured Elements","text":"<ol> <li>Wait treatment Subflow which will provide Music in Queue and Queue Messages. </li> <li>Connector for calling Webex Contact Center APIs</li> </ol>"},{"location":"main/APITrack_Mission4/#build","title":"Build","text":"<ol> <li> <p>Create a flow named ReturningCaller_Your_Attendee_ID then create a flow variable </p> <p>Name: previousID</p> <p>Type: String</p> <p>Default Value: Leave empty</p> </li> <li> <p>Add a Play Message node for our welcome message</p> <p>Connect the New Phone Contact output node edge to this Play Message node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: Welcome to the advanced routing and API integrations lab. </p> </li> <li> <p>Add an HTTP Request node for our query</p> <p>Connect the output node edge from the Play message node to this node</p> <p>Select Use Authenticated Endpoint</p> <p>Connector: WxCC_API</p> <p>Path: /search</p> <p>Method: POST</p> <p>Content Type: Application/JSON</p> <p>Copy this GraphQL query into the request body: <pre><code>{\"query\":\"query lastTen($from:Long! $to:Long! $timeComparator:QueryTimeType $filter:TaskFilters){task(from:$from,to:$to,timeComparator:$timeComparator,filter:$filter){tasks{id status channelType createdTime endedTime origin destination direction terminationType isActive isCallback lastWrapupCodeName}}}\",\"variables\":{\"from\":\"{{now() | epoch(inMillis=true) - 600000}}\",\"to\":\"{{now() | epoch(inMillis=true)}}\",\"timeComparator\":\"endedTime\",\"filter\":{\"and\":[{\"status\":{\"equals\":\"ended\"}},{\"origin\":{\"equals\":\"{{NewPhoneContact.ANI}}\"}},{\"connectedCount\":{\"gte\":1}}]}}}\n</code></pre> Expanded Query For Understanding (optional) <pre><code>query lastTen(\n  $from: Long!\n  $to: Long!\n  $timeComparator: QueryTimeType\n  $filter: TaskFilters\n) {\n  task(from: $from, to: $to, timeComparator: $timeComparator, filter: $filter) {\n    tasks {\n      id\n      status\n      channelType\n      createdTime\n      endedTime\n      origin\n      destination\n      direction\n      terminationType\n      isActive\n      isCallback\n      lastWrapupCodeName\n    }\n  }\n}\n</code></pre> <pre><code>Variables:\n{\n  \"from\": \"{{now() | epoch(inMillis=true) - 600000}}\", # time now - 10 minutes represented in EPOCH time(ms)\n  \"to\": \"{{now() | epoch(inMillis=true)}}\", # time now represented in EPOCH time(ms)\n  \"timeComparator\": \"endedTime\",\n  \"filter\": {\n    \"and\": [\n      {\n        \"status\": {\n          \"equals\": \"ended\"\n        }\n      },\n      {\n        \"origin\": {\n          \"equals\": \"{{NewPhoneContact.ANI}}\" # ANI or caller phone number\n        }\n      },\n      {\n        \"connectedCount\": {\n          \"gte\": 1\n        }\n      }\n    ]\n  }  \n}\n</code></pre> </p> <p>Parse Settings:</p> <p>Content Type: <code>JSON</code></p> <p>Output Variable: previousID</p> <p>Path Expression: <code>$.data.task.tasks[0].id</code></p> </li> <li> <p>Add a Condition node</p> <p>Connect the output from the HTTP Request node to this node</p> <p>Expression: <code>{{previousID is empty}}</code></p> <p>We will connect the True node in a future step.</p> <p>Connect the False node edge to the Play Message node created in the next step. </p> </li> <li> <p>Add a Play Message node</p> <p>Connect the False node edge from the previous step to this node</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button</p> <p>Delete the Selection for Audio File</p> <p>Text-to-Speech Message: It looks like you were just working with an agent and had to call back in. We are prioritizing this call for the next available agent. </p> </li> <li> <p>Add a Queue Contact node</p> <p>Connect the output node edge from the Play Message node added in the last step to this node</p> <p>Select Static Queue</p> <p>Queue: Your_Attendee_ID_Queue</p> <p>Select Static Priority</p> <p>Static Priority Value: P1 </p> </li> <li> <p>Add a Subflow node</p> <p>In the Activity Library pane on the left side of the screen, click Subflows</p> <p>Find the Subflow names WaitTreatment and drag it onto the flow canvas like you would any other node.</p> <p>Connect the output node edge from the Queue Contact node added in the previous step to this node.</p> <p>Subflow Label: Latest</p> <p>Enable automatic updates: True</p> <p>Subflow Input Variables: None</p> <p>Subflow Output Variables: None</p> <p>Connect the output node edge from this node to the Disconnect Contact node added in the next step.</p> </li> <li> <p>Add a Disconnect Contact node</p> </li> <li> <p>Add a Queue Contact node</p> <p>Connect the True node edge from the Condition node to this node</p> <p>Select Static Queue</p> <p>Queue: Your_Attendee_ID_Queue</p> <p>Connect the Output node edge from this node to the Subflow node</p> <p>Check your flow</p> </li> <li> <p>Publish your flow</p> <p>Turn on Validation at the bottom right corner of the flow builder</p> <p>If there are no Flow Errors, Click Publish</p> <p>Add a publish note</p> <p>Add Version Label(s): Latest </p> <p>Click Publish Flow</p> </li> <li> <p>Switch to Control Hub and navigate to Channels under Customer Experience Section</p> <p>Locate your Inbound Channel (you can use the search): Your_Attendee_ID_Channel</p> <p>Select the Routing Flow: ReturningCaller_Your_Attendee_ID</p> <p>Select the Version Label: Latest</p> <p>Click Save in the lower right corner of the screen</p> </li> </ol>"},{"location":"main/APITrack_Mission4/#testing","title":"Testing","text":"<ol> <li>Your Agent desktop session should be still active but if not, use Webex CC Desktop application  and login with agent credentials you have been provided wxcclabs+agent_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you. </li> <li>On your Agent Desktop, make sure your status is not set to Available<ol> <li>Using Webex, place a call to your Inbound Channel number Your_Attendee_ID_Channel</li> <li>After you hear the queue treatment start, you can abandon the call </li> </ol> </li> <li>Using Webex, place another call to your Inbound Channel number Your_Attendee_ID_Channel</li> <li>On your Agent Desktop, set your status to available<ol> <li>You should be offered a call, click on the accept button. (You may want to mute the mic on both Webex and the Agent Desktop)</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>In your Flow:<ol> <li>Open the Debugger</li> <li>Select the last interaction (at the top of the list)</li> <li>Trace the steps taken in the flow</li> </ol> </li> <li>Answer these questions:<ol> <li>Was the call queued with priority?<ol> <li>Why or why not?</li> </ol> </li> </ol> </li> <li>Close the Debugger</li> <li>Using Webex, place another call to your Inbound Channel number Your_Attendee_ID_Channel</li> <li>On your Agent Desktop, set your status to available<ol> <li>You should be offered a call, click on the accept button. (You may want to mute the mic on both Webex and the Agent Desktop)</li> <li>After a few moments end the call and select a wrapup code.</li> </ol> </li> <li>In your Flow:<ol> <li>Open the debugger</li> <li>Select the last interaction (at the top of the list)</li> <li>Trace the steps taken in the flow</li> </ol> </li> <li>Answer these questions:<ol> <li>Was the call queued with priority?<ol> <li>Why or why not?</li> </ol> </li> <li>If you called another Inbound Channel number with the same flow logic, would your call be prioritized?<ol> <li>How could you change this behavior? </li> </ol> </li> </ol> </li> </ol> <p>Congratulations, you have officially completed Routing Returning Callers mission! \ud83c\udf89\ud83c\udf89 </p>"},{"location":"main/Browser_and_Desktop_Setup/","title":"Browser and Desktop Setup","text":""},{"location":"main/Browser_and_Desktop_Setup/#browser-setup","title":"Browser Setup","text":"<p>Since we will be using the same Chrome browser for different roles we will use the Chrome Browser profiles to allow multiple logins into the different components of the Webex contact center. For the control hub, use the Administrator profile created for you in the Chrome browser. Always offer Chrome to remember your credentials and password for this lab. For Agent Desktop, use Agent Desktop Application   pre-insalled on your working station by using Agent profile.   </p> <p>We will create the user profiles below - Admin, Agent</p> <p> </p>"},{"location":"main/Browser_and_Desktop_Setup/#creating-chrome-user-profiles","title":"Creating Chrome user profiles","text":"<p>Open the Windows Terminal (Windows key and type Powershell). Paste and run the following code. You will see 2 new Chrome shortcut icons on the desktop</p> <pre><code>$DesktopPath = [Environment]::GetFolderPath(\"Desktop\")\n$shell = New-Object -ComObject WScript.Shell\n$shortcut = $shell.CreateShortcut(\"$DesktopPath\\WxCC Admin.lnk\")\n$shortcut.TargetPath = \"%PROGRAMFILES%\\Google\\Chrome\\Application\\chrome.exe\"\n$Shortcut.Arguments = \"--user-data-dir=%USERPROFILE%\\chromeProfiles\\admin\"\n$Shortcut.Save()\n$shortcut = $shell.CreateShortcut(\"$DesktopPath\\WxCC Agent1.lnk\")\n$shortcut.TargetPath = \"%PROGRAMFILES%\\Google\\Chrome\\Application\\chrome.exe\"\n$Shortcut.Arguments = \"--user-data-dir=%USERPROFILE%\\chromeProfiles\\Agent1\"\n$Shortcut.Save()\n</code></pre> <p></p> <p>Check the desktop of your lab PC. You should find 2 Chrome shortcuts created - WxCC Admin, WxCC Agent1 and WxCC Supervisor</p> <p>When you click on the links </p> <p></p> <p>You can customize each profile to be easily identifiable with a name and/or icon of your choice</p> <p></p> <p>We will use the Admin profile first in the next section.</p>"},{"location":"main/CallbackTrack_Conclusion/","title":"Conclusion","text":"<p>We hope you found the CallBack track both challenging and rewarding as you deepened your expertise with Webex Contact Center. In this session, you explored key strategies for implementing and refining the Callback feature to enhance customer experience and operational efficiency.</p> <p>Key missions included:</p> <ul> <li>Adding Basic Callback \u2013 Ensuring customers have the option to request a return call instead of waiting in the queue.</li> <li>Scheduling a Callback on Errors \u2013 Handling unexpected issues by automatically scheduling a callback when an error occurs.</li> <li>Preventing Duplicate Callbacks \u2013 Implementing safeguards to avoid redundant callback requests, improving efficiency and customer satisfaction.</li> </ul> <p>By mastering these techniques, you are now equipped to design more efficient and customer-friendly callback workflows within Webex Contact Center.</p> <p>Should you have any questions or need further assistance, feel free to reach out or join the Webex discussion forums. We\u2019re excited to see how you apply these skills in your future projects!</p> <p>Thank you for completing the Callback track, and we look forward to your continued growth with Webex Contact Center.</p>"},{"location":"main/CallbackTrack_Mission1/","title":"CallbackTrack Mission1","text":"<p>Note</p> <p>The input in the images that follow are only examples. They do not reflect the input you need to use in the lab exercises. In some cases, the input in the images may not follow the same attendee or pod ID from previous images. They are for representation only</p>"},{"location":"main/CallbackTrack_Mission1/#story","title":"Story","text":"<p>Imagine calling a contact center, seeking quick, personalized help. Behind the scenes, a flow smoothly routes your call based on your needs.</p>"},{"location":"main/CallbackTrack_Mission1/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow. (This initiates the interaction and triggers the defined call-handling process.)</li> <li>The flow determines the caller's language preference and plays a pre-configured Text-to-Speech (TTS) prompt. (This ensures the caller receives information in their preferred language.)</li> <li>The call is routed to the appropriate queue. (This directs the caller to the right team on the flow logic.)</li> </ol>"},{"location":"main/CallbackTrack_Mission1/#mission-details","title":"Mission Details","text":"<p>Your mission is to:</p> <ol> <li>Configure key flow elements for efficient caller journeys. </li> <li>Explore Flow Templates to streamline flow creation. </li> <li>Set up routing with conditions, such as language preference. </li> <li>Gain the skills to design flows for real-world scenarios. </li> </ol> <p>Why Flow Templates? [Optional]  Flow Templates in Webex Contact Center are an essential feature for flow developers, offering a range of benefits that streamline the development process and enhance the efficiency and consistency of flow creation. Here\u2019s what they bring to the table: <ul> <li> <p>Consistency and Standards: Templates ensure that flows adhere to best practices, creating consistent experiences across multiple projects.</p> </li> <li> <p>Time Savings: Pre-built structures reduce the need to start from scratch, enabling faster setup and allowing more focus on customization.</p> </li> <li> <p>Reduced Errors: Using tested templates lowers the risk of mistakes and minimizes troubleshooting.</p> </li> <li> <p>Easy Onboarding: New developers or partners can learn quickly by using templates as guides.</p> </li> <li> <p>Scalability: Templates allow developers to replicate and adapt solutions efficiently across different flows or deployments.</p> </li> <li> <p>Innovation: Developers can spend more time on unique features and integrations rather than reconfiguring basics.</p> </li> </ul> <p>Flow Templates are designed to empower developers, speed up the development lifecycle, and maintain high-quality standards across flows, making them a core asset in Webex Contact Center flow design.</p>"},{"location":"main/CallbackTrack_Mission1/#_1","title":"CallbackTrack Mission1","text":""},{"location":"main/CallbackTrack_Mission1/#build","title":"Build","text":"<ol> <li> <p>Login into Webex Control Hub by using your Admin profile.     Your login will be of the format wxcclabs+admin_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you.</p> <p></p> <p>Note</p> <p>Remember to take up the offer from Chrome to save your password</p> </li> <li> <p>This is the Administration interface for webex contact center and is also known as the Control Hub. Look for the contact center option in the left pane under SERVICES \u2013 Contact Center and click it</p> </li> <li>Navigate to Flows, click on Manage Flows dropdown list and select Create Flows</li> <li>New Tab will be opened. Navigate to Flow Templates</li> <li>Choose Simple Inbound Call to Queue template and click Next. You can open View Details and to see observe flow structure and read flow description</li> <li> <p>Name your flow as Main_Flow_Your_Attendee_ID. Then click on Create Flow <p></p> <li> <p>Edit should be set to On when you create new flow, but if not switch it from Edit: Off mode to Edit: On. Select Play Message node with label WelcomePrompt and on the node settings modify Text-to-Speech Message to any greetings you like. This message will be the first message you hear while calling to your script.</p> </li> <li> <p>Select Queue node. On the General settings keep Static Queue checked and select queue Your_Attendee_ID_Queue from the drop down list</p> <p>Note</p> <p>As mentioned in Getting Started, all queues have been pre-configured so you don't need to change them at current step.</p> </li> <li> <p>[Optional] Select Play Message node (the one which goes after Queue and Play Music nodes) and on the Node settings modify Text-to-Speech Message to any message you like. This message will be played while the caller is waiting in the queue.</p> </li> <li> <p>On bottom right corner toggle Validation from Off to On to check for any potential flow errors and recommendations. </p> <p>Note</p> <p>You can ignore recommendations but cannot skip errors.</p> </li> <li> <p>Click Publish Flow</p> <p></p> </li> <li> <p>In popped-up window, click on dropdown menu to select Latest label, then click Publish.</p> </li> <li> <p>Return back to Control Hub to assign the Flow to your Channel (Entry Point) - Go to Channels, search for your channel Your_Attendee_ID_Channel.</p> </li> <li>Click on Your_Attendee_ID_Channel</li> <li> <p>In Entry Point settings section change the following, then click Save button:</p> <p>Routing Flow: Main_Flow_Your_Attendee_ID</p> <p>Version Label: Latest</p> </li> <p></p>"},{"location":"main/CallbackTrack_Mission1/#checkpoint-test","title":"Checkpoint Test","text":"<ol> <li>Launch Webex CC Desktop application  and login with agent credentials you have been provided wxcclabs+agent_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you. </li> <li>Select your Team Your_Attendee_ID_Team. Click Submit. Allow browser to access Microphone by clicking Allow on every visit.</li> <li> <p>Make your agent Available and you're ready to make a call.</p> <p>Note</p> <p>This is the only time during the lab when you need to log in to the Webex CC Desktop application. It has been configured to keep your agent logged into the application for the entire duration of the lab. If, for any reason, you are logged out manually or due to a network error, please log in again as explained above.</p> <p></p> </li> <li> <p>Open your Webex App and dial the Support Number provided to you, which is configured in your Your_Attendee_ID_Channel configuration.</p> </li> </ol> <p></p>"},{"location":"main/CallbackTrack_Mission1/#enhance-your-flow-by-adding-language","title":"Enhance Your Flow by adding Language","text":""},{"location":"main/CallbackTrack_Mission1/#mission-details_1","title":"Mission Details","text":"<p>Your mission is to:</p> <ul> <li>Use the same flow created in the previous section.</li> <li>Modify the TTS section to use en-AU (English - Australia) and connect the Set Variable node as illustrated below.</li> <li>Place a call to verify and validate the speech functionality.</li> </ul> <p>Text-to-Speech (TTS) in Webex Contact Center[Optional] All supported languages can be found here: Text-to-Speech-(TTS)-in-Webex-Contact-Center"},{"location":"main/CallbackTrack_Mission1/#build_1","title":"Build","text":"<ol> <li> <p>Open your flow Main_Flow_Your_Attendee_ID. Make sure Edit toggle is ON.</p> </li> <li> <p>On the right hand side you will see the Global Flow Properties Panel. Scroll down and Locate the Predefined Variables section. Click on the Add Global Variables button. Search for Global_Language variable and click on Add button.</p> <p></p> </li> <li> <p>Add a Set Variable with following configuration. </p> </li> </ol> <p>Delete connection between NewPhoneContact and WelcomePrompt</p> <p>Connect NewPhoneContact to Set Variable</p> <p>Connect Set Variable to WelcomePrompt</p> <p>Variable: Global_Language</p> <p>Set Value:  en-AU</p> <ol> <li> <p>Validate the flow by clicking Validate, Publish and select the Latest version of the flow</p> <p></p> </li> </ol>"},{"location":"main/CallbackTrack_Mission1/#testing","title":"Testing","text":"<ol> <li> <p>Open your Webex Desktop and make your agent Available and you're ready to make a call.</p> </li> <li> <p>Open your Webex App and dial the Support Number provided to you, which is configured in your Your_Attendee_ID_Channel configuration.</p> </li> </ol> <p></p> <ol> <li>Verify if the TTS language changed</li> </ol> <p>Congratulations on completing another mission.</p>"},{"location":"main/CallbackTrack_Mission2/","title":"CallbackTrack Mission2","text":""},{"location":"main/CallbackTrack_Mission2/#story","title":"Story","text":"<p>Callback functionality is an essential feature in a modern contact center, providing a solution that enhances both customer satisfaction and operational efficiency.</p> <p>Imagine a customer calls to upgrade their service but faces a 20-minute wait, they can request a callback instead of staying on hold. If no agents are available, they\u2019ll be offered the choice to remain in the queue or opt for a callback. Upon choosing the callback, they provide their number, which is validated, and the system schedules the call. Once an agent is free, the system connects with the customer. This ensures businesses retain leads while providing a seamless customer experience.</p>"},{"location":"main/CallbackTrack_Mission2/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow. </li> <li>The flow executes the logic configured in previous steps.</li> <li>The call is routed to the appropriate queue, but no agents are available.</li> <li>Since no agents are available, a callback option is offered to the caller.</li> <li>Once an agent becomes available, the callback is initiated to the provided number.</li> </ol>"},{"location":"main/CallbackTrack_Mission2/#mission-details","title":"Mission Details","text":"<p>Your mission is to: </p> <ol> <li>Continue to use same flow Main_Flow_Your_Attendee_ID </li> <li>Add aditional callback functionality to your Main_Flow_Your_Attendee_ID.</li> </ol>"},{"location":"main/CallbackTrack_Mission2/#build","title":"Build","text":"<ol> <li>Switch to the Flow Designer. Open your flow Main_Flow_Your_Attendee_ID. Make sure Edit toggle is ON.</li> <li>Delete  connection from Queue node to Music </li> <li> <p>Drag Menu node:</p> <p>Rename Activity Label to WantCallback</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: All agents are busy. Please press 1 if you want to schedule a callback. Press 2 if you want to wait in queue.</p> <p>Delete the Selection for Audio File</p> <p>Under Custom Menu Links:</p> <p>Change first Digit Number 0 to 1, add Link Description as Callback </p> <p>Add New Digit Number as 2 with Link Description Stay in queue</p> <p>Connect existing Queue node to WantCallBack node</p> <p>Connect No-Input Timeout to the front of the WantCallBack node</p> <p>Connect Unmatched Entry to the front of the WantCallBack node</p> <p></p> </li> <li> <p>Drag Collect Digits nodes</p> <p>Rename Activity Label to NewNumber</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: Please enter your 11 digits phone number to which we should call you back.</p> <p>Delete the Selection for Audio File</p> <p>Advanced Settings:</p> <p>No-Input Timeout  5 </p> <p>Make Prompt Interruptible: True</p> <p>Minimum Digits: 11</p> <p>Maximum Digits: 11</p> <p>Connect No-Input Timeout to the front of the NewNumber node</p> <p>Connect Unmatched Entry to the front of the NewNumber node</p> <p>Connect Callback from WantCallback node created in step 3 to NewNumber node</p> <p>Connect Stay in queue from WantCallback node created in step 3 to Music node</p> <p></p> </li> <li> <p>Drag one more Menu node</p> <p>Rename Activity Label to VerifyNumber</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: You entered {{NewNumber.DigitsEntered}}. Press 1 if the number is correct. Press 2 if you want to re-enter the number.</p> <p>Delete the selection for Audio File</p> <p>Custom Menu Links:</p> <p>Change first Digit Number from 0 to 1, add Link Description as Number OK</p> <p>Add New Digit Number as 2 with  Link Description Number Not OK</p> <p>Connect No-Input Timeout to the front of the VerifyNumber node</p> <p>Connect Unmatched Entry to the front of the VerifyNumber node</p> <p>Connect NewNumber created in step 4 to VerifyNumber node</p> <p>Connect Number Not OK from VerifyNumber node to Collect Digits node created in Step 4.</p> <p></p> </li> <li> <p>Add Callback node</p> <p>Callback Dial Number select  NewNumber.DigitsEntered from dropdown list</p> <p>Callback Queue:</p> <p>Static Queue: Your_Attendee_ID_Queue</p> <p>Callback ANI: Choose any number from dropdown list.</p> <p>Connect Number OK from VerifyNumber node created in step 5 to CallBack node</p> </li> <li> <p>Add Play Message node as follows:</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: Your call has been successfully scheduled for a callback. Good Bye.</p> <p>Delete the Selection for Audio File</p> <p>Connect CallBack node created in step 6 to Play Message node</p> <p>Connect Play Message to Disconnect Contact node</p> <p></p> </li> <li> <p>Validate the flow by clicking Validate, Publish and select the Latest version of the flow</p> </li> </ol>"},{"location":"main/CallbackTrack_Mission2/#testing","title":"Testing","text":"<ol> <li>Make sure you're logged into the Webex CC Desktop application as an Agent and set the status to Not Available. In this case, the call will not be assigned to an agent, and a callback will be proposed to the caller.</li> <li> <p>Make a call to the Support Number and if success you should hear configured messages.</p> </li> <li> <p>When callback is proposed, press 1 on Webex App DialPad to request a callback. </p> </li> <li> <p>When asked, provide a new number for a callback. Because in the current lab we have number limitations, we are going to provide a well-known Cisco Worldwide Support contact number 1 408 526 7209 as a callback number. Use the DialPad to provide the Cisco TAC number, then confirm when asked.</p> </li> <li>Once done, another message about successful scheduling should play.</li> <li>Make your agent Available. Contact Center will reserve you right away and propose to answer a callback call.</li> </ol> <p>Congratulations on completing another mission.</p>"},{"location":"main/CallbackTrack_Mission3/","title":"Mission 3: Callback on Global Error","text":""},{"location":"main/CallbackTrack_Mission3/#story","title":"Story","text":"<p>Imagine a caller is navigating an IVR menu when, suddenly, the call drops due to an unexpected error in the flow. This unplanned interruption leaves the customer disconnected without completing their request. In this scenario we are going to configure our flow to schedule a callback to the caller when such failure scenario occurs.</p>"},{"location":"main/CallbackTrack_Mission3/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow. </li> <li>The flow executes the logic by querying external database for Outbound Channel and ANI.</li> <li>The call is routed to the appropriate queue, but no agents are available.</li> <li>On a callback offering a new option should be selected to simulate an error and drop the call. </li> <li>Once an agent becomes available, the callback is initiated to the  number.</li> </ol>"},{"location":"main/CallbackTrack_Mission3/#mission-details","title":"Mission Details","text":"<p>Your mission is to:</p> <ol> <li>Simulate a global error scenario to trigger a Global Error Event and initiate a workflow to reconnect with a caller whose call was disconnected due to an undefined error. </li> <li>Configure an API POST request to schedule a callback when global error happens. You cannot rely on the Callback node in Main Flow because the call leg is no longer active after termination. Instead, you must design a custom solution to address this limitation.</li> <li>You do not need to configure Outdial Channel and Ourdial Queue as they have been preconfigured for you: <ul> <li>Outdial_Your_Attendee_ID_Channel </li> <li>Outdial queue Outdial_Your_Attendee_ID_Queue to which your Your_Attendee_ID_Team has been assigned. </li> </ul> </li> <li>Simulate a real API server. You will use MockAPI to retrieve the Outdial channel ID and the target callback number. The retrieved Outdial channel ID will then be used in the Callback API POST request.</li> </ol> <p>Good to Know [Optional] <p>We are starting to use Webex Contact Center APIs in this mission. More information can be found in the Webex Contact Center for Developers portal.</p> <p>For more information of how you can use MockAPI please watch these Vidcasts:  [ADVANCED] Use MockAPI to enhance your Demos - PART 1 and [ADVANCED] Use MockAPI to enhance your Demos - PART 2</p>"},{"location":"main/CallbackTrack_Mission3/#build","title":"Build","text":"<p>Note</p> <p>We are going to extend the same flow by adding additional functionality to simulate a global error scenario which will trigger a callback to a caller. </p> <ol> <li>Switch to the Flow Designer. Open your flow Main_Flow_Your_Attendee_ID and make sure Edit toggle is ON.</li> <li> <p>On the right-hand side, in the Global Flow Properties panel, scroll down to locate the Flow Variables section under Custom Variables. Click the Add Flow Variable button and add the following 4 flow variables:  </p> <ul> <li>Outdial Entry Point Variable :</li> </ul> <p>Name: outdialcbid</p> <p>Type: String</p> <p>Default Value: empty</p> <ul> <li>Custom ANI variable:</li> </ul> <p>Name: customani</p> <p>Type: String</p> <p>Default Value: empty</p> <ul> <li>HTTP GET Result variable:</li> </ul> <p>Name: getresult</p> <p>Type: String</p> <p>Default Value: empty</p> <ul> <li>Simulated Error variable:</li> </ul> <p>Name: simulatederror</p> <p>Type: String</p> <p>Default Value: empty</p> <p></p> </li> <li> <p>Click on WantCallback node  </p> <p>Add Option 3. Name it as Simulate an error</p> <p>Text-to-Speech Message: All agents are busy. Please press 1 if you want to schedule a callback. Press 2 if you want to wait in queue. Press 3 to simulate global error.. We are extending the existing message by adding Option 3.</p> <p></p> </li> <li> <p>Add an HTTP Request node for our query. We are going to fetch Outbound Channel/Entry Point ID and custom ANI. Remember we used the same Cisco Worldwide Support contact number in Mission 3 of Fundamental labs.</p> <p>Connect WantCallback Option 3 to this HTTP node</p> <p>We will connct HTTP Request node in next step</p> <p>Activity Name: GET_CBID</p> <p>Use Authenticated Endpoint: Off</p> <p>Requestt URL: https://674481b1b4e2e04abea27c6e.mockapi.io/flowdesigner/Lab/DynVars?dn={{NewPhoneContact.DNIS | slice(2) }}</p> <p>Method: GET</p> <p>Content Type: Application/JSON</p> <p>Parsing Settings:</p> <p>Content Type: JSON </p> <p>Output Variable: outdialcbid</p> <p>Path Expression: $[0].outboundcallbackep</p> <p>Click Add New</p> <p>Output Variable: customani</p> <p>Path Expression: $[0].tacnumber</p> <p></p> <p>Test your API Source[Optional] <ol> <li> <p>Test your API resource. https://674481b1b4e2e04abea27c6e.mockapi.io/flowdesigner/Lab/DynVars?dn={DNIS}</p> </li> <li> <p>Replace {DNIS} with the provided DNIS number stripping +1</p> </li> </ol> <p>[Example:] If your number +14694096861, then your GET Query should be https://674481b1b4e2e04abea27c6e.mockapi.io/flowdesigner/Lab/DynVars?dn=4694096861</p> <ol> <li>Open Chrome browser and past your URL. You should get the follwoing result</li> </ol> <p></p> <ol> <li> <p>Test JSON Path in the following tool https://jsonpath.com/</p> </li> <li> <p>Paste your GET URL into the Browser address line and copy the output in square brackets (including brackets)</p> </li> <li> <p>Open https://jsonpath.com/ and paste the copied response into Inputs window</p> </li> <li> <p>In JSONPath box copy and paste one of the path expression from FetchFlowSettings to verify your results.</p> </li> </ol> <p> </p> <li> <p>Add Set Variable node</p> <p>Activity Label: SetGetResult</p> <p>Connect GET_CBID to this node</p> <p>We will connct Set Variable node in next step</p> <p>Variable: getresult</p> <p>Set To Variable: GET_CBID.httpResponseBody </p> <p></p> </li> <li> <p>Add one more Set Variable and Disconnect Contact nodes. We are going to intentionally configure an incorrect value in the Set Variable node to forcibly trigger a Global Error.</p> <p>Activity Label: SimulateGlobalError</p> <p>Connect SetGetResult to this node</p> <p>Connect this node to Disconnect Contact</p> <p>Variable: simulatederror</p> <p>Set Value: {{ ANI | 123}}</p> <p> </p> </li> <li> <p>Navigate to Event Flows and delete connection from OnGlobalError to EndFlow.</p> </li> <li> <p>Add HTTP Request node to the flow. In this step we are going to build a Create Task API POST request. See Create Task API for details.</p> <p>Activity Label: CallBackAPI_HTTPRequest</p> <p>Connect the OnGlobalError output edge node to this node</p> <p>Use Authentication Endpoint: On</p> <p>Connector: WxCC_API</p> <p>Request Path: /v1/tasks</p> <p>Method: POST</p> <p>Content Type: Application/JSON</p> <p>Request Body: <pre><code>{\n    \"entryPointId\": \"{{outdialcbid}}\",\n    \"destination\": \"{{customani}}\",\n    \"attributes\": {\"Message\":\"tester\",\"To Queue\":\"sales\"},\n    \"outboundType\": \"CALLBACK\",\n    \"mediaType\": \"telephony\",\n    \"callback\": {\n    \"callbackOrigin\": \"web\",\n    \"callbackType\": \"immediate\"\n    }\n}\n</code></pre> </p> </li> <li> <p>Add Condition node. In this node we are going to check the status of our API POST request. If HTTP response is 201 Created the output will be True and if other than 201 then False.</p> <p>Activity Label: HTTPStatusCode</p> <p>Connect the output node edge from the CallBackAPI_HTTPRequest node to this node</p> <p>Connect both True and False exists to EndFlow node. We will be able to see in Debug tool whether request was succsesful or not. </p> <p>In the Expression section write an expresion {{CallBackAPI_HTTPRequest.httpStatusCode == 201}}</p> </li> <li> <p>Validate the flow by clicking Validate, Publish and select the Latest version of the flow.</p> <p> </p> </li> <li> <p>Switch to Control Hub. Navigate to Channels under Customer Experience Section, locate your channel Your_Attendee_ID_Channel.</p> </li> <li>Click on Your_Attendee_ID_Channel</li> <li> <p>In Entry Point settings section change the following, then click Save button:</p> <p>Routing Flow: Main_Flow_Your_Attendee_ID</p> <p>Version Label: Latest</p> </li>"},{"location":"main/CallbackTrack_Mission3/#testing","title":"Testing","text":"<ol> <li>Make sure you're logged into Webex CC Desktop application as Agent and set status to Not Available. In this case call will not be assigned to an agent and callback will be proposed to a caller.</li> <li> <p>Make a call to the Support Number and if success you should hear configured messages.</p> </li> <li> <p>Next message will propose you options to request callback, stay in queue or simulate an error. Press 3 on Webex App DialPad to simulate an error. </p> </li> <li> <p>If everything configured correctly your call should be disconnected.</p> </li> <li> <p>Open Debug tool in your Main_Flow_Your_Attendee_ID and click on first call in the list which should be the last call you made. Look for WantCallback in Activity Name column and make sure the call left WantCallback out of Option 3 and continue through GET_CBID.</p> </li> <li> <p>Click on either GET_CBID node of the flow or on Activity Name GET_CBID n the Debug tool and scroll to the bottom the right hand side section of Debug tool. Under Modified Variables you should see values assigned to outdialcbid and customani flow variables. Where outdialcbid is ID of your Outdial_Your_Attendee_ID_Channel and customani is a well known Cisco Worldwide Support contact number 1 408 526 7209. The same number we used in previous exercise.  This time we used an external database as well as GET API call to extract that number.</p> </li> <li> <p>While still on Debug tool, click on SetGetResult to see full response from HTTP request that we wrote into getresult flow variable.</p> </li> <li> <p>Make sure SimulateGlobalError activity name has an Error next to it in Outcome column. That mean you succesfully simulated Global Error event.</p> </li> <li> <p>Click on next activity name GlobalErrorHandling which goes after SimulateGlobalError activity name. Flow Designer automaticaly will open Event Flows tab.</p> </li> <li> <p>Observe Condition node to make sure exit went out via True exit. This tells you that HTTP response is 201 Created and callback has been scheduled succesfully. </p> </li> <li> <p>On Webex Desktop, make your agent Available. Contact Center will reserve your agent right away and propose to answer a callback call.</p> </li> </ol> <p>Congratulations on completing another mission.</p>"},{"location":"main/CallbackTrack_Mission4/","title":"Mission 4: Preventing Callback duplication","text":"<p>Note</p> <p>This task relies on completing Mission 3 of Fundamental Labs. Ensure that mission is completed to have a fully functional callback feature in your flow.</p>"},{"location":"main/CallbackTrack_Mission4/#story","title":"Story","text":"<p>If a caller who already has a scheduled callback contacts the contact center again to request another callback, our system can recognize this. It will then notify the caller that a callback is already scheduled and will be completed as soon as the next agent becomes available.</p>"},{"location":"main/CallbackTrack_Mission4/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call from a caller, who already has a scheduled callback, enters the flow.</li> <li>The flow executes the logic configured in previous missions.</li> <li>The call is routed to the appropriate queue, but no agents are available.</li> <li>Since no agents are available, a callback option is offered to the caller.</li> <li>Once the caller requests for a callback, IVR replies that calback has been scheduled already.</li> </ol>"},{"location":"main/CallbackTrack_Mission4/#mission-details","title":"Mission Details","text":"<p>Your mission is to:</p> <ol> <li>Enhance the functionality of the Main_Flow_Your_Attendee_ID by introducing an advanced feature to check if a callback already exists for a specific tested number. </li> <li>Use Search API request to fetch the data from Analyzer database. For more details see Search API for details.</li> </ol>"},{"location":"main/CallbackTrack_Mission4/#build","title":"Build","text":"<ol> <li> <p>Switch to the Flow Designer. Open your flow Main_Flow_Your_Attendee_ID and make sure Edit toggle is ON.</p> </li> <li> <p>On the right-hand side, in the Global Flow Properties panel, scroll down to locate the Flow Variables section under Custom Variables. Click the Add Flow Variable button and add the following 3 flow variables: </p> <ul> <li>Callback Status variable:</li> </ul> <p>Name: callbackStatus</p> <p>Type: String</p> <p>Default Value: empty</p> <ul> <li>Callback Connect Time variable:</li> </ul> <p>Name: callbackConnectTime</p> <p>Type: String</p> <p>Default Value: empty</p> <ul> <li>Search Result variable:</li> </ul> <p>Name: searchresult</p> <p>Type: String</p> <p>Default Value: empty</p> <p></p> </li> <li> <p>Add an HTTP Request node for our query as shown in the following video.</p> <p>Remove the existing connection between VerifyNumber Option 1 and Callback node</p> <p>Connect VerifyNumber Option 1 to this HTTP node</p> <p>We will connect this HTTP Request node in next step</p> <p>Activity Label: HTTPRequest_CallBackSearch</p> <p>Select Use Authenticated Endpoint</p> <p>Connector: WxCC_API</p> <p>Path: /search</p> <p>Method: POST</p> <p>Content Type: Application/JSON</p> <p>Copy this GraphQL query into the request body:</p> <p><pre><code>{\"query\":\"query($from: Long!, $to: Long!)\\n{\\n  taskDetails(\\n      from: $from\\n      to: $to\\n    filter: {\\n      and: [\\n       { callbackData: { equals: { callbackNumber: \\\"{{NewNumber.DigitsEntered}}\\\" } } }\\n       { lastEntryPoint: { id: { equals: \\\"{{NewPhoneContact.EntryPointId}}\\\" } } }\\n      ]\\n    }\\n  ) {\\n    tasks {\\n      callbackData {\\n        callbackRequestTime\\n        callbackConnectTime\\n        callbackNumber\\n        callbackStatus\\n        callbackOrigin\\n        callbackType\\n      }\\n       lastEntryPoint {\\n        id\\n        name\\n      }\\n    }\\n  }\\n}\",\"variables\":{\"from\":\"{{now() | epoch(inMillis=true) - 15000000}}\",\"to\":\"{{now() | epoch(inMillis=true)}}\"}}\n</code></pre> Expanded Query For Understanding (optional) <pre><code>query($from: Long!, $to: Long!)\n{\n  taskDetails(\n      from: $from\n      to: $to\n    filter: {\n      and: [\n       { callbackData: { equals: { callbackNumber: \"{{NewNumber.DigitsEntered}}\" } } }\n       { lastEntryPoint: { id: { equals: \"{{NewPhoneContact.EntryPointId}}\" } } }\n      ]\n    }\n  ) {\n    tasks {\n      callbackData {\n        callbackRequestTime\n        callbackConnectTime\n        callbackNumber\n        callbackStatus\n        callbackOrigin\n       callbackType\n      }\n       lastEntryPoint {\n        id\n        name\n      }\n    }\n  }\n}\n</code></pre> </p> <p>Parse Settings:</p> <ul> <li>Content Type: JSON</li> <li>Output Variable: <code>callbackStatus</code></li> <li>Path Expression: <code>$.data.taskDetails.tasks[0].callbackData.callbackStatus</code></li> </ul> <p>Click Add New</p> <ul> <li> <p>Output Variable: <code>callbackConnectTime</code></p> </li> <li> <p>Path Expression: <code>$.data.taskDetails.tasks[0].callbackData.callbackConnectTime</code></p> </li> </ul> <p> </p> </li> <li> <p>Add Set Veriable node</p> <p>Connect HTTPRequest_CallBackSearch to this node</p> <p>We will connct Set Variable node in next step</p> <p>Variable: searchresult</p> <p>Set To Variable: HTTPRequest_CallBackSearch.httpResponseBody</p> <p></p> </li> <li> <p>Add a Condition node</p> <p>Connect Set Variable created in previous step to this node</p> <p>Connect False exit path to existing CallBack node</p> <p>We will connect True exit path in next step</p> <p>Expression:    <pre><code>{{ callbackConnectTime == \"-1\" ? (callbackStatus == \"Not Processed\" ? (HTTPRequest_CallBackSearch.httpStatusCode == 200 ? \"true\" : \"false\") : \"false\") : \"false\" }}\n</code></pre></p> <p>Note</p> <p>Above expression uses nested ternary logic to combine the checks. This evaluates the first condition and then evaluates the second condition if the first is true and so on. In our case the expression returns True only when httpStatusCode equals 200, callbackStatus is Not Processed and callbackConnectTime is -1</p> <p></p> </li> <li> <p>Add Play Message and Disconnect Contact nodes: </p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: The callback for provided number has been scheduled already. Please await for a callback once next agent becomes available. Thank you for your patience.</p> <p>Delete the Selection for Audio File</p> <p>Connect True exit path of Condition node created in previous step to Play Message node Connect this Play Message to Disconnect Contact node</p> <p></p> </li> <li> <p>Validate the flow by clicking Validate, Publish and select the Latest version of the flow.</p> </li> </ol>"},{"location":"main/CallbackTrack_Mission4/#_1","title":"Mission 4: Preventing Callback duplication","text":""},{"location":"main/CallbackTrack_Mission4/#testing","title":"Testing","text":"<ol> <li>Make sure your Agent either Logged Out or in Not Available state. In this case call will not be assigned to an agent and callback will be proposed to a caller.</li> <li>Make sure your Main_Flow_Your_Attendee_ID is assigned to Your_Attendee_ID_Channel. If not, do that (refer to previous very first Mission where this step was explained in details).</li> <li>Make a call to your Support Number and if success you should hear configured messages and ask to provide a new number for a callback. Because in current lab we are having number limitations we are going to provide a wellknown Cisco Worldwide Support contact number 1 408 526 7209</li> <li>While keeping your agent Not Available, make another test call to your flow and request for a callback to the same number 1 408 526 7209.</li> <li>You should hear a message configured in Step 6 of the current mission.</li> <li>Click on Analyze to visualy observe the call flow. Make sure you're viewing latest Published Version.</li> <li>Review the flow and click on HTTPRequest_CallBackSearch where you can cross-launch debuger to that particalar call.</li> <li>Navigate to HTTPRequest_CallBackSearch to see Modified Variables at the bottom of right hand side of the debuger. </li> <li>Click on Set Variable, which is the next step after HTTPRequest_CallBackSearch, to see full Search API response which we wrote to searchresult flow variable on the Step 6 of the cusrrent mission configuration. </li> </ol> <p>Congratulations on completing another mission.</p>"},{"location":"main/Choose_Your_Adventure/","title":"Choose Your Adventure","text":""},{"location":"main/Choose_Your_Adventure/#welcome-to-your-lab-adventure","title":"Welcome to Your Lab Adventure!","text":""},{"location":"main/Choose_Your_Adventure/#overview","title":"Overview","text":"<p>In this session, we\u2019ve designed 15 unique labs for you to explore, grouped into 4 distinct tracks to create a focused and engaging learning experience. Each track is crafted to help you develop specific skills.</p> <p>Here\u2019s what you need to know:</p> <p>Each track offers a different number of labs, guiding you through a cohesive learning journey.</p> <p>Completing just one track is enough to achieve the session\u2019s goals.</p> <p>Want to push further? Finish 2 tracks to excel, 3 tracks to become an expert, or take on all 4 tracks to earn the ultimate title of Mega Superstar!</p> <p>Take a moment to review the tracks, choose the ones that excite you, and dive in. This is your adventure\u2014make it unforgettable!</p> <p>There\u2019s no set order\u2014start with any track that interests you most, but we recommend starting with the Core Track. One of the missions contains information you are going to use on the final troubleshooting task, which we will complete as the last mission.</p>"},{"location":"main/Choose_Your_Adventure/#track-1-core-track","title":"Track 1: Core Track","text":"<p>This track introduces the fundamental features of Flow Designer. Participants will explore flow templates, business hours, and event flows while learning to utilize additional tools like the Debugger and Analyzer.</p> <p></p>"},{"location":"main/Choose_Your_Adventure/#track-2-api-track","title":"Track 2: API Track","text":"<p>In this track, participants will work on customizing flows using a variety of API requests to interact with different data sources.</p> <p></p>"},{"location":"main/Choose_Your_Adventure/#track-3-callback-track","title":"Track 3: CallBack Track","text":"<p>The Callback track includes a series of labs focused on various callback scenarios. It begins with basic callback configuration and progresses to advanced GraphQL techniques to eliminate duplicate callbacks.</p> <p></p>"},{"location":"main/Choose_Your_Adventure/#track-4-ai-agent-track","title":"Track 4: AI Agent Track","text":"<p>Although the smallest, but challenging track. It involves configuring Cisco\u2019s native AI agent (bot) and integrating it with Flow Designer to enable flow customization.</p> <p></p>"},{"location":"main/CoreTrack_Conclusion/","title":"Conclusion","text":"<p>We hope you enjoyed the hands-on experience of the Webex Contact Center Lab. Throughout this lab, you\u2019ve gained valuable insights into building and configuring essential elements of Webex Contact Center workflows. Starting with the Basic Call Routing mission, you explored foundational features like flow templates, Text-to-Speech (TTS) capabilities, and language-based routing.</p> <p>From there, you enhanced your skills with missions such as:</p> <ul> <li>Using Business Hours to introduce flexibility and adaptability to your flows.</li> <li>Leveraging Event Flows to dynamically handle real-time events.</li> <li>Designing and implementing a Post Call Survey to gather actionable customer feedback.</li> <li>You also worked extensively with the Flow Designer Tools, gaining confidence in navigating, troubleshooting, and optimizing flows.</li> </ul> <p>By completing these missions, you\u2019ve not only developed a deep understanding of Webex Contact Center features but also acquired practical skills to harness its capabilities in real-world scenarios.</p> <p>Should you need further assistance or have questions, feel free to reach out or join discussions in the Webex community. We\u2019re here to support your success as you continue to explore and implement these powerful tools in your future projects.</p> <p>Thank you for participating in Part 1 of the lab, and we encourage you to continue exploring and building on these foundational skills as you progress through the next stages of the Webex Contact Center Flow Designer Lab!</p>"},{"location":"main/CoreTrack_Mission1/","title":"CoreTrack Mission1","text":"<p>Note</p> <p>The input in the images that follow are only examples. They do not reflect the input you need to use in the lab exercises. In some cases, the input in the images may not follow the same attendee or pod ID from previous images. They are for representation only</p>"},{"location":"main/CoreTrack_Mission1/#story","title":"Story","text":"<p>Imagine calling a contact center, seeking quick, personalized help. Behind the scenes, a flow smoothly routes your call based on your needs.</p>"},{"location":"main/CoreTrack_Mission1/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow. (This initiates the interaction and triggers the defined call-handling process.)</li> <li>The flow determines the caller's language preference and plays a pre-configured Text-to-Speech (TTS) prompt. (This ensures the caller receives information in their preferred language.)</li> <li>The call is routed to the appropriate queue. (This directs the caller to the right team on the flow logic.)</li> </ol>"},{"location":"main/CoreTrack_Mission1/#mission-details","title":"Mission Details","text":"<p>Your mission is to:</p> <ol> <li>Configure key flow elements for efficient caller journeys. </li> <li>Explore Flow Templates to streamline flow creation. </li> <li>Set up routing with conditions, such as language preference. </li> <li>Gain the skills to design flows for real-world scenarios. </li> </ol> <p>Why Flow Templates? [Optional]  Flow Templates in Webex Contact Center are an essential feature for flow developers, offering a range of benefits that streamline the development process and enhance the efficiency and consistency of flow creation. Here\u2019s what they bring to the table: <ul> <li> <p>Consistency and Standards: Templates ensure that flows adhere to best practices, creating consistent experiences across multiple projects.</p> </li> <li> <p>Time Savings: Pre-built structures reduce the need to start from scratch, enabling faster setup and allowing more focus on customization.</p> </li> <li> <p>Reduced Errors: Using tested templates lowers the risk of mistakes and minimizes troubleshooting.</p> </li> <li> <p>Easy Onboarding: New developers or partners can learn quickly by using templates as guides.</p> </li> <li> <p>Scalability: Templates allow developers to replicate and adapt solutions efficiently across different flows or deployments.</p> </li> <li> <p>Innovation: Developers can spend more time on unique features and integrations rather than reconfiguring basics.</p> </li> </ul> <p>Flow Templates are designed to empower developers, speed up the development lifecycle, and maintain high-quality standards across flows, making them a core asset in Webex Contact Center flow design.</p>"},{"location":"main/CoreTrack_Mission1/#_1","title":"CoreTrack Mission1","text":""},{"location":"main/CoreTrack_Mission1/#build","title":"Build","text":"<ol> <li> <p>Login into Webex Control Hub by using your Admin profile.     Your login will be of the format wxcclabs+admin_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you.</p> <p></p> <p>Note</p> <p>Remember to take up the offer from Chrome to save your password</p> </li> <li> <p>This is the Administration interface for webex contact center and is also known as the Control Hub. Look for the contact center option in the left pane under SERVICES \u2013 Contact Center and click it</p> </li> <li>Navigate to Flows, click on Manage Flows dropdown list and select Create Flows</li> <li>New Tab will be opened. Navigate to Flow Templates</li> <li>Choose Simple Inbound Call to Queue template and click Next. You can open View Details and to see observe flow structure and read flow description</li> <li> <p>Name your flow as Main_Flow_Your_Attendee_ID. Then click on Create Flow <p></p> <li> <p>Edit should be set to On when you create new flow, but if not switch it from Edit: Off mode to Edit: On. Select Play Message node with label WelcomePrompt and on the node settings modify Text-to-Speech Message to any greetings you like. This message will be the first message you hear while calling to your script.</p> </li> <li> <p>Select Queue node. On the General settings keep Static Queue checked and select queue Your_Attendee_ID_Queue from the drop down list</p> <p>Note</p> <p>As mentioned in Getting Started, all queues have been pre-configured so you don't need to change them at current step.</p> </li> <li> <p>[Optional] Select Play Message node (the one which goes after Queue and Play Music nodes) and on the Node settings modify Text-to-Speech Message to any message you like. This message will be played while the caller is waiting in the queue.</p> </li> <li> <p>On bottom right corner toggle Validation from Off to On to check for any potential flow errors and recommendations. </p> <p>Note</p> <p>You can ignore recommendations but cannot skip errors.</p> </li> <li> <p>Click Publish Flow</p> <p></p> </li> <li> <p>In popped-up window, click on dropdown menu to select Latest label, then click Publish.</p> </li> <li> <p>Return back to Control Hub to assign the Flow to your Channel (Entry Point) - Go to Channels, search for your channel Your_Attendee_ID_Channel.</p> </li> <li>Click on Your_Attendee_ID_Channel</li> <li> <p>In Entry Point settings section change the following, then click Save button:</p> <p>Routing Flow: Main_Flow_Your_Attendee_ID</p> <p>Version Label: Latest</p> </li> <p></p>"},{"location":"main/CoreTrack_Mission1/#checkpoint-test","title":"Checkpoint Test","text":"<ol> <li>Launch Webex CC Desktop application  and login with agent credentials you have been provided wxcclabs+agent_IDYour_Attendee_ID@gmail.com. You will see another login screen with OKTA on it where you may need to enter the email address again and the password provided to you. </li> <li>Select your Team Your_Attendee_ID_Team. Click Submit. Allow browser to access Microphone by clicking Allow on every visit.</li> <li> <p>Make your agent Available and you're ready to make a call.</p> <p>Note</p> <p>This is the only time during the lab when you need to log in to the Webex CC Desktop application. It has been configured to keep your agent logged into the application for the entire duration of the lab. If, for any reason, you are logged out manually or due to a network error, please log in again as explained above.</p> <p></p> </li> <li> <p>Open your Webex App and dial the Support Number provided to you, which is configured in your Your_Attendee_ID_Channel configuration.</p> </li> </ol> <p></p>"},{"location":"main/CoreTrack_Mission1/#enhance-your-flow-by-adding-language","title":"Enhance Your Flow by adding Language","text":""},{"location":"main/CoreTrack_Mission1/#mission-details_1","title":"Mission Details","text":"<p>Your mission is to:</p> <ul> <li>Use the same flow created in the previous section.</li> <li>Modify the TTS section to use en-AU (English - Australia) and connect the Set Variable node as illustrated below.</li> <li>Place a call to verify and validate the speech functionality.</li> </ul> <p>Text-to-Speech (TTS) in Webex Contact Center[Optional] All supported languages can be found here: Text-to-Speech-(TTS)-in-Webex-Contact-Center"},{"location":"main/CoreTrack_Mission1/#build_1","title":"Build","text":"<ol> <li> <p>Open your flow Main_Flow_Your_Attendee_ID. Make sure Edit toggle is ON.</p> </li> <li> <p>On the right hand side you will see the Global Flow Properties Panel. Scroll down and Locate the Predefined Variables section. Click on the Add Global Variables button. Search for Global_Language variable and click on Add button.</p> <p></p> </li> <li> <p>Add a Set Variable with following configuration. </p> </li> </ol> <p>Delete connection between NewPhoneContact and WelcomePrompt</p> <p>Connect NewPhoneContact to Set Variable</p> <p>Connect Set Variable to WelcomePrompt</p> <p>Variable: Global_Language</p> <p>Set Value:  en-AU</p> <ol> <li> <p>Validate the flow by clicking Validate, Publish and select the Latest version of the flow</p> <p></p> </li> </ol>"},{"location":"main/CoreTrack_Mission1/#testing","title":"Testing","text":"<ol> <li> <p>Open your Webex Desktop and make your agent Available and you're ready to make a call.</p> </li> <li> <p>Open your Webex App and dial the Support Number provided to you, which is configured in your Your_Attendee_ID_Channel configuration.</p> </li> </ol> <p></p> <ol> <li>Verify if the TTS language changed</li> </ol> <p>Congratulations on completing another mission.</p>"},{"location":"main/CoreTrack_Mission2/","title":"CoreTrack Mission2","text":""},{"location":"main/CoreTrack_Mission2/#story","title":"Story","text":"<p>Business Hours allows you to configure the operational hours of the contact center, offering an enhanced experience in routing strategy configuration and simplifying the routing flow for improved efficiency and customer satisfaction. </p>"},{"location":"main/CoreTrack_Mission2/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow. </li> <li>The flow determines the caller's language preference and plays a pre-configured Text-to-Speech (TTS) prompt. </li> <li>The flow determines whether it is currently within working hours and routes the call appropriately.</li> <li>The call is routed to the appropriate queue. </li> </ol>"},{"location":"main/CoreTrack_Mission2/#mission-details","title":"Mission Details","text":"<p>Your mission is to:</p> <ul> <li> <p>Continue to use same flow Main_Flow_Your_Attendee_ID we created in previous Mission.</p> </li> <li> <p>Add Business Hours functionality Your_Attendee_ID_Bussiness_Hours to your flow. Business Hours entity has been configured for you and contains the following settings:</p> <ul> <li> <p>Working Hours - Define the time during which the contact center will be operational. Each working hour configuration can include one or more shifts. Different schedules can be set for various time zones.</p> </li> <li> <p>Holidays - Specify a day or range of days declared as holidays. The entire 24 hours of the selected day(s) are marked as non-operational.</p> </li> <li> <p>Overrides - Configure working hours for special cases, such as emergencies or occasions like Christmas, when the contact center operates for additional hours.</p> </li> </ul> </li> </ul>"},{"location":"main/CoreTrack_Mission2/#build","title":"Build","text":"<ol> <li> <p>Switch to Control Hub and navigate to Business Hours under Customer Experience section. Locate your Your_Attendee_ID_Bussiness_Hours. You will see that currently only Working Hours are configured for every working day between 12:00 AM to 11:59 PM\".</p> <p></p> </li> <li> <p>Switch to Flow Designer. Open your flow Main_Flow_Your_Attendee_ID and make sure Edit toggle is ON.</p> </li> <li> <p>Drag and drop following nodes to the canvas:</p> <ul> <li> <p>Business Hours</p> </li> <li> <p>Play Message</p> </li> <li> <p>Disconnect Contact</p> </li> </ul> <p></p> </li> <li> <p>Connect Set Variable node to Business Hours and Business Hours node exits as follow:</p> <ul> <li> <p>Working Hours connect to WelcomePrompt node</p> </li> <li> <p>Holidays, Overrides and Default connect to new added Play Message node.</p> </li> <li> <p>New added Play Message connect to Disconnect contact</p> </li> </ul> <p></p> </li> <li> <p>Click on Business Hours node and select preconfigured Business Hours Entity Your_Attendee_ID_Bussiness_Hours .</p> </li> <li> <p>Configure Play Message node as follows:</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: It's not working hours currently. Please call later. Goodbye.</p> <p>Delete the Selection for Audio File</p> </li> <li> <p>Validate the flow by clicking Validate, Publish and select the Latest version of the flow</p> <p>Note</p> <p>We haven't changed the flow behavior yet as Working hours covers the current time. You can make a call and accept it on agent desktop to verify.</p> <p></p> </li> <li> <p>We are going to use Override option to change the logic. Overrides as well as Business hours have been preconfigured for you. Now we need to apply it on your Your_Attendee_ID_Bussiness_Hours entity. Switch to Control Hub and open Your_Attendee_ID_Bussiness_Hours in Control Hub, scroll down to Additional Settings and select Overrides_Hours from Override dropdown list. Then click Save.</p> <p>Note</p> <p>Override Hours entity was configured to overwrite Working Hours and set to duration of current Cisco Live lab </p> <p></p> </li> </ol>"},{"location":"main/CoreTrack_Mission2/#testing","title":"Testing","text":"<ol> <li>Open your Webex App and dial the Support Number provided to you, which is configured in your Your_Attendee_ID_Channel configuration. Make sure you hear the message we set in Step 6.</li> </ol>"},{"location":"main/CoreTrack_Mission2/#post-testing-steps","title":"Post Testing steps","text":"<ol> <li> <p>[IMPORTANT] Now we need to revert the configuration we made in Step 8 as we are going to use same flow in upcoming tasks. Open Your_Attendee_ID_Bussiness_Hours in Control Hub, scroll down to Additional Settings and select None from Override dropdown list. Then click Save.</p> <p> </p> </li> <li> <p>Make one more call from Webex App to make sure you hear the original Welcome message you set on first steps of previous Mission.</p> </li> </ol> <p>Congratulations on completing another mission.</p>"},{"location":"main/CoreTrack_Mission3/","title":"CoreTrack Mission3","text":""},{"location":"main/CoreTrack_Mission3/#story","title":"Story","text":"<p>Callback functionality is an essential feature in a modern contact center, providing a solution that enhances both customer satisfaction and operational efficiency.</p> <p>Imagine a customer calls to upgrade their service but faces a 20-minute wait, they can request a callback instead of staying on hold. If no agents are available, they\u2019ll be offered the choice to remain in the queue or opt for a callback. Upon choosing the callback, they provide their number, which is validated, and the system schedules the call. Once an agent is free, the system connects with the customer. This ensures businesses retain leads while providing a seamless customer experience.</p>"},{"location":"main/CoreTrack_Mission3/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow. </li> <li>The flow executes the logic configured in previous steps.</li> <li>The call is routed to the appropriate queue, but no agents are available.</li> <li>Since no agents are available, a callback option is offered to the caller.</li> <li>Once an agent becomes available, the callback is initiated to the provided number.</li> </ol>"},{"location":"main/CoreTrack_Mission3/#mission-details","title":"Mission Details","text":"<p>Your mission is to: </p> <ol> <li>Continue to use same flow Main_Flow_Your_Attendee_ID </li> <li>Add aditional callback functionality to your Main_Flow_Your_Attendee_ID.</li> </ol>"},{"location":"main/CoreTrack_Mission3/#build","title":"Build","text":"<ol> <li>Switch to Flow Designer where your flow Main_Flow_Your_Attendee_ID should be open and make sure Edit toggle is ON.</li> <li>Delete  connection from Queue node to Music </li> <li> <p>Drag Menu node:</p> <p>Rename Activity Label to WantCallback</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: All agents are busy. Please press 1 if you want to schedule a callback. Press 2 if you want to wait in queue.</p> <p>Delete the Selection for Audio File</p> <p>Under Custom Menu Links:</p> <p>Change first Digit Number 0 to 1, add Link Description as Callback </p> <p>Add New Digit Number as 2 with Link Description Stay in queue</p> <p>Connect existing Queue node to WantCallBack node</p> <p>Connect No-Input Timeout to the front of the WantCallBack node</p> <p>Connect Unmatched Entry to the front of the WantCallBack node</p> <p></p> </li> <li> <p>Drag Collect Digits nodes</p> <p>Rename Activity Label to NewNumber</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: Please enter your 11 digits phone number to which we should call you back.</p> <p>Delete the Selection for Audio File</p> <p>Advanced Settings:</p> <p>No-Input Timeout  5 </p> <p>Make Prompt Interruptible: True</p> <p>Minimum Digits: 11</p> <p>Maximum Digits: 11</p> <p>Connect No-Input Timeout to the front of the NewNumber node</p> <p>Connect Unmatched Entry to the front of the NewNumber node</p> <p>Connect Callback from WantCallback node created in step 3 to NewNumber node</p> <p>Connect Stay in queue from WantCallback node created in step 3 to Music node</p> <p></p> </li> <li> <p>Drag one more Menu node</p> <p>Rename Activity Label to VerifyNumber</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: You entered {{NewNumber.DigitsEntered}}. Press 1 if the number is correct. Press 2 if you want to re-enter the number.</p> <p>Delete the selection for Audio File</p> <p>Custom Menu Links:</p> <p>Change first Digit Number from 0 to 1, add Link Description as Number OK</p> <p>Add New Digit Number as 2 with  Link Description Number Not OK</p> <p>Connect No-Input Timeout to the front of the VerifyNumber node</p> <p>Connect Unmatched Entry to the front of the VerifyNumber node</p> <p>Connect NewNumber created in step 4 to VerifyNumber node</p> <p>Connect Number Not OK from VerifyNumber node to Collect Digits node created in Step 4.</p> <p></p> </li> <li> <p>Add Callback node</p> <p>Callback Dial Number select  NewNumber.DigitsEntered from dropdown list</p> <p>Callback Queue:</p> <p>Static Queue: Your_Attendee_ID_Queue</p> <p>Callback ANI: Choose any number from dropdown list.</p> <p>Connect Number OK from VerifyNumber node created in step 5 to CallBack node</p> </li> <li> <p>Add Play Message node as follows:</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: Your call has been successfully scheduled for a callback. Good Bye.</p> <p>Delete the Selection for Audio File</p> <p>Connect CallBack created in step 6 to Play Message node Connect Play Message created in step 6 to Disconnect Contact node</p> <p></p> </li> <li> <p>Validate the flow by clicking Validate, Publish and select the Latest version of the flow</p> </li> </ol>"},{"location":"main/CoreTrack_Mission3/#testing","title":"Testing","text":"<ol> <li>Make sure you're logged into the Webex CC Desktop application as an Agent and set the status to Not Available. In this case, the call will not be assigned to an agent, and a callback will be proposed to the caller.</li> <li> <p>Make a call to the Support Number and if success you should hear configured messages.</p> </li> <li> <p>When callback is proposed, press 1 on Webex App DialPad to request a callback. </p> </li> <li> <p>When asked, provide a new number for a callback. Because in the current lab we have number limitations, we are going to provide a well-known Cisco Worldwide Support contact number 1 408 526 7209 as a callback number. Use the DialPad to provide the Cisco TAC number, then confirm when asked.</p> </li> <li>Once done, another message about successful scheduling should play.</li> <li>Make your agent Available. Contact Center will reserve you right away and propose to answer a callback call.</li> </ol> <p>Congratulations on completing another mission.</p>"},{"location":"main/CoreTrack_Mission4/","title":"CoreTrack Mission4","text":""},{"location":"main/CoreTrack_Mission4/#story","title":"Story","text":"<p>An Event Flow in Webex Contact Center is a workflow triggered by specific events in the customer interaction process, such as call arrival, agent assignment, call disconnection or actions within the IVR.</p> <p>Event flows enable a wide range of scenarios, with one common use case being the ability to update an external database with data collected during a call\u2014either from the IVR or through interaction with a live agent.</p>"},{"location":"main/CoreTrack_Mission4/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow. </li> <li>The flow executes the logic configured in previous steps.</li> <li>When the agent answers the call, they receive a screen pop and can adjust call details on the interaction panel.</li> <li>The flow triggers an event when the agent disconnects from the call.</li> </ol>"},{"location":"main/CoreTrack_Mission4/#mission-details","title":"Mission Details","text":"<ol> <li>Continue to use same flow Main_Flow_Your_Attendee_ID </li> <li>Configure a screen pop in your flow.</li> <li>Configure an API call to trigger on the AgentDisconnect event.</li> </ol> <p>Note</p> <p>In this mission, we\u2019ll utilize Webhook.site, a free online tool that generates a temporary, unique URL for capturing and inspecting HTTP requests. It\u2019s widely used by developers and testers for debugging and testing webhooks or other HTTP-based APIs.</p>"},{"location":"main/CoreTrack_Mission4/#build","title":"Build","text":"<p>Note</p> <p>The Global Variable with name WhoIsCalling that we are going to use in this mission has been already created. Switch to Control Hub and navigate to Flows under Customer Experience section. Select Global Variables on top and search for WhoIsCalling to observe it's configuration. You DO NOT need to modify it here.</p> <ol> <li> <p>Open you your Main_Flow_Your_Attendee_ID or refresh the Flow Designer page to make sure new created Global Variables are being populated. Make sure Edit toggle is ON</p> </li> <li> <p>Add WhoIsCalling Global Variable to the flow.</p> <p></p> </li> <li> <p>Open New Browser tab and paste the following URL Webhook.site. Then click on Your unique URL to make a copy of URL.  DO NOT close this Tab</p> <p></p> </li> <li> <p>Go back to your flow and navigate to Even Flows tab, delete EndFlow_xkf node which is connected to AgentDisconnect </p> </li> <li> <p>Add HTTPRequest and DisconnectContact node in between these nodes.</p> <p>Connect AgentDisconnect to HTTPRequest node</p> <p>Connect HTTPRequest to DisconnectContact </p> </li> <li> <p>Modify HTTPRequest node settings:</p> <p>Use Authenticated Endpoint: Off</p> <p>Request URL: Paste your unique URL copied on Step 3 from https://webhook.site/.</p> <p>Method: POST</p> <p>Content Type: Application/JSON</p> <p>Request Body: <pre><code>{\n\"DNIS\": \"{{NewPhoneContact.DNIS}}\",\n\"ANI\": \"{{NewPhoneContact.ANI}}\",\n\"InteractionId\": \"{{NewPhoneContact.InteractionId}}\",\n\"Language\": \"{{Global_Language}}\",\n\"WhoCalls\": \"{{WhoIsCalling}}\"\n}\n</code></pre></p> <p>Note</p> <p>We are building a dictionary with values generated by flow, language we set in main lab and also WhoIsCalling value which will be provided by agent in agent desktop.</p> <p></p> </li> <li> <p>Modify Screenpop configuration in the same flow</p> <p>Screen Pop URL: https://www.ciscolive.com/emea/faqs.html</p> <p>Screen Pop Desktop Label: Cisco Live Amsterdam 2025 FAQ</p> <p>Display Settings: Inside Desktop</p> <p></p> </li> <li> <p>Validate the flow by clicking Validate, Publish and select the Latest version of the flow</p> </li> </ol>"},{"location":"main/CoreTrack_Mission4/#testing","title":"Testing","text":"<ol> <li>Make sure you're logged into Webex CC Desktop application as Agent wxcclabs+agent_IDYour_Attendee_ID@gmail.com and set status to Available.</li> <li>Make a call to the Support Number and if success you should hear Welcome message and then accept the call by agent.</li> <li>Upon accepting the call, a new browser tab will be opened with the Screen Pop URL configured in Step 4.</li> <li>Switch back to the Agent Desktop. In agent interaction panel change Who Is Calling? to any text you like then click Save and End the call.</li> <li>Switch to the Webhook.site you should see the request which came right after Agent dropped the call with all the needed data </li> </ol>"},{"location":"main/CoreTrack_Mission4/#post-testing-steps","title":"Post Testing Steps","text":"<p>We recommend removing the ScreenPop node after testing. Otherwise, every time you make a new call to the Main Flow, a pop-up will appear, which may be distracting.</p> <ol> <li> <p>Open your flow Main_Flow_Your_Attendee_ID. Make sure Edit toggle is ON.</p> </li> <li> <p>Navigate to Even Flows and delete Screenpop node</p> </li> <li> <p>Validate the flow by clicking Validate, Publish and select the Latest version of the flow</p> </li> </ol> <p></p> <p>Congratulations on completing another mission where you have learnt how to use events in your flows.</p>"},{"location":"main/CoreTrack_Mission5/","title":"CoreTrack Mission5","text":""},{"location":"main/CoreTrack_Mission5/#story","title":"Story","text":"<p>In this lab, you will complete a mission to enhance customer feedback collection by integrating a survey into the Webex Contact Center call flow. The lab is designed to be simple yet practical, focusing on minimal configuration within the Flow Designer, while leveraging a preconfigured survey template.</p> <p>Good to Know [Optional] <p>Supported Survey Question Types in Webex Contact Center</p> <ol> <li>Customer Satisfaction (CSAT):<ul> <li>Purpose: Measure satisfaction with a specific interaction or service.</li> <li>Example Question: \"On a scale of 1 to 5, how satisfied are you with the service you received today?\"</li> <li>Use Case: Assess overall satisfaction at the end of a call or interaction.</li> </ul> </li> <li>Customer Effort Score (CES):<ul> <li>Purpose: Evaluate the ease of resolving a customer's issue or completing a task.</li> <li>Example Question: \"On a scale of 1 to 5, how easy was it to complete your task today?\"</li> <li>Use Case: Identify pain points in the customer journey or process efficiency.</li> </ul> </li> <li>Net Promoter Score (NPS):<ul> <li>Purpose: Measure customer loyalty and the likelihood of recommending the service.</li> <li>Example Question: \"On a scale of 0 to 10, how likely are you to recommend our service to a friend or colleague?\"</li> </ul> </li> <li>Use Case: Gauge long-term customer loyalty and brand advocacy. </li> </ol>"},{"location":"main/CoreTrack_Mission5/#call-flow-overview","title":"Call Flow Overview","text":"<ol> <li>A new call enters the flow. </li> <li>The flow executes the logic to enable survey functionality.</li> <li>Agent answers the call.</li> <li>The flow triggers an event when the agent disconnects from the call.</li> <li>The caller remains on the line and hears the survey menu.</li> </ol>"},{"location":"main/CoreTrack_Mission5/#mission-details","title":"Mission Details","text":"<p>Your mission is to:</p> <ol> <li>Integrate a preconfigured survey into the call flow using the Flow Designer.</li> <li>Configure basic logic to determine when to route customers to the survey (e.g., after a call ends).</li> <li>Understand how Webex Contact Center supports various survey question types, including CSAT, CES, and NPS.</li> </ol> <p>Note</p> <p>The survey is prebuilt and includes key questions designed to gather actionable insights from customers. Your task is to focus on configuring the flow and ensuring the survey is triggered seamlessly during the customer journey.</p>"},{"location":"main/CoreTrack_Mission5/#pre-configured-entities","title":"Pre-configured entities","text":"<p>Survey: PCS-2025</p> <p>System defined GlobalVariable: Global_FeedbackSurveyOptIn.  </p> <p>[Optional]     In case you don't want to use pre-configured Survey you can configure your own. Expand below section to create your own Survey otherwise proceed to Build section below</p> <p>Create your own Survey [Optional] <ul> <li> <p>In Control Hub -&gt; Contact Center open a Survey configuration page under Customer Expirience. Then click Create new survey.</p> </li> <li> <p>Enter survey name in Survey name field. Make sure IVR survey is selected. Then click next </p> </li> </ul> <p> </p> <ul> <li>Edit Welcome note and Thank you note by uploading the following files. Download files to your desktop prior uploading to survey. </li> </ul> <p> </p> <ul> <li> <p>Click on Add a question which is in the middle between Welcome note and Thank you note. Choose either NPS, CSAT or CES type of question.</p> </li> <li> <p>Upload respective audio prompts. Prompts can be downloaded from shared folder.</p> </li> <li> <p>Click Next. You can ignore Error Handling configuration page. Click Save*</p> </li> </ul> <p> </p>"},{"location":"main/CoreTrack_Mission5/#build","title":"Build","text":"<ol> <li> <p>Switch to the Control Hub then go to Contact Center. Navigate to the Surveys under the Customer Experience section. Locate PCS-2025 Survey and click on it to familiarise yourself with it's configuration. </p> </li> <li> <p>Switch to the Flow Designer. Open your Main_Flow_Your_Attendee_ID, make sure Edit toggle is ON.</p> </li> <li> <p>Add Global Variable Global_FeedbackSurveyOptIn to your flow.   </p> </li> <li> <p>Drag Set Variable node to canvas:</p> <p>Activity Name: FeedbackSet</p> <p>Variable: Global_FeedbackSurveyOptIn</p> <p>Set Value: true</p> <p>Delete connection between NewPhoneContact and Set Variable on which we configured Language while doing the Main Lab.</p> <p>Connect NewPhoneContact to the front of the FeedbackSet node</p> <p>Connect FeedbackSet to the front of the Set Variable node</p> <p></p> </li> <li> <p>Open Event FLows  tab and locate AgentDisconected node. If you completed previous mission you should have HTTPRequest node connected to it. Delete the connection between HTTPRequest node and DisconnectContact.</p> </li> <li> <p>Drag FeedbackV2 and Play Message</p> <p>FeedbacV2</p> <p>SurveyMethod -&gt; VoiceBased:  PCS-2025</p> <p>Connect HTTPRequest to FeedbackV2 node</p> <p>Connect FeedbackV2 node to Disconnect node</p> <p>Connect FeedbackV2 Undefined Error to Play Message node</p> <p>Play Message</p> <p>Enable Text-To-Speech</p> <p>Select the Connector: Cisco Cloud Text-to-Speech</p> <p>Click the Add Text-to-Speech Message button and paste text: Something went wrong on Feedback node. Please call later.</p> <p>Delete the selection for Audio File</p> <p>Connect Play Message created to Disconnect Contact node </p> <p> </p> </li> <li> <p>Validate the flow by clicking Validate, Publish and select the Latest version of the flow</p> </li> </ol>"},{"location":"main/CoreTrack_Mission5/#testing","title":"Testing","text":"<ol> <li>Your Agent desktop session should be still active but if not, use Webex CC Desktop application  and login with agent credentials you have been provided wxcclabs+agent_IDYour_Attendee_ID@gmail.com and become Available </li> <li>Make a test call to the Support Number and accept the call by Agent.</li> <li>Finish the call by Agent so the caller could stay on the line. </li> <li>Now the caller should hear prompts configured in PCS-2025. Complete the survey.</li> <li> <p>To check survey responses, switch to the Control Hub and navigate to the Surveys under Customer Experience section. Locate the PCS-2025 survey and click on the Download button on the right hand side to download a CSV file with the provided Survey responses.</p> <p>Note</p> <p>If you create your own survey, as described in the Optional section of this mission, you might not see the survey responses immediately, as there is a delay in edited surveys.</p> </li> </ol> <p>Congratulations on completing another mission where we have learnt how Post Call Survey can be implemented.</p>"},{"location":"main/CoreTrack_Mission6/","title":"CoreTrack Mission6","text":"<p>Note</p> <p>The current mission does not include any configuration steps, but it focuses on additional Flow Designer tools that facilitate flow troubleshooting and might provide you with ideas on how to optimize your flow logic.</p>"},{"location":"main/CoreTrack_Mission6/#debug-overview","title":"Debug Overview","text":"<p>The Debug Tool is an essential feature in the Webex Contact Center Flow Designer, designed to simplify troubleshooting and enhance visibility into the call flow behavior. Its importance lies in its ability to provide real-time insights, enabling administrators and developers to quickly identify and resolve issues that could impact customer experience.</p> <p>Good to Know [Optional]"},{"location":"main/CoreTrack_Mission6/#why-debug-is-important","title":"Why Debug is Important?","text":"<ol> <li> <p>Real-Time Analysis: Tracks the call flow execution step by step, showing which nodes are executed and the data passed between them.</p> </li> <li> <p>Error Identification: Quickly pinpoint errors, such as misconfigured nodes, incorrect variable usage, or unexpected call routing.</p> </li> <li> <p>Optimization: Provides insights into flow performance, allowing you to optimize for efficiency and accuracy. </p> </li> </ol>"},{"location":"main/CoreTrack_Mission6/#how-to-use-the-debug-tool","title":"How to Use the Debug Tool","text":"<ol> <li> <p>Switch to the Flow Designer and open your flow, Main_Flow_Your_Attendee_ID. Then, click the Debug button at the bottom of the Flow Designer.</p> </li> <li> <p>You can view the calls you've made today during the previous exercises. Please click on the one at the top.</p> <ol> <li> <p>You can search your call by Intercation ID</p> </li> <li> <p>Filter by Date Range and by Label</p> </li> </ol> <p>Note</p> <p>You might see an allert as on the following screenshot. Click refresh button to reload the diagram.   </p> </li> <li> <p>Observe the execution path, with visual indicators highlighting the flow nodes being executed. You can switch between Event Flows and Main Flows to see all nodes executed.</p> </li> <li> <p>By clicking on each activity name you will see it's details. Examples: Entry point ID, Flow Label, DNIS, selected Business Hours, also TTS value and what events were triggered.</p> <p></p> </li> <li> <p>Spend some time to explore the tool. Identify bottlenecks, loops, or errors if any. </p> </li> <li>As an option, you can break something in your flow and see how Debug tool shows that error.</li> </ol> <p>By leveraging the Debug Tool effectively, you can ensure your call flows function as intended, providing a seamless experience for both customers and agents.</p>"},{"location":"main/CoreTrack_Mission6/#flow-analytics-overview","title":"Flow Analytics Overview","text":"<p>Flow Analytics feature is designed to provide flow developer, administrators and supervisors with a comprehensive, graphical view of how Flow paths are being utilized across all customer interactions. This feature enables better analysis of IVR flow operations, helping to identify areas for improvement and increase self-service containment. The feature provides an aggregated view that allows users to:</p> <ul> <li>Analyze traces aggregated over a period of time.</li> <li>Visualize the aggregated data in a flow diagram, with various metrics like, average call duration, error percentage, along with some activities level metrics. </li> <li>Show interaction traces for a selected activity.</li> <li>Switch between multiple versions of analytics views.</li> <li>Color-coded links between activities based on the number of activity executions, and status.</li> </ul> <p>Good to Know [Optional]"},{"location":"main/CoreTrack_Mission6/#why-flow-analytics-is-important","title":"Why Flow Analytics is Important?","text":"<ol> <li> <p>Performance Monitoring: Tracks key metrics, such as flow usage, execution frequency, and processing times, helping you assess flow efficiency.</p> </li> <li> <p>Behavior Analysis: Identifies patterns in customer interactions and highlights potential issues, such as abandoned calls or potential loops.</p> </li> <li> <p>Proactive Optimization: Offers data-driven insights to fine-tune flow configurations, ensuring optimal performance and alignment with business objectives. </p> </li> </ol>"},{"location":"main/CoreTrack_Mission6/#how-to-use-the-flow-analytics-tool","title":"How to Use the Flow Analytics Tool","text":"<ol> <li> <p>On the Flow Designer, click on the Analyze tab at the bottom of the Flow Designer to open the Flow Analytics Tool</p> </li> <li> <p>Specify a DateTime range for the report. All calls we made happened today hence select Today option.</p> </li> <li> <p>Review visualizations and reports showing flow metrics, such as:</p> <ul> <li> <p>Total flow Executions</p> </li> <li> <p>Execution paths and their frequency</p> </li> <li> <p>Avarage flow duraion</p> </li> <li> <p>Average activities per contact</p> </li> <li> <p>Activity errors | Activity error %</p> </li> </ul> <p></p> </li> <li> <p>Drill down into specific interactions by clicking on desired node.</p> </li> <li> <p>If you spot any errors, click on that node. In the popped-up Activity Usage Details window, you can find call details, including Interaction ID, Start and End time, Duration, and a cross-launch link to the Debugger.</p> <p></p> </li> <li> <p>Observe older flow versions by selecting Version History. Then expand Other Versions. Choose anyone you like and click View. You might need to specify DateTime range again if the selected flow version was never executed withing the chosen range in Step 2.</p> <p></p> </li> </ol> <p>By leveraging the Flow Analytics Tool, you gain a comprehensive understanding of how your flows perform and interact with customers, enabling you to make data-backed decisions to improve both efficiency and user satisfaction.</p>"},{"location":"main/FinalBossFight_Hint1/","title":"FinalBossFight Hint1","text":"<ol> <li> <p>Debug the flow using the Webex Contact Center Debug tool to inspect HTTP request logs.</p> </li> <li> <p>Use Flow Designer Analytics to analyze call flow behavior and spot issues in logic execution.</p> </li> <li> <p>To find out correct JSON path to Queue_140 use https://674481b1b4e2e04abea27c6e.mockapi.io/flowdesigner/Lab/DynVars?dn={DNIS}</p> </li> <li> <p>Replace {DNIS} with the provided Support Number number stripping +1</p> </li> <li>[Example:] If your number +14694096861, then your GET Query should be https://674481b1b4e2e04abea27c6e.mockapi.io/lowdesigner/Lab/DynVars?dn=4694096861</li> <li>Open Chrome browser and past your URL. You should get the follwoing result</li> <li></li> <li>Test JSON Path in the following tool https://jsonpath.com/</li> <li>Paste your GET URL into the Browser address line and copy the output in square brackets (including brackets)</li> <li>Open https://jsonpath.com/ and paste the copied response into Inputs window</li> <li>In JSONPath box copy and paste one of the path expression from FetchFlowSettings to verify your results.</li> <li></li> </ol>"},{"location":"main/FinalBossFight_Mission/","title":"FinalBossFight Mission","text":""},{"location":"main/FinalBossFight_Mission/#welcome-final-challenge-mission","title":"Welcome Final Challenge Mission!","text":""},{"location":"main/FinalBossFight_Mission/#story","title":"Story","text":"<p>In this short troubleshooting task you're are going to play a technical engineer who got a request from end customer regarding broken production flow. You as an engineer must fix the reported issue before contact center opens in just 20 mins.  So NO PRESSURE HERE AT ALL!!!</p>"},{"location":"main/FinalBossFight_Mission/#problem-description","title":"Problem Description","text":"<p>A customer reports a critical issue with their call flow: callers cannot land in the queue and are being redirected to the TAC Service number, which is not an intended outcome. Initially, the problem seemed to be related to the queue configuration, but after the customer attempted some adjustments, the situation worsened. Now, callers cannot even reach the queue node, and it seems like the HTTP request has been broken completely.</p>"},{"location":"main/FinalBossFight_Mission/#mission-details","title":"Mission Details","text":"<p>Your task is to identify and fix the issues causing this behavior. Specifically:</p> <ol> <li>The flow should correctly execute the HTTP request and retrieve the expected value of Queue_140 ID.</li> <li>The queue node should reference the queue dynamically using a variable, ensuring that calls are directed to Queue_140.</li> <li>Calls should land in the intended queue instead of being redirected to the TAC Service number.</li> <li>The phone in the middle of the room should ring, signaling a successful fix.</li> </ol>"},{"location":"main/FinalBossFight_Mission/#before-you-start","title":"Before you start","text":"<ol> <li> <p>Assign FinalBoss_Flow_Your_Attendee_ID to your Your_Attendee_ID_Channel.</p> <p></p> </li> <li> <p>Open the FinalBoss_Flow_Your_Attendee_ID and you're ready to start troubleshooting.</p> </li> <li> <p>Use the following URL for unauthenticated API requests: https://674481b1b4e2e04abea27c6e.mockapi.io/flowdesigner/Lab/DynVars?dn={{NewPhoneContact.DNIS | slice(2) }}</p> </li> </ol>"},{"location":"main/FinalBossFight_Mission/#competition-rewards","title":"Competition &amp; Rewards","text":"<p>A real IP phone is placed in the middle of the room, and an agent logs into Webex Desktop using that phone as the telephony option. Once the call flow is successfully fixed, the phone will ring, and the agent will accept the call. The first three participants to successfully make the phone ring\u2014without cheating and by following the rules explained previously\u2014will win a prize. This encourages fast and accurate troubleshooting, making the exercise more engaging and competitive.</p> <p>This exercise will help attendees practice debugging and resolving common Webex Contact Center API integration issues. Ensure they document their troubleshooting steps to reinforce learning.</p>"},{"location":"main/FinalBossFight_Solution/","title":"FinalBossFight Solution","text":"<ol> <li> <p>Missing GET URL: Ensure the HTTPrequest node is configured as unauthenticated and has URL configured https://674481b1b4e2e04abea27c6e.mockapi.io/flowdesigner/Lab/DynVars?dn={{NewPhoneContact.DNIS | slice(2) }}</p> </li> <li> <p>Wrong Parsing: Ensure HTTPRequest has the following Parse Settings</p> <ul> <li> <p>Content Type: JSON</p> </li> <li> <p>Output Variable: <code>queuevar</code></p> </li> <li> <p>Path Expression: <code>$[0].queue140</code></p> </li> </ul> </li> <li> <p>Wrong condition: Ensure Check_HTTP_Status_Code status check is looking for 200, not 201. Adjust the condition logic accordingly.</p> </li> <li> <p>Queue ID verification: In Condition_MatchingQueue <code>queuevar</code> must have a value of Queue_140 ID in order to exit via True node edge.</p> <p></p> </li> </ol>"},{"location":"main/FlowDesignerOverview/","title":"FlowDesignerOverview","text":""},{"location":"main/FlowDesignerOverview/#canvas-main-flow-and-event-flows","title":"Canvas, Main Flow, and Event Flows","text":"<p>The Canvas is the gray working space on which you drop the activities. Use the controls in the bottom left side of the screen to move around the canvas and zoom in and zoom out. There are no constraints on the flow size or canvas usage.</p> <p>Flow Designer has two tabs that allow extra canvas space:   - Main Flow   - Event Flows</p> <p>These tabs logically separate different paths of your flow and create a more organized workspace.</p>"},{"location":"main/FlowDesignerOverview/#main-flow","title":"Main Flow","text":"<p>Use the Main Flow tab to script the primary flow based on the Trigger Event defined in the Start Flow activity. In the Main Flow tab, configure the end-to-end experience for a caller, starting from the Cisco Unified IP Interactive Voice Response (IVR) menu, until opting out or wrapping up the call. The flow contains predictable steps that the system executes in a sequence.</p>"},{"location":"main/FlowDesignerOverview/#event-flows","title":"Event Flows","text":"<p>At any point during the execution of the Main Flow, the system triggers events that interrupt the Main Flow. For example, when an agent answers a phone call, the caller\u2019s experience in the queue is interrupted. If you want to define unique behavior when these events are triggered, you can script optional Event Flows. Event Flows are asynchronous to the Main Flow. You can\u2019t predict if or when an Event Flow will be triggered. For this reason, Event Flows are optional and are intended to extend the Main Flow functionality.</p> <p>Note</p> <p>You can configure multiple event handling flows in the Event Flows canvas. Each event flow must have a unique start and end, with no shared activities.</p>"},{"location":"main/FlowDesignerOverview/#zoom-toolbar","title":"Zoom Toolbar","text":"<p>The zoom toolbar in Flow Designer has Global Properties, zoom-in, and zoom-out buttons to display the Global Properties pane, and minimize or maximize the contents in the canvas.</p> <ul> <li> <p>Global Properties: Click the  icon to open the Global Properties pane.</p> </li> <li> <p>Zoom-in: Click the icon  on the toolbar. When you reach the maximum limit, the button is disabled.</p> </li> <li> <p>Zoom-out: Click the icon on the toolbar. When you reach the maximum limit, the button is disabled.</p> </li> <li> <p>Fit to View: Click the icon  in the toolbar to adjust the canvas view so the entire flow is visible.</p> </li> <li> <p>Copy and paste activities: Click the icon  on the toolbar to copy and paste selected activities on the canvas.</p> </li> <li> <p>Undo: Click the icon  on the toolbar to undo the last performed action.</p> </li> <li> <p>Redo: Click the icon  on the toolbar to redo the last performed action.</p> </li> <li> <p>Arrange All: Click the icon   on the toolbar to organize all the activities in the flowdesigner canvas.</p> </li> </ul>"},{"location":"main/FlowDesignerOverview/#canvas-control-actions-and-shortcut-keys","title":"Canvas control actions and shortcut keys","text":"<p>To enhance the efficiency and productivity of flow developers, the Flow Designer canvas provides the following options:</p> <ul> <li> <p>Undo-redo actions: To undo and redo up to last 10 actions. Use the undo, redo buttons in thezoom toolbar or right-click on the canvas for the context menu.</p> </li> <li> <p>Cut, copy, and paste: To cut, copy, and paste activites and links within and across flows, event flows, and subflows.</p> </li> <li> <p>Auto arrange: To automatically organize all activities in the canvas for better understaning and easy maintenance.</p> </li> <li> <p>Display gridlines: To change the background of the canvas from dot grid to line grid and vice-eversa.</p> </li> <li> <p>Snap to grid: To align the activity to the grid line.</p> </li> <li> <p>Keyboard shortcuts: To edit quickly using keyboard shortcuts. Click the help icon. Choose Keyboard shortcuts to view the list of available keyboard shortcuts.</p> </li> </ul>"},{"location":"main/FlowDesignerOverview/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>The Flow Designer canvas provides the following keyboard shortcuts:</p> Shortcut Key Description General Open Keyboard Shortcuts Ctrl + Alt + K Tools H Hand tool Shift + A Auto arrange Edit Ctrl + C Copy Ctrl + X Cut Ctrl + V Paste Ctrl + Z Undo Ctrl + Shift + Z Redo Backspace Delete Ctrl + A Select All View Ctrl + + Zoom in Ctrl + - Zoom out Ctrl + Scroll Zoom in or out Shift + Scroll Scroll left or right Shift + 1 Fit to view"},{"location":"main/Lab2/","title":"Lab2","text":"<p>Previously, it was not possible to make calls directly from a Flow to the WxCC API Gateway. Instead, a third-party application, such as WxConnect, was required to make an API call back to the WxCC API Gateway. The third-party application utilized the HTTP POST method to communicate with the WxCC API Gateway. Now, this functionality is directly supported within the Flow, allowing API calls to be made to the WxCC API Gateway without the need for an intermediary application. This simplifies the configuration process and eliminates an additional potential point of failure.</p>"},{"location":"main/Lab2/#how-it-was","title":"How it was","text":""},{"location":"main/Lab2/#how-it-is-now","title":"How it is now","text":""},{"location":"main/Lab2/#_1","title":"Lab2","text":""},{"location":"main/Lab3/","title":"Introductory Lab","text":""},{"location":"main/Lab3/#another-task","title":"Another Task","text":"<p>Some more example</p>"},{"location":"main/PreRequisites/","title":"PreRequisites","text":""},{"location":"main/PreRequisites/#learning-objectives","title":"Learning Objectives","text":"<ol> <li>Ensure that you have \"POD Your_Attendee_ID.pdf\" file on your desktop with instructions and credentials to access your lab. If you do not, please ask your lab proctor now.</li> <li>Understand your configuration instructions</li> <li>Familiarize yourself how we will use Google Chrome profiles to simulate various scenarios covered in the next labs.</li> </ol>"},{"location":"main/PreRequisites/#know-before-you-start","title":"Know before you start","text":"<ol> <li> <p>We will be using a shared lab tenant for simulations, meaning all attendees will work within the same Webex Contact Center environment. To avoid conflicts, ensure that any entities you configure are tagged with the Attendee ID assigned to you.</p> <p>WxCC Schema</p> </li> <li> <p>The majority of the configuration in Control Hub is already set up, allowing you to focus primarily on Flow Design. Of course, there may still be some elements to adjust, but these should be minimal, letting you concentrate on building and refining the flow logic rather than spending time on initial setup.</p> </li> <li>The Agents have been configured for you. You will be performing the rest of the configurations to route voice calls</li> <li>All your configurations should contain your attendee ID so the lab users don't step over each other's configurations</li> <li>Each of you has been provided with the phone number to dial (Entry point DN), 1 agents, 1 Supervisor and 1 admin.</li> <li>We are going to use built-in Cisco Text to Speech for playing all messages in the lab.</li> <li>Please ask for help when you need it. You can do it by clicking on \"Ask a Question\" or by raising your hand and calling the proctor.</li> </ol>"},{"location":"main/PreRequisites/#predefined-configuration","title":"Predefined configuration","text":"<p>Entry Point/Channels:  Your_Attendee_ID_Channel</p> <p>Queue:  Your_Attendee_ID_Queue</p> <p>Agent:   wxcclabs+agent_IDYour_Attendee_ID@gmail.com</p> <p>Supervisor:   wxcclabs+supvr_IDYour_Attendee_ID@gmail.com</p> <p>Business Hours: Your_Attendee_ID_Bussiness_Hours</p> <p>Webex App has been pre-installed on your Lab PC</p> <p>Assigned Inbound Channel Number: Provided by Lab Instructor</p> <p>More pre-configured entities will be mentioned during the lab missions if they have any.</p>"},{"location":"main/PreRequisites/#testing","title":"Testing","text":""},{"location":"main/PreRequisites/#agent-desktop","title":"Agent Desktop","text":"<p>Use Agent Desktop application  pre-installed on your workstation to login your agent. In addition, Desktop profile was configured in a way where you don't need to select a Telephony line. By default only Desktop Audio (WebRTC) has been enabled.</p>"},{"location":"main/PreRequisites/#calling-to-contact-center","title":"Calling to Contact Center","text":"<p>All call to Webex Contact center should be done from Webex App which has been pre-installed for you as well as pre-logined to it. To make a test just open Webex App and dial the provided Support Number assigned to you.</p> <p></p> <p>Note</p> <p>International dialing is not allowed so you won't be able to dial your cell phones unless you have a US number.</p>"},{"location":"main/overview/","title":"Overview","text":"Please submit the form below with your Attendee ID. All configuration entries in the lab guide will be renamed to include your Attendee ID. Attendee ID: Save"},{"location":"main/overview/#overview","title":"Overview","text":""},{"location":"main/overview/#learning-objectives","title":"Learning Objectives","text":"<p>Welcome to \"From Good to Great - Enhancing Customer Experience with the Webex Contact Center Flow Designer\" Instructor-led Lab</p> <p>This advanced lab is designed to empower you with the skills to craft exceptional customer journeys using the Webex Contact Center Flow Designer. Over the course of this lab, you\u2019ll work hands-on with features and integrations that bring intelligence and efficiency to every interaction. Take your time to explore and complete each step\u2014you have 24 hours of pod access, and the lab content will remain available even after your pod expires for future reference. In this lab, you will:</p> <ul> <li> <p>Master Workflow Creation: Learn how to build seamless workflows tailored to customer needs, including routing based on preferences and leveraging real-time data.</p> </li> <li> <p>Leverage AI and Automation: Explore integrations with pre-configured AI tools such as Webex AI Agent or interactive customer interactions and Cisco Text-to-Speech for dynamic responses.</p> </li> <li> <p>Optimize Routing Logic: Implement advanced routing capabilities, such as callback handling, last agent routing and using global variables to facilitate routing logic .</p> </li> <li> <p>Invoking Flow API: Advance decision-making by using the Analyzer database on the fly.</p> </li> </ul> <p>Additionally, you will explore side missions for optional deep dives into:</p> <ul> <li> <p>Event handling functionality for agent efficiency.</p> </li> <li> <p>Creating Post Call survey to measure customer satisfaction</p> </li> <li> <p>Changing Contact Center flow logic by using your phone only.</p> </li> </ul>"},{"location":"main/overview/#disclaimer","title":"Disclaimer","text":"<p>The lab design and configuration examples provided are for educational purposes. For production design queries, please consult your Cisco representative or an authorized Cisco partner. Let\u2019s get started and discover how Webex Contact Center Flow Designer takes customer experiences from good to great!</p>"}]}